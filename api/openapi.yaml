openapi: 3.0.3
info:
  contact:
    name: OneLogin
    url: https://support.onelogin.com
  description: OpenAPI Specification for OneLogin
  title: OneLogin API
  version: 3.1.1
servers:
- url: https://your-api-subdomain.onelogin.com
tags:
- description: OAuth2
  name: OAuth2
- description: Collection of APIs that allow you to configure OneLogin as an Authorization
    server
  name: API Authorization Server
- description: Access and Authorization Scopes
  name: "API Auth: Scopes"
- description: Regarding Token Claims
  name: "API Auth: Claims"
- name: "API Auth: Client Apps"
- description: App Management Endpoint
  name: Apps
- description: Application Rule policy creation and enforcement
  name: App Rules
- description: General Branding Service Endpoints
  name: Branding Service
- description: Branding Service Endpoints for custom templates
  name: "Branding Service: Templates"
- description: Branding Service Endpoints for SMTP
  name: "Branding Service: SMTP"
- description: "Event Types, IDs, tracking, tracing, and more"
  name: Events
- description: Group Management Endpoint
  name: Groups
- description: Invite Via Email Link
  name: Invite Links
- description: "Multi Factor Authentication (MFA), One Time Passcodes (OTP)"
  name: Multi Factor Authentication
- description: "Deprecated Multi Factor Authentication (MFA), One Time Passcodes (OTP)"
  name: Multi Factor Authentication V1
- description: Privilege Management Endpoint
  name: Privileges
- description: Role Management Endpoint
  name: Roles
- description: Dealing with SAML Authentication protocol
  name: SAML Assertions
- description: User Management Endpoint Version 1
  name: Users V1
- description: User Management Endpoint Version 2
  name: Users V2
- description: User Mappings Management Endpoint
  name: User Mappings
- description: Risk service Endpoint
  name: Vigilance AI
- description: Smart Hook extensions
  name: Smart Hooks
paths:
  /auth/oauth2/v2/token:
    post:
      description: Generate Token
      operationId: generateToken
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              grant_type: client_credentials
            schema:
              $ref: '#/components/schemas/generateToken_request'
        description: Request Body to Generate OAuth Token
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oauth_token'
          description: Successful Response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - basicAuth: []
      summary: Generate Token
      tags:
      - OAuth2
  /auth/oauth2/revoke:
    post:
      description: Revoke Tokens
      operationId: revokeTokens
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/revokeTokens_request'
      responses:
        "200":
          content:
            application/json:
              example:
                error: false
                code: 200
                type: success
                message: sucess
              schema:
                $ref: '#/components/schemas/Error'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - basicAuth: []
      summary: Revoke Tokens
      tags:
      - OAuth2
  /auth/rate_limit:
    get:
      description: Get Rate Limit
      operationId: getRateLimit
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRateLimit_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Read Users
        - Manage users
        - Manage All
        - Read All
      summary: Get Rate Limit
      tags:
      - OAuth2
  /api/2/api_authorizations:
    get:
      description: List Authorization Servers
      operationId: listAuthServers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/auth_server'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List Api Auth Servers
      tags:
      - API Authorization Server
    post:
      description: Create Auth Server
      operationId: createAuthServer
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_server'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth_server'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Create Api Auth Server
      tags:
      - API Authorization Server
  /api/2/api_authorizations/{api_auth_id}:
    delete:
      description: Delete Authentication Server
      operationId: deleteAuthServer
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - explode: false
        in: path
        name: api_auth_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success. The auth server is deleted. No content is returned.
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
        - Read All
      summary: Delete Api Auth Server
      tags:
      - API Authorization Server
    get:
      description: Get Authorization Server
      operationId: getAuthServer
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - explode: false
        in: path
        name: api_auth_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth_server'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Get Api Auth Server
      tags:
      - API Authorization Server
    put:
      description: Update Authorization Server
      operationId: updateAuthServer
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - explode: false
        in: path
        name: api_auth_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_server'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth_server'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Update Api Auth Server
      tags:
      - API Authorization Server
  /api/2/api_authorizations/{api_auth_id}/scopes:
    get:
      description: List Authorization Scopes
      operationId: getScopes
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - explode: false
        in: path
        name: api_auth_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/auth_scope'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Get Api Auth Server Scopes
      tags:
      - "API Auth: Scopes"
    post:
      description: Create API Auth Server Scope
      operationId: createScope
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - explode: false
        in: path
        name: api_auth_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_scope'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth_scope'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Create Api Auth Server Scope
      tags:
      - "API Auth: Scopes"
  /api/2/api_authorizations/{api_auth_id}/scopes/{scope_id}:
    delete:
      description: Delete Scope
      operationId: deleteScope
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - explode: false
        in: path
        name: api_auth_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: scope_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: Success. The scope is deleted. No content is returned.
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Delete Api Auth Server Scope
      tags:
      - "API Auth: Scopes"
    put:
      description: Update Scope
      operationId: updateScope
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - explode: false
        in: path
        name: api_auth_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: scope_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_scope'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth_id'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Update Api Auth Server Scope
      tags:
      - "API Auth: Scopes"
  /api/2/api_authorizations/{api_auth_id}/claims:
    get:
      description: Get Authorization claims
      operationId: getAuthclaims
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - explode: false
        in: path
        name: api_auth_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/token_claim'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Get Api Auth Server claims
      tags:
      - "API Auth: Claims"
    post:
      description: Create Authorization Claim
      operationId: createAuthClaim
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - explode: false
        in: path
        name: api_auth_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_claim'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Create Api Auth Server Claim
      tags:
      - "API Auth: Claims"
  /api/2/api_authorizations/{api_auth_id}/claims/{claim_id}:
    delete:
      description: Delete Authorization Claim
      operationId: deleteAuthClaim
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - explode: false
        in: path
        name: api_auth_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: claim_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: Success. The claim is deleted. No content is returned.
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Delete Api Auth Server Claim
      tags:
      - "API Auth: Claims"
    put:
      description: Update Authorization Server Claim
      operationId: updateClaim
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - explode: false
        in: path
        name: api_auth_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: claim_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_claim'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth_id'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Update Api Auth Server Claim
      tags:
      - "API Auth: Claims"
  /api/2/api_authorizations/{api_auth_id}/clients:
    get:
      description: List Client Apps
      operationId: listClientApps
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - explode: false
        in: path
        name: api_auth_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client_app_full'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: List Clients Apps
      tags:
      - "API Auth: Client Apps"
    post:
      description: Add Client App
      operationId: addClientApp
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - explode: false
        in: path
        name: api_auth_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addClientApp_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addClientApp_201_response'
          description: Created
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Add Client App
      tags:
      - "API Auth: Client Apps"
  /api/2/api_authorizations/{api_auth_id}/clients/{client_app_id}:
    delete:
      description: Delete Client App
      operationId: deleteClientApp
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - explode: false
        in: path
        name: api_auth_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client_app_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addClientApp_201_response'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Remove Client App
      tags:
      - "API Auth: Client Apps"
    put:
      description: Update Client App
      operationId: updateClientApp
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - explode: false
        in: path
        name: api_auth_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: client_app_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateClientApp_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addClientApp_201_response'
          description: Successful Response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Update Client App
      tags:
      - "API Auth: Client Apps"
  /api/1/events:
    get:
      description: Get Events
      operationId: getEvents
      parameters:
      - explode: true
        in: query
        name: event_type_id
        required: false
        schema:
          items:
            type: integer
          type: array
        style: form
      - explode: true
        in: query
        name: client_id
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: directory_id
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: id
        required: false
        schema:
          $ref: '#/components/schemas/id'
        style: form
      - explode: true
        in: query
        name: created_at
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: resolution
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: since
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: until
        required: false
        schema:
          type: string
        style: form
      - description: Set to the id of the user that you want to return.
        explode: true
        in: query
        name: user_id
        required: false
        schema:
          $ref: '#/components/schemas/id'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEvents_200_response'
          description: OK
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Read Users
        - Manage users
        - Manage All
        - Read All
      summary: Get Events
      tags:
      - Events
  /api/1/events/{event_id}:
    get:
      description: Get Event By ID
      operationId: getEventById
      parameters:
      - explode: false
        in: path
        name: event_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEventById_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Read Users
        - Manage users
        - Manage All
        - Read All
      summary: Get Event by ID
      tags:
      - Events
  /api/1/events/types:
    get:
      description: Get Event types
      operationId: getEventTypes
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEventTypes_200_response'
          description: Successful response
      summary: Get Event Types
      tags:
      - Events
  /api/1/groups:
    get:
      description: Get Groups
      operationId: getGroups
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroups_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage users
        - Manage All
        - Read All
        - Read Users
      summary: Get Groups
      tags:
      - Groups
  /api/1/groups/{group_id}:
    get:
      description: Get Group By ID
      operationId: getGroupById
      parameters:
      - explode: false
        in: path
        name: group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroups_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Read Users
        - Manage users
        - Manage All
        - Read All
      summary: Get Group by ID
      tags:
      - Groups
  /api/1/invites/get_invite_link:
    post:
      description: Generate Invite Link
      operationId: getInviteLink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getInviteLink_request'
      responses:
        "200":
          content:
            application/json:
              example:
                status:
                  type: success
                  message: success
                  code: 200
                  error: false
                data:
                - http://app.onelogin.com/password/reset?token=1111111cf892e56957e35c9c12f128483031dd11
              schema:
                $ref: '#/components/schemas/getInviteLink_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Generate Invite Link
      tags:
      - Invite Links
  /api/1/invites/send_invite_link:
    post:
      description: Send Invite Link
      operationId: sendInviteLink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendInviteLink_request'
      responses:
        "200":
          content:
            application/json:
              example:
                status:
                  type: success
                  message: Email sent successfully to jennifer.hasenfus@mail.com
                  code: 200
                  error: false
              schema:
                $ref: '#/components/schemas/sendInviteLink_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Send  Invite Link
      tags:
      - Invite Links
  /api/1/users:
    get:
      description: List Users
      operationId: listUsers
      parameters:
      - description: How many items to return at one time (max 100)
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The page number of results to return.
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: An ISO8601 timestamp value that returns all users created after
          a given date & time.
        explode: true
        in: query
        name: created_since
        required: false
        schema:
          type: string
        style: form
      - description: An ISO8601 timestamp value that returns all users created before
          a given date & time.
        explode: true
        in: query
        name: created_until
        required: false
        schema:
          type: string
        style: form
      - description: An ISO8601 timestamp value that returns all users updated after
          a given date & time.
        explode: true
        in: query
        name: updated_since
        required: false
        schema:
          type: string
        style: form
      - description: An ISO8601 timestamp value that returns all users updated before
          a given date & time.
        explode: true
        in: query
        name: updated_until
        required: false
        schema:
          type: string
        style: form
      - description: An ISO8601 timestamp value that returns all users that logged
          in after a given date & time.
        explode: true
        in: query
        name: last_login_since
        required: false
        schema:
          type: string
        style: form
      - description: An ISO8601 timestamp value that returns all users that logged
          in before a given date & time.
        explode: true
        in: query
        name: last_login_until
        required: false
        schema:
          type: string
        style: form
      - description: The first name of the user
        explode: true
        in: query
        name: firstname
        required: false
        schema:
          type: string
        style: form
      - description: The last name of the user
        explode: true
        in: query
        name: lastname
        required: false
        schema:
          type: string
        style: form
      - description: The email address of the user
        explode: true
        in: query
        name: email
        required: false
        schema:
          type: string
        style: form
      - description: The username for the user
        explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      - description: The AD login name for the user
        explode: true
        in: query
        name: samaccountname
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: directory_id
        required: false
        schema:
          type: integer
        style: form
      - description: An external identifier that has been set on the user
        explode: true
        in: query
        name: external_id
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of OneLogin User IDs
        explode: true
        in: query
        name: user_ids
        required: false
        schema:
          type: string
        style: form
      - description: The short name of a custom attribute. Note that the attribute
          name is prefixed with custom_attributes.
        explode: true
        in: query
        name: "custom_attributes.{attribute_name}"
        required: false
        schema:
          type: string
        style: form
      - description: Optional. Comma delimited list of fields to return.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          enum:
          - apps
          - users
          - admins
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/user'
                type: array
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                error: true
                code: 422
                type: UnprocessableEntityError
                message: "Validation failed: Value has already been taken"
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable
      security:
      - OAuth2:
        - Manage users
        - Manage All
        - Read All
        - Read Users
      summary: List Users
      tags:
      - Users V1
    post:
      description: Create a User
      operationId: createUser
      parameters:
      - description: Controls how mappings will be applied to the user on creation.
          Defaults to async.
        explode: true
        in: query
        name: mappings
        required: false
        schema:
          enum:
          - async
          - sync
          - disabled
          type: string
        style: form
      - description: Will passwords validate against the User Policy? Defaults to
          true.
        explode: true
        in: query
        name: validate_policy
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
          description: The full user resource is returned
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                error: true
                code: 422
                type: UnprocessableEntityError
                message: "Validation failed: Value has already been taken"
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable
      security:
      - OAuth2:
        - Manage users
        - Manage All
      summary: Create a User
      tags:
      - Users V1
  /api/1/users/{user_id}:
    delete:
      description: Delete A User
      operationId: deleteUser
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      responses:
        "204":
          description: "On success, no content is returned in the response body."
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage users
        - Manage All
      summary: Delete a User
      tags:
      - Users V1
    get:
      description: Get User By ID
      operationId: getUserById
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
          description: OK
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage users
        - Manage All
        - Read All
        - Read Users
      summary: Get User by ID
      tags:
      - Users V1
    put:
      description: Update a User
      operationId: updateUser
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      - description: Controls how mappings will be applied to the user on creation.
          Defaults to async.
        explode: true
        in: query
        name: mappings
        required: false
        schema:
          enum:
          - async
          - sync
          - disabled
          type: string
        style: form
      - description: Will passwords validate against the User Policy? Defaults to
          true.
        explode: true
        in: query
        name: validate_policy
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
          description: The full user resource is returned
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              example:
                error: true
                code: 422
                type: UnprocessableEntityError
                message: "Validation failed: Value has already been taken"
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable
      security:
      - OAuth2:
        - Manage users
        - Manage All
      summary: Update a User
      tags:
      - Users V1
  /api/1/users/{user_id}/apps:
    get:
      description: Get Apps for User
      operationId: getUserApps
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      - description: Defaults to `false`. When `true` will show all apps that are
          assigned to a user regardless of their portal visibility setting.
        explode: true
        in: query
        name: ignore_visibility
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/getUserApps_200_response_inner'
                type: array
          description: OK
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage users
        - Manage All
        - Read All
        - Read Users
      summary: Get Apps for a User
      tags:
      - Users V1
  /api/1/users/{user_id}/roles:
    get:
      description: Get User Roles
      operationId: getUserRoles
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserRoles_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error: true
                code: 403
                type: ForbiddenError
                message: not allowed
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
        - Read All
      summary: Get Roles for a User
      tags:
      - Users V1
  /api/1/users/set_password_clear_text/{user_id}:
    put:
      description: Update User password using their ID. This is done in cleartext
        and is insecure.
      operationId: updatePasswordInsecure
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatePasswordInsecure_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error: true
                code: 403
                type: ForbiddenError
                message: not allowed
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Set Password Using ID in Cleartext
      tags:
      - Users V1
  /api/1/users/set_password_using_salt/{user_id}:
    put:
      description: Update User Password Using ID and SHA-256 with salt.
      operationId: updatePasswordSecure
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatePasswordSecure_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error: true
                code: 403
                type: ForbiddenError
                message: not allowed
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Set Password Using ID and SHA-256 and Salt
      tags:
      - Users V1
  /api/1/users/custom_attributes:
    get:
      description: Get Custom Attributes
      operationId: getCustomAttributes
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCustomAttributes_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage users
        - Manage All
        - Read All
        - Read Users
      summary: Get Custom Attributes
      tags:
      - Users V1
  /api/1/users/{user_id}/auth_factor:
    get:
      description: Get MFA Factors
      operationId: getMFAFactors
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMFAFactors_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage users
        - Manage All
        - Read All
        - Read Users
      summary: Get Available Factors
      tags:
      - Multi Factor Authentication V1
  /api/1/users/{user_id}/logout:
    put:
      description: Log Out User
      operationId: logOutUser
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error: true
                code: 403
                type: ForbiddenError
                message: not allowed
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage users
        - Manage All
        - Authentication Only
      summary: Log User Out
      tags:
      - Users V1
  /api/1/users/{user_id}/lock_user:
    put:
      description: Lock User Account
      operationId: lockAccountUser
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lockAccountUser_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error: true
                code: 403
                type: ForbiddenError
                message: not allowed
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Lock User Account
      tags:
      - Users V1
  /api/1/users/{user_id}/otp_devices:
    get:
      description: Get Enrolled Factors
      operationId: getEnrolledFactors
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEnrolledFactors_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage users
        - Manage All
        - Read All
        - Read Users
      summary: Get Enrolled Factors
      tags:
      - Multi Factor Authentication V1
    post:
      description: ' Enroll an Authentication Factor'
      operationId: enrollMfaFactor
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/otp_device'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/enrollMfaFactor_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage users
        - Manage All
      summary: Enroll a Factor
      tags:
      - Multi Factor Authentication V1
  /api/1/users/{user_id}/mfa_token:
    post:
      description: Generate MFA Token
      operationId: generateMFAtoken
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/generateMFAtoken_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateMFAtoken_200_response'
          description: Successful response
      security:
      - OAuth2:
        - Manage users
        - Manage All
      summary: Generate Temp MFA Token
      tags:
      - Multi Factor Authentication V1
  /api/1/users/{user_id}/add_roles:
    put:
      description: Add Roles for a User
      operationId: addRolesToUser
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addRolesToUser_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error: true
                code: 403
                type: ForbiddenError
                message: not allowed
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage users
      summary: Add Roles for a User
      tags:
      - Users V1
  /api/1/users/{user_id}/set_state:
    put:
      description: Set User State
      operationId: setUserState
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setUserState_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error: true
                code: 403
                type: ForbiddenError
                message: not allowed
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Set User State
      tags:
      - Users V1
  /api/1/users/{user_id}/remove_roles:
    put:
      description: Remove Roles for a User
      operationId: removeUserRole
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/removeUserRole_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error: true
                code: 403
                type: ForbiddenError
                message: not allowed
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Remove Roles for a User
      tags:
      - Users V1
  /api/1/users/{user_id}/otp_devices/{device_id}:
    delete:
      description: Remove an enrolled MFA device for a user
      operationId: removeMfaFactors
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      - explode: false
        in: path
        name: device_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage users
        - Manage All
      summary: Remove an Enrolled Factor
      tags:
      - Multi Factor Authentication V1
  /api/1/users/{user_id}/otp_devices/{device_id}/verify:
    post:
      description: Verify a Factor
      operationId: verifyMfaFactor
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      - explode: false
        in: path
        name: device_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/verifyMfaFactor_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage users
        - Manage All
      summary: Verify a Factor
      tags:
      - Multi Factor Authentication V1
  /api/1/users/{user_id}/otp_devices/{device_id}/trigger:
    post:
      description: Activate a Factor
      operationId: activateMfaFactors
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      - explode: false
        in: path
        name: device_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/activateMfaFactors_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEnrolledFactors_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage users
        - Manage All
      summary: Activate a Factor
      tags:
      - Multi Factor Authentication V1
  /api/1/privileges:
    get:
      description: List Privileges
      operationId: listPriveleges
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/privilege'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List Privileges
      tags:
      - Privileges
    post:
      description: Create privilege
      operationId: createPrivilege
      requestBody:
        content:
          application/json:
            example:
              name: User Helpdesk
              description: Can administer helpdesk users
              privilege:
                Version: 2018-05-18
                Statement:
                - Effect: Allow
                  Action:
                  - Users:List
                  - Users:Get
                  - Users:Unlock
                  - Users:ResetPassword
                  - Users:GenerateTempMfaToken
                  Scope:
                  - '*'
            schema:
              $ref: '#/components/schemas/privilege'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPrivilege_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                statusCode: 400
                name: BadRequestError
                message: "The request could not be understood by the server due to\
                  \ malformed syntax: Statement required Action array"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Create a Privilege
      tags:
      - Privileges
  /api/1/privileges/{privilege_id}:
    delete:
      description: Delete
      operationId: deletePrivilege
      parameters:
      - explode: false
        in: path
        name: privilege_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Delete a Privilege
      tags:
      - Privileges
    get:
      description: Get a Privilige
      operationId: getPrivilege
      parameters:
      - explode: false
        in: path
        name: privilege_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privilege'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Get a Privilege
      tags:
      - Privileges
    put:
      description: Update privilege
      operationId: updatePrivilege
      parameters:
      - explode: false
        in: path
        name: privilege_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              name: User Administrator
              description: Can administer users
              privilege:
                Version: 2018-05-18
                Statement:
                - Effect: Allow
                  Action:
                  - Users:List
                  - Users:Get
                  - Users:Unlock
                  - Users:ResetPassword
                  - Users:GenerateTempMfaToken
                  Scope:
                  - '*'
            schema:
              $ref: '#/components/schemas/privilege'
      responses:
        "200":
          content:
            application/json:
              example:
                id: 5e43a548-e9c6-47be-9341-92160902f7a6
              schema:
                $ref: '#/components/schemas/updatePrivilege_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                statusCode: 400
                name: BadRequestError
                message: "The request could not be understood by the server due to\
                  \ malformed syntax: Statement required Action array"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Update a Privilege
      tags:
      - Privileges
  /api/1/privileges/{privilege_id}/roles:
    get:
      description: List roles for privilege
      operationId: listPrivelegeRoles
      parameters:
      - explode: false
        in: path
        name: privilege_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listPrivelegeRoles_200_response'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Get Roles assigned to Privilege
      tags:
      - Privileges
    post:
      description: 'Add roles to privilege '
      operationId: addPrivilegeToRole
      parameters:
      - explode: false
        in: path
        name: privilege_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addPrivilegeToRole_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addPrivilegeToRole_201_response'
          description: Created
        "400":
          content:
            application/json:
              example:
                statusCode: 400
                name: BadRequestError
                message: "The request could not be understood by the server due to\
                  \ malformed syntax: Statement required Action array"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Assign a Privilege to Roles
      tags:
      - Privileges
  /api/1/privileges/{privilege_id}/roles/{role_id}:
    delete:
      description: Add roles to privilege
      operationId: deleteRoleFromPrivilege
      parameters:
      - explode: false
        in: path
        name: privilege_id
        required: true
        schema:
          type: string
        style: simple
      - description: Set to the id of the role you want to return.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Remove a Privilege from a Role
      tags:
      - Privileges
  /api/1/privileges/{privilege_id}/users:
    get:
      description: Get Assigned Users
      operationId: getAssignedUser
      parameters:
      - explode: false
        in: path
        name: privilege_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAssignedUser_200_response'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Get Users assigned to a Privilege
      tags:
      - Privileges
    post:
      description: Assign Users to Privilege
      operationId: assignUsersToPrivilege
      parameters:
      - explode: false
        in: path
        name: privilege_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assignUsersToPrivilege_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addPrivilegeToRole_201_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                statusCode: 400
                name: BadRequestError
                message: "The request could not be understood by the server due to\
                  \ malformed syntax: Statement required Action array"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Assign Users to a Privilege
      tags:
      - Privileges
  /api/1/privileges/{privilege_id}/users/{user_id}:
    delete:
      description: Remove a Privilege from Users
      operationId: removeUserFromPrivilege
      parameters:
      - explode: false
        in: path
        name: privilege_id
        required: true
        schema:
          type: string
        style: simple
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Remove a Privilege from Users
      tags:
      - Privileges
  /api/1/roles:
    get:
      description: Get Role by Name
      operationId: getRoleByName
      parameters:
      - explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRoleByName_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage users
        - Manage All
        - Read All
        - Read Users
      summary: Get Role by Name
      tags:
      - Roles
  /api/1/roles/{role_id}:
    get:
      description: Get Role By ID
      operationId: getRoleById
      parameters:
      - description: Set to the id of the role you want to return.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRoleById_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error: true
                code: 403
                type: ForbiddenError
                message: not allowed
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage users
        - Manage All
        - Read All
        - Read Users
      summary: Get Role by ID
      tags:
      - Roles
  /api/1/saml_assertion:
    post:
      description: Generate SAML Assertion
      operationId: generateSamlAssert
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saml_assert'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateSamlAssert_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Authentication Only
        - Manage users
        - Manage All
      summary: Generate SAML Assertion
      tags:
      - SAML Assertions
  /api/1/saml_assertion/verify_factor:
    post:
      description: "Verify Factor: SAML"
      operationId: verFactorSaml
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saml_factor'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verFactorSaml_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Authentication Only
        - Manage users
        - Manage All
      summary: Verify Factor SAML
      tags:
      - SAML Assertions
  /api/2/saml_assertion:
    post:
      description: Generate SAML Assertion
      operationId: generateSamlAssert2
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saml_assert'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateSamlAssert_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Authentication Only
        - Manage users
        - Manage All
      summary: Generate SAML Assertion
      tags:
      - SAML Assertions
  /api/2/saml_assertion/verify_factor:
    post:
      description: "Verify Factor: SAML"
      operationId: verFactorSaml2
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saml_factor'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verFactorSaml_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Authentication Only
        - Manage users
        - Manage All
      summary: Verify Factor SAML
      tags:
      - SAML Assertions
  /api/2/mappings:
    get:
      description: List Mappings
      operationId: listMappings
      parameters:
      - description: Defaults to true. When set to `false` will return all disabled
          mappings.
        explode: true
        in: query
        name: enabled
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |-
          Filters Rules based on their Conditions. Values formatted as :, where name is the Condition to look for, and value is the value to find. Multiple filters can be declared by using a comma delimited list. Wildcards are supported in both the name and value fields.
          For example:
          Single filter. has_condition=has_role:123456
          Multiple filters. has_condition=has_role:123456,status:1
          Wildcard for conditions. has_condition=*:123456
          Wildcard for condition values. has_condition=has_role:*
        example: has_condition=has_role:123456
        explode: true
        in: query
        name: has_condition
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filters Rules based on their Conditions. Values formatted as :, where name is the Condition to look for, and value is the value to find. Multiple filters can be declared by using a comma delimited list. Wildcards are supported in both the name and value fields.
          For example:
          Single filter. has_condition=has_role:123456
          Multiple filters. has_condition=has_role:123456,status:1
          Wildcard for conditions. has_condition=*:123456
          Wildcard for condition values. has_condition=has_role:*
        explode: true
        in: query
        name: has_condition_type
        required: false
        schema:
          enum:
          - builtin
          - custom
          - none
          type: string
        style: form
      - description: |-
          Filters Rules based on their Actions. Values formatted as :, where name is the Action to look for, and value is the value to find. Multiple filters can be declared by using a comma delimited list. Wildcards are supported in both the name and value fields.
          For example:
          Single filter. has_action=set_licenses:123456
          Multiple filters. has_action=set_groups:123456,set_usertype:*
          Wildcard for actions. has_action=*:123456
          Wildcard for action values. has_action=set_userprincipalname:*
        example: "has_action=set_groups:123456,set_usertype:*"
        explode: true
        in: query
        name: has_action
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filters Rules based on their action types.
          Allowed values are:
          builtin - actions that involve standard attributes custom - actions that involve custom attributes none - no actions are defined For example:
          Find Rules with no actions has_action_type=none
        explode: true
        in: query
        name: has_action_type
        required: false
        schema:
          enum:
          - builtin
          - custom
          - none
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/mapping'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List Mappings
      tags:
      - User Mappings
    post:
      description: Create Mapping
      operationId: createMapping
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mapping'
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/mapping'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                error: true
                code: 422
                type: UnprocessableEntityError
                message: "Validation failed: Value has already been taken"
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable
      security:
      - OAuth2:
        - Manage All
      summary: Create Mapping
      tags:
      - User Mappings
  /api/2/mappings/{mapping_id}:
    delete:
      description: Delete Mapping
      operationId: deleteMapping
      parameters:
      - description: The id of the user mapping to locate.
        explode: false
        in: path
        name: mapping_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Delete Mapping
      tags:
      - User Mappings
    get:
      description: Get Mapping
      operationId: getMapping
      parameters:
      - description: The id of the user mapping to locate.
        explode: false
        in: path
        name: mapping_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mapping'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Get Mapping
      tags:
      - User Mappings
    put:
      description: Update Mapping
      operationId: updateMapping
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - description: The id of the user mapping to locate.
        explode: false
        in: path
        name: mapping_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              example:
                $ref: '#/components/schemas/mapping'
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                error: true
                code: 422
                type: UnprocessableEntityError
                message: "Validation failed: Value has already been taken"
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable
      security:
      - OAuth2:
        - Manage All
      summary: Update Mapping
      tags:
      - User Mappings
  /api/2/mappings/conditions:
    get:
      description: List Mappings' Conditions
      operationId: listMappingConditions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listMappingConditions_200_response'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List Conditions
      tags:
      - User Mappings
  /api/2/mappings/conditions/{mapping_condition_value}/operators:
    get:
      description: List Mappings' Conditions' Operators
      operationId: listMappingConditionsOperators
      parameters:
      - explode: false
        in: path
        name: mapping_condition_value
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listMappingConditionsOperators_200_response_inner'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List Conditions Operators
      tags:
      - User Mappings
  /api/2/mappings/conditions/{mapping_condition_value}/values:
    get:
      description: List Mappings'  Conditions' Values
      operationId: listMappingContionValues
      parameters:
      - explode: false
        in: path
        name: mapping_condition_value
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listMappingContionValues_200_response_inner'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List Conditions Values
      tags:
      - User Mappings
  /api/2/mappings/actions:
    get:
      description: List Mappings' Actions
      operationId: listMappingsActions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listMappingsActions_200_response_inner'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List Actions
      tags:
      - User Mappings
  /api/2/mappings/actions/{mapping_action_value}/values:
    get:
      description: List Mappings' Actions' Values
      operationId: listMappingActionValues
      parameters:
      - explode: false
        in: path
        name: mapping_action_value
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listMappingActionValues_200_response_inner'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List Actions Values
      tags:
      - User Mappings
  /api/2/mappings/sort:
    put:
      description: Bulk Sort Mappings
      operationId: sortMappings
      requestBody:
        content:
          application/json:
            schema:
              example:
              - 196671
              - 196670
              - 196672
              - 196676
              - 197758
              items:
                type: integer
              type: array
      responses:
        "200":
          content:
            application/json:
              example:
              - 197758
              - 196670
              - 196671
              - 196672
              - 196676
              schema:
                items:
                  type: integer
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                error: true
                code: 422
                type: UnprocessableEntityError
                message: "Validation failed: Value has already been taken"
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable
      security:
      - OAuth2:
        - Manage All
      summary: Bulk Sort
      tags:
      - User Mappings
  /api/2/apps:
    get:
      description: List Apps
      operationId: listApps
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/generic-app'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
        - Read All
      summary: List Apps
      tags:
      - Apps
    post:
      description: Create App
      operationId: createApp
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createApp_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createApp_200_response'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                error: true
                code: 422
                type: UnprocessableEntityError
                message: "Validation failed: Value has already been taken"
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable
      security:
      - OAuth2:
        - Manage All
      summary: Create App
      tags:
      - Apps
  /api/2/apps/{app_id}:
    delete:
      description: Delete App
      operationId: deleteApp
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
        - Read All
      summary: Delete App
      tags:
      - Apps
    get:
      description: Get App
      operationId: getApp
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generic-app'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
        - Read All
      summary: Get App
      tags:
      - Apps
    put:
      description: Update App
      operationId: updateApp
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/generic-app'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generic-app'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Update App
      tags:
      - Apps
  /api/2/apps/{app_id}/parameters/{parameter_id}:
    delete:
      description: Delete Parameter from App
      operationId: deleteAppParameter
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: path
        name: parameter_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                statusCode: 403
                name: ForbiddenError
                message: Not allowed to destroy specified resource
              schema:
                $ref: '#/components/schemas/altErr'
          description: Forbidden
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
        - Read All
      summary: Delete Parameter from App
      tags:
      - Apps
  /api/2/apps/{app_id}/users:
    get:
      description: Get App Users
      operationId: getAppUsers
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/user'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
        - Read All
      summary: Get App Users
      tags:
      - Apps
  /api/2/apps/{app_id}/rules:
    get:
      description: List App Rules
      operationId: listAppRules
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |-
          Filters Rules based on their Conditions. Values formatted as :, where name is the Condition to look for, and value is the value to find. Multiple filters can be declared by using a comma delimited list. Wildcards are supported in both the name and value fields.
          For example:
          Single filter. has_condition=has_role:123456
          Multiple filters. has_condition=has_role:123456,status:1
          Wildcard for conditions. has_condition=*:123456
          Wildcard for condition values. has_condition=has_role:*
        example: has_condition=has_role:123456
        explode: true
        in: query
        name: has_condition
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filters Rules based on their Conditions. Values formatted as :, where name is the Condition to look for, and value is the value to find. Multiple filters can be declared by using a comma delimited list. Wildcards are supported in both the name and value fields.
          For example:
          Single filter. has_condition=has_role:123456
          Multiple filters. has_condition=has_role:123456,status:1
          Wildcard for conditions. has_condition=*:123456
          Wildcard for condition values. has_condition=has_role:*
        explode: true
        in: query
        name: has_condition_type
        required: false
        schema:
          enum:
          - builtin
          - custom
          - none
          type: string
        style: form
      - description: |-
          Filters Rules based on their Actions. Values formatted as :, where name is the Action to look for, and value is the value to find. Multiple filters can be declared by using a comma delimited list. Wildcards are supported in both the name and value fields.
          For example:
          Single filter. has_action=set_licenses:123456
          Multiple filters. has_action=set_groups:123456,set_usertype:*
          Wildcard for actions. has_action=*:123456
          Wildcard for action values. has_action=set_userprincipalname:*
        example: "has_action=set_groups:123456,set_usertype:*"
        explode: true
        in: query
        name: has_action
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filters Rules based on their action types.
          Allowed values are:
          builtin - actions that involve standard attributes custom - actions that involve custom attributes none - no actions are defined For example:
          Find Rules with no actions has_action_type=none
        explode: true
        in: query
        name: has_action_type
        required: false
        schema:
          enum:
          - builtin
          - custom
          - none
          type: string
        style: form
      - description: Defaults to true. When set to `false` will return all disabled
          mappings.
        explode: true
        in: query
        name: enabled
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/app_rule'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List Rules
      tags:
      - App Rules
    post:
      description: Create App Rule
      operationId: createAppRule
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app_rule'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app_rule'
          description: CREATED
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      tags:
      - App Rules
  /api/2/apps/{app_id}/rules/{rule_id}:
    delete:
      description: Delete App Rule
      operationId: deleteRule
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: path
        name: rule_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success. The rule is deleted. No content is returned.
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Delete Rule
      tags:
      - App Rules
    get:
      description: Get App Rule
      operationId: getAppRule
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: path
        name: rule_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app_rule'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Get Rule
      tags:
      - App Rules
    put:
      description: Update App Rule.
      operationId: updateAppRule
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: path
        name: rule_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app_rule'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app_rule'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Update Rule
      tags:
      - App Rules
  /api/2/apps/{app_id}/rules/conditions:
    get:
      description: List App Conditions
      operationId: listConditions
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listConditions_200_response_inner'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List Conditions
      tags:
      - App Rules
  /api/2/apps/{app_id}/rules/conditions/{rule_condition_value}/operators:
    get:
      description: List Condition Operators
      operationId: listConditionOperators
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: path
        name: rule_condition_value
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/rule_condition'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List Conditions Operators
      tags:
      - App Rules
  /api/2/apps/{app_id}/rules/conditions/{rule_condition_value}/values:
    get:
      description: List Condition Values
      operationId: listConditionValues
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: path
        name: rule_condition_value
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rule_condition'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List Conditions Values
      tags:
      - App Rules
  /api/2/apps/{app_id}/rules/actions:
    get:
      description: List Actions
      operationId: listActions
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/rule_action'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List Actions
      tags:
      - App Rules
  /api/2/apps/{app_id}/rules/actions/{rule_action_value}/values:
    get:
      description: Sort App rules
      operationId: listActionValies
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: path
        name: rule_action_value
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/rule_action'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List Actions Values
      tags:
      - App Rules
  /api/2/apps/{app_id}/rules/sort:
    put:
      description: Sort App rules
      operationId: sortAppRules
      parameters:
      - explode: false
        in: path
        name: app_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              example:
              - 196671
              - 196670
              - 196672
              - 196676
              - 197758
              items:
                type: integer
              type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - 196671
                - 196670
                - 196672
                - 196676
                - 197758
                items:
                  type: integer
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Bulk Sort
      tags:
      - App Rules
  /api/2/connectors:
    get:
      description: List Connectors
      operationId: listConnectors
      parameters:
      - explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connector'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: List Connectors
      tags:
      - Apps
  /api/2/risk/rules:
    get:
      description: List Vigilance AI (Risk Service) Rules
      operationId: listRiskRules
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/risk_rule'
                type: array
          description: OK
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
        - Read All
      summary: List Rules
      tags:
      - Vigilance AI
    post:
      description: Create Vigilance AI (Risk Service) Rule
      operationId: createRiskRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/risk_rule'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/risk_rule'
          description: CREATED
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Create Rule
      tags:
      - Vigilance AI
  /api/2/risk/rules/{rule_id}:
    delete:
      description: Delete Vigilance AI (Risk Service)
      operationId: deleteRiskRule
      parameters:
      - explode: false
        in: path
        name: rule_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Successful response
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
        - Read All
      summary: Delete Rule
      tags:
      - Vigilance AI
    get:
      description: Use this API to return a single rule that has been created in the
        Risk Sevice.
      operationId: getRiskRule
      parameters:
      - explode: false
        in: path
        name: rule_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/risk_rule'
          description: Successful Response
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
        - Read All
      summary: get Risk Rule
      tags:
      - Vigilance AI
    put:
      description: Update Vigilance AI (Risk Service) Rule
      operationId: updateRiskRule
      parameters:
      - explode: false
        in: path
        name: rule_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateRiskRule_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/risk_rule'
          description: Successful Response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
        - Read All
      summary: Update Rule
      tags:
      - Vigilance AI
  /api/2/risk/events:
    post:
      description: Track Vigilance AI (Risk Service) Event
      operationId: trackRiskEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/trackRiskEvent_request'
        required: true
      responses:
        "200":
          description: No content is returned. This API is fire and forget.
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Authentication Only
        - Read Users
        - Manage users
        - Manage All
        - Read All
      summary: Track an Event
      tags:
      - Vigilance AI
  /api/2/risk/scores:
    get:
      description: Get Vigilance AI (Risk Service) Score Summary
      operationId: getRiskScores
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRiskScores_200_response'
          description: OK
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
        - Read All
      summary: Get Score Summary
      tags:
      - Vigilance AI
  /api/2/risk/verify:
    post:
      description: Get Vigilance AI (Risk Service) Score
      operationId: getRiskScore
      parameters:
      - description: Optional ISO8601 formatted date string. Defaults to current date.
          Maximum date is 90 days ago.
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: Optional ISO8601 formatted date string. Defaults to 30 days ago.
          Maximum date is 90 days ago.
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getRiskScore_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRiskScore_200_response'
          description: Successful response
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      security:
      - OAuth2:
        - Authentication Only
        - Read Users
        - Manage users
        - Manage All
        - Read All
      summary: Get a Risk Score
      tags:
      - Vigilance AI
  /api/2/mfa/users/{user_id}/registrations/{registration_id}:
    get:
      description: Get registration state by id
      operationId: getUserRegistration
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      - description: The id of a registration
        example: <UUID>
        explode: false
        in: path
        name: registration_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                id: ca332b26-0d83-444f-956b-0dbf004a3f03
                status: pending
              schema:
                type: object
          description: OK
          headers:
            Accept-Language:
              explode: false
              schema:
                example: "en-US,en;q=1"
                type: string
              style: simple
            Cache-Control:
              explode: false
              schema:
                example: "no-cache, must-revalidate, no-store"
                type: string
              style: simple
            Content-Length:
              explode: false
              schema:
                example: 64
                type: integer
              style: simple
            Content-Type:
              explode: false
              schema:
                example: application/json
                type: string
              style: simple
            X-Content-Type-Options:
              explode: false
              schema:
                example: nosniff
                type: string
              style: simple
            X-Request-Id:
              explode: false
              schema:
                example: 5F188C46-49E1609A-D47B-0A0B033A-01BB-11459E-43E7
                type: string
              style: simple
            Date:
              explode: false
              schema:
                example: "Wed, 22 Jul 2020 18:58:14 GMT"
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Get User Registration
      tags:
      - Multi Factor Authentication
    put:
      description: Submit an otp for verification.
      operationId: verifyUserRegistration
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      - description: The id of a registration
        example: <UUID>
        explode: false
        in: path
        name: registration_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/verifyUserRegistration_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verifyUserRegistration_200_response'
          description: OK
          headers:
            Accept-Language:
              explode: false
              schema:
                example: "en-US,en;q=1"
                type: string
              style: simple
            Cache-Control:
              explode: false
              schema:
                example: "no-cache, must-revalidate, no-store"
                type: string
              style: simple
            Content-Length:
              explode: false
              schema:
                example: 87
                type: integer
              style: simple
            Content-Type:
              explode: false
              schema:
                example: application/json
                type: string
              style: simple
            X-Content-Type-Options:
              explode: false
              schema:
                example: nosniff
                type: string
              style: simple
            X-Request-Id:
              explode: false
              schema:
                example: 5F188CDE-49E1609A-D480-0A0B0591-01BB-3589-0813
                type: string
              style: simple
            Date:
              explode: false
              schema:
                example: "Wed, 22 Jul 2020 19:00:47 GMT"
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Verify User Registration
      tags:
      - Multi Factor Authentication
  /api/2/mfa/users/{user_id}/registrations:
    post:
      description: Create a new registration process
      operationId: createFactorRegistration
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createFactorRegistration_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createFactorRegistration_201_response'
          description: Created
          headers:
            Accept-Language:
              explode: false
              schema:
                example: "en-US,en;q=1"
                type: string
              style: simple
            Cache-Control:
              explode: false
              schema:
                example: "no-cache, must-revalidate, no-store"
                type: string
              style: simple
            Content-Length:
              explode: false
              schema:
                example: 186
                type: integer
              style: simple
            Content-Type:
              explode: false
              schema:
                example: application/json
                type: string
              style: simple
            X-Content-Type-Options:
              explode: false
              schema:
                example: nosniff
                type: string
              style: simple
            X-Request-Id:
              explode: false
              schema:
                example: 5F188C90-49E1609A-D47D-0A0B03ED-01BB-2869-1581
                type: string
              style: simple
            Date:
              explode: false
              schema:
                example: "Wed, 22 Jul 2020 18:59:30 GMT"
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Create Factor Registration
      tags:
      - Multi Factor Authentication
  /api/2/mfa/users/{user_id}/devices:
    get:
      description: Get a user authentication devices
      operationId: getAuthenticationDevices
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/getAuthenticationDevices_200_response_inner'
                type: array
          description: OK
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Get User Devices
      tags:
      - Multi Factor Authentication
  /api/2/mfa/users/{user_id}/devices/{device_id}:
    delete:
      description: Delete a user\'s authentication device
      operationId: deleteEnrolledFactor
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      - explode: false
        in: path
        name: device_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      security:
      - OAuth2:
        - Manage All
      summary: Delete Enrolled Factor
      tags:
      - Multi Factor Authentication
  /api/2/mfa/users/{user_id}/verifications/{verification_id}:
    get:
      description: Get verification state by id
      operationId: getUserVerification
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      - description: The verification_id is returned on activation of the factor or
          you can get the device_id using the Activate Factor API call.
        example: <UUID>
        explode: false
        in: path
        name: verification_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserVerification_200_response'
          description: OK
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Get User Verification
      tags:
      - Multi Factor Authentication
    put:
      description: Submit an otp for verification.
      operationId: verifyUserVerification
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      - description: The verification_id is returned on activation of the factor or
          you can get the device_id using the Activate Factor API call.
        example: <UUID>
        explode: false
        in: path
        name: verification_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/verifyUserVerification_request'
      responses:
        "200":
          content:
            application/json:
              example:
                type: success
                code: 200
                message: success
                error: false
              schema:
                $ref: '#/components/schemas/Error'
          description: OK
          headers:
            Content-Type:
              explode: false
              schema:
                example: application/json
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                statusCode: 403
                name: ForbiddenError
                message: Not allowed to destroy specified resource
              schema:
                $ref: '#/components/schemas/altErr'
          description: Forbidden
      security:
      - OAuth2:
        - Manage All
      summary: Verify User Verification
      tags:
      - Multi Factor Authentication
  /api/2/mfa/users/{user_id}/verifications:
    post:
      description: Create a new verification process
      operationId: createDeviceVerification
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createDeviceVerification_request'
      responses:
        "201":
          content:
            application/json:
              example:
                id: 5a0ba80a-39a1-4627-9a8b-1273278b34ee
                status: pending
                user_id: 2323
                device_id: 489339
                factor_data:
                  verification_token: <string>
                  totp_url: <string>
              schema:
                $ref: '#/components/schemas/createDeviceVerification_201_response'
          description: Created
          headers:
            Content-Type:
              explode: false
              schema:
                example: application/json
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Create Device Verification
      tags:
      - Multi Factor Authentication
  /api/2/mfa/users/{user_id}/factors:
    get:
      description: Get a user\'s available authentication factors
      operationId: getAuthFactors
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAuthFactors_200_response'
          description: OK
          headers:
            Content-Type:
              explode: false
              schema:
                example: application/json
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Get User Factors
      tags:
      - Multi Factor Authentication
  /api/2/mfa/users/{user_id}/mfa_token:
    post:
      description: Create new MFA token on the user's account
      operationId: generateOTP
      parameters:
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          default: application/json
          type: string
        style: simple
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/generateOTP_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateOTP_201_response'
          description: Created
          headers:
            Content-Type:
              explode: false
              schema:
                example: application/json
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Generate MFA token
      tags:
      - Multi Factor Authentication
  /api/2/roles:
    get:
      description: List Roles
      operationId: listRoles
      parameters:
      - description: How many items to return at one time (max 100)
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The page number of results to return.
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: Optional. Filters by role name.
        explode: true
        in: query
        name: role_name
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: app_id
        required: true
        schema:
          type: integer
        style: form
      - description: Optional. Returns roles that contain this app name.
        explode: true
        in: query
        name: app_name
        required: false
        schema:
          type: string
        style: form
      - description: Optional. Comma delimited list of fields to return.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          enum:
          - apps
          - users
          - admins
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/role'
                type: array
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
        - Read All
        - Read Users
      summary: List Roles
      tags:
      - Roles
    post:
      description: Create Role
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/role'
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/createRole_201_response_inner'
                type: array
          description: CREATED
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Create Role
      tags:
      - Roles
  /api/2/roles/{role_id}:
    delete:
      description: Delete Role
      operationId: deleteRole
      parameters:
      - description: Set to the id of the role you want to return.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: NO CONTENT
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                statusCode: 403
                name: ForbiddenError
                message: Not allowed to destroy specified resource
              schema:
                $ref: '#/components/schemas/altErr'
          description: Forbidden
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Delete Role by ID
      tags:
      - Roles
    get:
      description: Get Role
      operationId: getRole
      parameters:
      - description: Set to the id of the role you want to return.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
          description: OK
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
        - Read All
        - Read Users
      summary: Get Role by ID
      tags:
      - Roles
    put:
      description: Update Role
      operationId: updateRole
      parameters:
      - description: Set to the id of the role you want to return.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/role'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateRole_200_response'
          description: OK
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Update Role
      tags:
      - Roles
  /api/2/roles/{role_id}/apps:
    get:
      description: Get Role Apps
      operationId: getRoleApps
      parameters:
      - description: Set to the id of the role you want to return.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      - description: How many items to return at one time (max 100)
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The page number of results to return.
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: Optional. Defaults to true. Returns all apps not yet assigned
          to the role.
        explode: true
        in: query
        name: assigned
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            applcation/json:
              schema:
                items:
                  $ref: '#/components/schemas/getRoleApps_200_response_inner'
                type: array
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
        - Read All
        - Read Users
      summary: Get all Apps assigned to Role
      tags:
      - Roles
    put:
      description: Set Role Apps
      operationId: setRoleApps
      parameters:
      - description: Set to the id of the role you want to return.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              description: The complete list of app_id values to assign to the role.
                Don't submit a partial list of app IDs.
              items:
                $ref: '#/components/schemas/id'
              type: array
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/createRole_201_response_inner'
                type: array
          description: The response returns an array of app IDs sent in the request.
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Set Role Apps
      tags:
      - Roles
  /api/2/roles/{role_id}/users:
    delete:
      description: Remove Role Users
      operationId: removeRoleUsers
      parameters:
      - description: Set to the id of the role you want to return.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/removeRoleUsers_request'
        required: true
      responses:
        "204":
          description: NO CONTENT
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Remove Role Users
      tags:
      - Roles
    get:
      description: Get Role Users
      operationId: getRoleUsers
      parameters:
      - description: Set to the id of the role you want to return.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      - description: How many items to return at one time (max 100)
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The page number of results to return.
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: "Allows you to filter on first name, last name, username, and\
          \ email address."
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Optional. Defaults to false. Include users that aren’t assigned
          to the role.
        explode: true
        in: query
        name: include_unassigned
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            applcation/json:
              schema:
                example:
                - id: 345
                  name: Joe User
                  username: joe.user@example.com
                  added_by:
                    id: 678
                    name: Susan Boss
                  added_at: 2019-12-27T00:00:00Z
                  assigned: true
                items:
                  $ref: '#/components/schemas/user'
                type: array
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Get Role Users
      tags:
      - Roles
    post:
      description: Add Role Users
      operationId: addRoleUsers
      parameters:
      - description: Set to the id of the role you want to return.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              description: "Set user_id values in array,"
              items:
                $ref: '#/components/schemas/id'
              type: array
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/createRole_201_response_inner'
                type: array
          description: OK
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Add Role Users
      tags:
      - Roles
  /api/2/roles/{role_id}/admins:
    delete:
      description: Remove Role Admins
      operationId: removeRoleAdmins
      parameters:
      - description: Set to the id of the role you want to return.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/removeRoleUsers_request'
        required: true
      responses:
        "204":
          description: NO CONTENT
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Remove Role Admins
      tags:
      - Roles
    get:
      description: Get Role Admins
      operationId: getRoleAdmins
      parameters:
      - description: Set to the id of the role you want to return.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      - description: How many items to return at one time (max 100)
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The page number of results to return.
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: "Allows you to filter on first name, last name, username, and\
          \ email address."
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Optional. Defaults to false. Include users that aren’t assigned
          to the role.
        explode: true
        in: query
        name: include_unassigned
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            applcation/json:
              schema:
                items:
                  $ref: '#/components/schemas/user'
                type: array
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
        - Read All
        - Read Users
      summary: Get Role Admins
      tags:
      - Roles
    post:
      description: Add Role Admins
      operationId: addRoleAdmins
      parameters:
      - description: Set to the id of the role you want to return.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              description: "Set user_id values in array,"
              items:
                $ref: '#/components/schemas/id'
              type: array
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/createRole_201_response_inner'
                type: array
          description: OK
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Add Role Admins
      tags:
      - Roles
  /api/2/hooks:
    get:
      description: List Smart Hooks
      operationId: listHooks
      parameters:
      - description: How many items to return at one time (max 100)
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The page number of results to return.
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/hook'
                type: array
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List all Smart Hooks
      tags:
      - Smart Hooks
    post:
      description: Create Smart Hook
      operationId: createHook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/hook'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hook'
          description: CREATED
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "409":
          content:
            application/json:
              example:
                statusCode: 409
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Conflict
        "422":
          content:
            application/json:
              example:
                name: UnprocessableEntityError
                message: instance additionalProperty \"name\" exists in instance when
                  not allowed
              schema:
                $ref: '#/components/schemas/hook_status'
          description: You function is not base64 encoded.
      security:
      - OAuth2:
        - Manage All
      summary: Create Smart Hook
      tags:
      - Smart Hooks
  /api/2/hooks/{hook_id}:
    delete:
      description: Delete Smart Hook
      operationId: deleteHook
      parameters:
      - description: Set to the id of the Hook that you want to return.
        explode: false
        in: path
        name: hook_id
        required: true
        schema:
          description: The Hook unique ID in OneLogin.
          type: string
        style: simple
      responses:
        "202":
          description: Success. The hook function has been queued for deletion. This
            typically happens within seconds of making the request.
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
        - Read All
      summary: Delete Smart Hook by ID
      tags:
      - Smart Hooks
    get:
      description: Get Smart Hook
      operationId: getHook
      parameters:
      - description: Set to the id of the Hook that you want to return.
        explode: false
        in: path
        name: hook_id
        required: true
        schema:
          description: The Hook unique ID in OneLogin.
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hook'
          description: OK
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Get Smart Hook by ID
      tags:
      - Smart Hooks
    put:
      description: Update Smart Hook
      operationId: updateHook
      parameters:
      - description: Set to the id of the Hook that you want to return.
        explode: false
        in: path
        name: hook_id
        required: true
        schema:
          description: The Hook unique ID in OneLogin.
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/hook'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hook'
          description: OK
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                name: UnprocessableEntityError
                message: instance additionalProperty \"name\" exists in instance when
                  not allowed
              schema:
                $ref: '#/components/schemas/hook_status'
          description: You function is not base64 encoded.
      security:
      - OAuth2:
        - Manage All
      summary: Update Smart Hook by ID
      tags:
      - Smart Hooks
  /api/2/hooks/{hook_id}/logs:
    get:
      description: Get Smart Hook Logs
      operationId: getLogs
      parameters:
      - description: Set to the id of the Hook that you want to return.
        explode: false
        in: path
        name: hook_id
        required: true
        schema:
          description: The Hook unique ID in OneLogin.
          type: string
        style: simple
      - description: How many items to return at one time (max 100)
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The page number of results to return.
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: Returns logs that contain this request_id.
        explode: true
        in: query
        name: request_id
        required: false
        schema:
          type: string
        style: form
      - description: Returns logs that contain this correlation_id.
        explode: true
        in: query
        name: correlation_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/hook_log'
                type: array
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Get Smart Hook Logs
      tags:
      - Smart Hooks
  /api/2/hooks/envs:
    get:
      description: List Environment Variables
      operationId: listEnvironmentVariables
      parameters:
      - description: How many items to return at one time (max 100)
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The page number of results to return.
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/hook_envvar'
                type: array
          description: OK
          headers:
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Page-Items:
              $ref: '#/components/headers/Page-Items'
            Total-Count:
              $ref: '#/components/headers/Total-Count'
            Total-Pages:
              $ref: '#/components/headers/Total-Pages'
            Link:
              $ref: '#/components/headers/Link'
            Before-Cursor:
              $ref: '#/components/headers/Before-Cursor'
            After-Cursor:
              $ref: '#/components/headers/After-Cursor'
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: List Environment Variables
      tags:
      - Smart Hooks
    post:
      description: Create Environment Variable
      operationId: createEnvironmentVariable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/hook_envvar'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hook_envvar'
          description: CREATED
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Create Environment Variable
      tags:
      - Smart Hooks
  /api/2/hooks/envs/{envvar_id}:
    delete:
      description: Delete Environment Variable
      operationId: deleteEnvironmentVariable
      parameters:
      - description: Set to the id of the Hook Environment Variable that you want
          to fetch.
        explode: false
        in: path
        name: envvar_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success. The environment variable has been deleted. No content
            is returned.
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
        - Read All
      summary: Delete Environment Variable
      tags:
      - Smart Hooks
    get:
      description: Get Environment Variable
      operationId: getEnvironmentVariable
      parameters:
      - description: Set to the id of the Hook Environment Variable that you want
          to fetch.
        explode: false
        in: path
        name: envvar_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hook_envvar'
          description: OK
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Get Environment Variable
      tags:
      - Smart Hooks
    put:
      description: Update Environment Variable
      operationId: updateEnvironmentVariable
      parameters:
      - description: Set to the id of the Hook Environment Variable that you want
          to fetch.
        explode: false
        in: path
        name: envvar_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateEnvironmentVariable_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hook_envvar'
          description: OK
        "400":
          content:
            application/json:
              example:
                statusCode: 400
                name: BadRequestError
                message: "The request could not be understood by the server due to\
                  \ malformed syntax: Statement required Action array"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hook_status'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Update Environment Variable
      tags:
      - Smart Hooks
  /api/2/users:
    get:
      description: Get a list of users
      operationId: listUsers2
      parameters:
      - description: How many items to return at one time (max 100)
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The page number of results to return.
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: Set to the value extracted from Before-Cursor or After-Cursor
          headers to return the previous or next page.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: An ISO8601 timestamp value that returns all users created after
          a given date & time.
        explode: true
        in: query
        name: created_since
        required: false
        schema:
          type: string
        style: form
      - description: An ISO8601 timestamp value that returns all users created before
          a given date & time.
        explode: true
        in: query
        name: created_until
        required: false
        schema:
          type: string
        style: form
      - description: An ISO8601 timestamp value that returns all users updated after
          a given date & time.
        explode: true
        in: query
        name: updated_since
        required: false
        schema:
          type: string
        style: form
      - description: An ISO8601 timestamp value that returns all users updated before
          a given date & time.
        explode: true
        in: query
        name: updated_until
        required: false
        schema:
          type: string
        style: form
      - description: An ISO8601 timestamp value that returns all users that logged
          in after a given date & time.
        explode: true
        in: query
        name: last_login_since
        required: false
        schema:
          type: string
        style: form
      - description: An ISO8601 timestamp value that returns all users that logged
          in before a given date & time.
        explode: true
        in: query
        name: last_login_until
        required: false
        schema:
          type: string
        style: form
      - description: The first name of the user
        explode: true
        in: query
        name: firstname
        required: false
        schema:
          type: string
        style: form
      - description: The last name of the user
        explode: true
        in: query
        name: lastname
        required: false
        schema:
          type: string
        style: form
      - description: The email address of the user
        explode: true
        in: query
        name: email
        required: false
        schema:
          type: string
        style: form
      - description: The username for the user
        explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      - description: The AD login name for the user
        explode: true
        in: query
        name: samaccountname
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: directory_id
        required: false
        schema:
          type: integer
        style: form
      - description: An external identifier that has been set on the user
        explode: true
        in: query
        name: external_id
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of OneLogin User IDs
        explode: true
        in: query
        name: user_ids
        required: false
        schema:
          type: string
        style: form
      - description: The short name of a custom attribute. Note that the attribute
          name is prefixed with custom_attributes.
        explode: true
        in: query
        name: "custom_attributes.{attribute_name}"
        required: false
        schema:
          type: string
        style: form
      - description: Optional. Comma delimited list of fields to return.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          enum:
          - apps
          - users
          - admins
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/user'
                type: array
          description: OK
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                error: true
                code: 422
                type: UnprocessableEntityError
                message: "Validation failed: Value has already been taken"
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable
      security:
      - OAuth2:
        - Manage users
        - Manage All
        - Read All
        - Read Users
      summary: List Users
      tags:
      - Users V2
    post:
      description: Create User
      operationId: createUser2
      parameters:
      - description: Controls how mappings will be applied to the user on creation.
          Defaults to async.
        explode: true
        in: query
        name: mappings
        required: false
        schema:
          enum:
          - async
          - sync
          - disabled
          type: string
        style: form
      - description: Will passwords validate against the User Policy? Defaults to
          true.
        explode: true
        in: query
        name: validate_policy
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
          description: The full user resource is returned
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                error: true
                code: 422
                type: UnprocessableEntityError
                message: "Validation failed: Value has already been taken"
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable
      summary: Create User
      tags:
      - Users V2
  /api/2/users/{user_id}:
    delete:
      description: Delete User
      operationId: deleteUser2
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      responses:
        "204":
          description: "On success, no content is returned in the response body."
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage users
        - Manage All
      summary: Delete User
      tags:
      - Users V2
    get:
      description: Get User
      operationId: getUser2
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
          description: OK
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage users
        - Manage All
        - Read All
        - Read Users
      summary: Get User
      tags:
      - Users V2
    put:
      description: Update User
      operationId: updateUser2
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      - description: Controls how mappings will be applied to the user on creation.
          Defaults to async.
        explode: true
        in: query
        name: mappings
        required: false
        schema:
          enum:
          - async
          - sync
          - disabled
          type: string
        style: form
      - description: Will passwords validate against the User Policy? Defaults to
          true.
        explode: true
        in: query
        name: validate_policy
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
          description: The full user resource is returned
        "400":
          content:
            application/json:
              example:
                error: true
                code: 400
                type: bad request
                message: Request Failure
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              example:
                error: true
                code: 422
                type: UnprocessableEntityError
                message: "Validation failed: Value has already been taken"
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable
      summary: Update User
      tags:
      - Users V2
  /api/2/users/{user_id}/apps:
    get:
      description: Get User Apps
      operationId: getUserApps2
      parameters:
      - description: Set to the id of the user that you want to return.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/id'
        style: simple
      - description: Defaults to `false`. When `true` will show all apps that are
          assigned to a user regardless of their portal visibility setting.
        explode: true
        in: query
        name: ignore_visibility
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/getUserApps_200_response_inner'
                type: array
          description: OK
        "401":
          content:
            application/json:
              example:
                error: true
                code: 401
                type: Unauthorized
                message: Unauthorized Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error: true
                code: 404
                type: Not Found
                message: No Route Exists
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - OAuth2:
        - Manage users
        - Manage All
        - Read All
        - Read Users
      summary: Get User Apps
      tags:
      - Users V2
  /api/2/branding/brands:
    get:
      description: List Account Brands
      operationId: listBrands
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/brand_req'
                type: array
          description: Successful response
      security:
      - OAuth2:
        - Manage All
      summary: List Account Brands
      tags:
      - Branding Service
    post:
      description: Create a new Account Brand
      operationId: createBrand
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/brand'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/brand'
          description: Created
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Create Brand
      tags:
      - Branding Service
  /api/2/branding/brands/{brand_id}:
    delete:
      description: Delete Brand
      operationId: deleteBrand
      parameters:
      - description: Unique identifier for the branding object.
        explode: false
        in: path
        name: brand_id
        required: true
        schema:
          example: 9
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Delete Brand
      tags:
      - Branding Service
    get:
      description: Retrieve a single brand via ID
      operationId: getBrand
      parameters:
      - description: Unique identifier for the branding object.
        explode: false
        in: path
        name: brand_id
        required: true
        schema:
          example: 9
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/brand'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Get Brand
      tags:
      - Branding Service
    put:
      description: Update Account Brand
      operationId: updateBrand
      parameters:
      - description: Unique identifier for the branding object.
        explode: false
        in: path
        name: brand_id
        required: true
        schema:
          example: 9
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request_brand'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/brand'
          description: Created
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Update Brand
      tags:
      - Branding Service
  /api/2/branding/brands/{brand_id}/templates:
    get:
      description: List Message Templates
      operationId: listMessageTemplates
      parameters:
      - description: Unique identifier for the branding object.
        explode: false
        in: path
        name: brand_id
        required: true
        schema:
          example: 9
          type: integer
        style: simple
      - description: "The 2 character language locale for the template. e.g. en =\
          \ English, es = Spanish"
        explode: true
        in: query
        name: locale
        required: false
        schema:
          example: en
          pattern: "^[a-z]{2}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listMessageTemplates_200_response_inner'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: List Message Templates
      tags:
      - "Branding Service: Templates"
    post:
      description: Create Message Template
      operationId: createMessageTemplate
      parameters:
      - description: Unique identifier for the branding object.
        explode: false
        in: path
        name: brand_id
        required: true
        schema:
          example: 9
          type: integer
        style: simple
      - description: "The 2 character language locale for the template. e.g. en =\
          \ English, es = Spanish"
        explode: true
        in: query
        name: locale
        required: false
        schema:
          example: en
          pattern: "^[a-z]{2}$"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            example:
              type: email_forgot_password
              locale: es
              template:
                subject: Password Reset
                html: "<html><head></head><body><p>Please update your password by\
                  \ clicking <a href={{url}}>this link</a></p></body></html>"
                plain: "Please update your password by visiting this url: {{url}}"
            schema:
              $ref: '#/components/schemas/message_template'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message_template'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Create Message Template
      tags:
      - "Branding Service: Templates"
  /api/2/branding/brands/{brand_id}/templates/{template_id}:
    delete:
      description: Delete Message Template
      operationId: deleteMessageTemplate
      parameters:
      - description: Unique identifier for the branding object.
        explode: false
        in: path
        name: brand_id
        required: true
        schema:
          example: 9
          type: integer
        style: simple
      - description: Unique identifier for the template to return.
        explode: false
        in: path
        name: template_id
        required: true
        schema:
          example: 25
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Delete Message Template
      tags:
      - "Branding Service: Templates"
    get:
      description: Get Message Template by ID
      operationId: getMessageTemplateById
      parameters:
      - description: Unique identifier for the branding object.
        explode: false
        in: path
        name: brand_id
        required: true
        schema:
          example: 9
          type: integer
        style: simple
      - description: Unique identifier for the template to return.
        explode: false
        in: path
        name: template_id
        required: true
        schema:
          example: 25
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message_template'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Get Message Template
      tags:
      - "Branding Service: Templates"
    put:
      description: Update Message Template by ID
      operationId: updateMessageTemplateById
      parameters:
      - description: Unique identifier for the branding object.
        explode: false
        in: path
        name: brand_id
        required: true
        schema:
          example: 9
          type: integer
        style: simple
      - description: Unique identifier for the template to return.
        explode: false
        in: path
        name: template_id
        required: true
        schema:
          example: 25
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message_template'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Update Message Template
      tags:
      - "Branding Service: Templates"
  /api/2/branding/brands/{brand_id}/apps:
    get:
      description: Get Apps Associated with Account Brand
      operationId: getBrandApps
      parameters:
      - description: Unique identifier for the branding object.
        explode: false
        in: path
        name: brand_id
        required: true
        schema:
          example: 9
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/brand_app'
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Get Brand Apps
      tags:
      - Branding Service
  /api/2/branding/email_settings:
    delete:
      description: Reset Email Setting config
      operationId: deleteEmailSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/altErr'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
      summary: Delete Custom Email Settings
      tags:
      - "Branding Service: SMTP"
    get:
      description: Get Email Settings Config
      operationId: getEmailSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEmailSettings_200_response'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
      security:
      - OAuth2:
        - Manage All
        - Read All
      summary: Get Email Settings
      tags:
      - "Branding Service: SMTP"
    put:
      description: Update Email Settings Config
      operationId: updateEmailSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/email_config'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/altErr'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                statusCode: 422
                name: UnprocessableEntityError
                message: invalid value in \"auth_method\"
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unprocessable Entity
      security:
      - OAuth2:
        - Manage All
      summary: Update Email Settings
      tags:
      - "Branding Service: SMTP"
  /api/2/branding/brands/{brand_id}/templates/{template_type}/{locale}:
    get:
      description: Get Template by Type and Locale
      operationId: getTemplateByLocale
      parameters:
      - description: Unique identifier for the branding object.
        explode: false
        in: path
        name: brand_id
        required: true
        schema:
          example: 9
          type: integer
        style: simple
      - description: The message template type to return.
        explode: false
        in: path
        name: template_type
        required: true
        schema:
          example: email_template
          type: string
        style: simple
      - description: "The 2 character language locale for the template. e.g. en =\
          \ English, es = Spanish"
        explode: false
        in: path
        name: locale
        required: true
        schema:
          example: en
          pattern: "^[a-z]{2}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message_template'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Get Template by Type & Locale
      tags:
      - "Branding Service: Templates"
    put:
      description: Update Template by Type and Locale
      operationId: updateTemplateByLocale
      parameters:
      - description: Unique identifier for the branding object.
        explode: false
        in: path
        name: brand_id
        required: true
        schema:
          example: 9
          type: integer
        style: simple
      - description: The message template type to return.
        explode: false
        in: path
        name: template_type
        required: true
        schema:
          example: email_template
          type: string
        style: simple
      - description: "The 2 character language locale for the template. e.g. en =\
          \ English, es = Spanish"
        explode: false
        in: path
        name: locale
        required: true
        schema:
          example: en
          pattern: "^[a-z]{2}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message_template'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Update Template by Type & Locale
      tags:
      - "Branding Service: Templates"
  /api/2/branding/brands/master/templates/{template_type}:
    get:
      description: Get Master Template by Type
      operationId: getMasterByType
      parameters:
      - description: The message template type to return.
        explode: false
        in: path
        name: template_type
        required: true
        schema:
          example: email_template
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message_template'
          description: Successful response
        "401":
          content:
            application/json:
              example:
                statusCode: 401
                name: UnauthorizedError
                message: This request requires Authentication
              schema:
                $ref: '#/components/schemas/altErr'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                statusCode: 404
                name: NotFoundError
                message: The resource can't be found or the server has not found anything
                  matching the Request-URI
              schema:
                $ref: '#/components/schemas/altErr'
          description: Not Found
      security:
      - OAuth2:
        - Manage All
      summary: Get Master Template by Type
      tags:
      - "Branding Service: Templates"
components:
  headers:
    Current-Page:
      description: The index number of the current page being returned.
      explode: false
      schema:
        type: integer
      style: simple
    Page-Items:
      description: The number of items returned in the response.
      explode: false
      schema:
        type: integer
      style: simple
    Total-Count:
      description: The total number of items across all pages.
      explode: false
      schema:
        type: integer
      style: simple
    Total-Pages:
      description: The total number of pages to return all results.
      explode: false
      schema:
        type: integer
      style: simple
    Link:
      description: "A set of urls which contains premade links for first, next"
      explode: false
      schema:
        items:
          type: string
        type: array
      style: simple
    Before-Cursor:
      description: A string that can be used to request the page of results that preceed
        the current page using the same set of search filters and pagination options.
      explode: false
      schema:
        type: string
      style: simple
    After-Cursor:
      description: A string that can be used to request the page of results that follows
        the current page using the same set of search filters and pagination options.
      explode: false
      schema:
        type: string
      style: simple
  parameters:
    api_auth_id:
      explode: false
      in: path
      name: api_auth_id
      required: true
      schema:
        type: string
      style: simple
    app_id:
      explode: false
      in: path
      name: app_id
      required: true
      schema:
        type: integer
      style: simple
    auth_method:
      explode: true
      in: query
      name: auth_method
      required: false
      schema:
        $ref: '#/components/schemas/auth_method'
      style: form
    claim_id:
      explode: false
      in: path
      name: claim_id
      required: true
      schema:
        type: integer
      style: simple
    client_app_id:
      explode: false
      in: path
      name: client_app_id
      required: true
      schema:
        type: integer
      style: simple
    client_id:
      explode: true
      in: query
      name: client_id
      required: false
      schema:
        type: integer
      style: form
    connector_id:
      description: Returns all apps based off a specific connector. See List Connectors
        for a complete list of Connector IDs.
      explode: true
      in: query
      name: connector_id
      required: false
      schema:
        type: integer
      style: form
    content-type:
      example: application/json
      explode: false
      in: header
      name: Content-Type
      required: false
      schema:
        default: application/json
        type: string
      style: simple
    created_at:
      explode: true
      in: query
      name: created_at
      required: false
      schema:
        type: string
      style: form
    cursor:
      description: Set to the value extracted from Before-Cursor or After-Cursor headers
        to return the previous or next page.
      explode: true
      in: query
      name: cursor
      required: false
      schema:
        type: string
      style: form
    device_id:
      explode: false
      in: path
      name: device_id
      required: true
      schema:
        type: string
      style: simple
    directory_id:
      explode: true
      in: query
      name: directory_id
      required: false
      schema:
        type: integer
      style: form
    event_id:
      explode: false
      in: path
      name: event_id
      required: true
      schema:
        type: integer
      style: simple
    event_type_id:
      explode: true
      in: query
      name: event_type_id
      required: false
      schema:
        items:
          type: integer
        type: array
      style: form
    group_id:
      explode: false
      in: path
      name: group_id
      required: true
      schema:
        type: string
      style: simple
    has_condition:
      description: |-
        Filters Rules based on their Conditions. Values formatted as :, where name is the Condition to look for, and value is the value to find. Multiple filters can be declared by using a comma delimited list. Wildcards are supported in both the name and value fields.
        For example:
        Single filter. has_condition=has_role:123456
        Multiple filters. has_condition=has_role:123456,status:1
        Wildcard for conditions. has_condition=*:123456
        Wildcard for condition values. has_condition=has_role:*
      example: has_condition=has_role:123456
      explode: true
      in: query
      name: has_condition
      required: false
      schema:
        type: string
      style: form
    kid:
      example: ZoKMCcDDtLHKYPyZnXSDKTMmknGltey7M09CQy3RCIE
      explode: false
      in: path
      name: kid
      required: true
      schema:
        description: The unique identifier for the key to fetch. You can get a list
          of keys and kids values via the List Signing Keys endpoint.
        type: string
      style: simple
    limit:
      description: How many items to return at one time (max 100)
      explode: true
      in: query
      name: limit
      required: false
      schema:
        format: int32
        type: integer
      style: form
    mapping_action_value:
      explode: false
      in: path
      name: mapping_action_value
      required: true
      schema:
        type: string
      style: simple
    mapping_condition_value:
      explode: false
      in: path
      name: mapping_condition_value
      required: true
      schema:
        type: string
      style: simple
    mapping_id:
      description: The id of the user mapping to locate.
      explode: false
      in: path
      name: mapping_id
      required: true
      schema:
        type: integer
      style: simple
    name:
      explode: true
      in: query
      name: name
      required: false
      schema:
        type: string
      style: form
    page:
      description: The page number of results to return.
      explode: true
      in: query
      name: page
      required: false
      schema:
        type: integer
      style: form
    parameter_id:
      explode: false
      in: path
      name: parameter_id
      required: true
      schema:
        type: string
      style: simple
    privilege_id:
      explode: false
      in: path
      name: privilege_id
      required: true
      schema:
        type: string
      style: simple
    redirect_uri:
      example: https://app.example.com/auth
      explode: true
      in: query
      name: redirect_uri
      required: false
      schema:
        description: The redirect uri that is registered with OneLogin for this OpenId
          Connect app.
        type: string
      style: form
    resolution:
      explode: true
      in: query
      name: resolution
      required: false
      schema:
        type: string
      style: form
    role_id:
      description: Set to the id of the role you want to return.
      explode: false
      in: path
      name: role_id
      required: true
      schema:
        type: string
      style: simple
    rule_action_value:
      explode: false
      in: path
      name: rule_action_value
      required: true
      schema:
        type: string
      style: simple
    rule_condition_value:
      explode: false
      in: path
      name: rule_condition_value
      required: true
      schema:
        type: string
      style: simple
    rule_id:
      explode: false
      in: path
      name: rule_id
      required: true
      schema:
        type: string
      style: simple
    scope_id:
      explode: false
      in: path
      name: scope_id
      required: true
      schema:
        type: integer
      style: simple
    since:
      explode: true
      in: query
      name: since
      required: false
      schema:
        type: string
      style: form
    until:
      explode: true
      in: query
      name: until
      required: false
      schema:
        type: string
      style: form
    user_id:
      description: Set to the id of the user that you want to return.
      explode: false
      in: path
      name: user_id
      required: true
      schema:
        $ref: '#/components/schemas/id'
      style: simple
    has_condition_type:
      description: |-
        Filters Rules based on their Conditions. Values formatted as :, where name is the Condition to look for, and value is the value to find. Multiple filters can be declared by using a comma delimited list. Wildcards are supported in both the name and value fields.
        For example:
        Single filter. has_condition=has_role:123456
        Multiple filters. has_condition=has_role:123456,status:1
        Wildcard for conditions. has_condition=*:123456
        Wildcard for condition values. has_condition=has_role:*
      explode: true
      in: query
      name: has_condition_type
      required: false
      schema:
        enum:
        - builtin
        - custom
        - none
        type: string
      style: form
    has_action:
      description: |-
        Filters Rules based on their Actions. Values formatted as :, where name is the Action to look for, and value is the value to find. Multiple filters can be declared by using a comma delimited list. Wildcards are supported in both the name and value fields.
        For example:
        Single filter. has_action=set_licenses:123456
        Multiple filters. has_action=set_groups:123456,set_usertype:*
        Wildcard for actions. has_action=*:123456
        Wildcard for action values. has_action=set_userprincipalname:*
      example: "has_action=set_groups:123456,set_usertype:*"
      explode: true
      in: query
      name: has_action
      required: false
      schema:
        type: string
      style: form
    has_action_type:
      description: |-
        Filters Rules based on their action types.
        Allowed values are:
        builtin - actions that involve standard attributes custom - actions that involve custom attributes none - no actions are defined For example:
        Find Rules with no actions has_action_type=none
      explode: true
      in: query
      name: has_action_type
      required: false
      schema:
        enum:
        - builtin
        - custom
        - none
        type: string
      style: form
    enabled:
      description: Defaults to true. When set to `false` will return all disabled
        mappings.
      explode: true
      in: query
      name: enabled
      required: false
      schema:
        default: true
        type: boolean
      style: form
    registration_id:
      description: The id of a registration
      example: <UUID>
      explode: false
      in: path
      name: registration_id
      required: true
      schema:
        type: string
      style: simple
    verification_id:
      description: The verification_id is returned on activation of the factor or
        you can get the device_id using the Activate Factor API call.
      example: <UUID>
      explode: false
      in: path
      name: verification_id
      required: true
      schema:
        type: string
      style: simple
    brand_id:
      description: Unique identifier for the branding object.
      explode: false
      in: path
      name: brand_id
      required: true
      schema:
        example: 9
        type: integer
      style: simple
    template_id:
      description: Unique identifier for the template to return.
      explode: false
      in: path
      name: template_id
      required: true
      schema:
        example: 25
        type: integer
      style: simple
    template_type:
      description: The message template type to return.
      explode: false
      in: path
      name: template_type
      required: true
      schema:
        example: email_template
        type: string
      style: simple
    locale:
      description: "The 2 character language locale for the template. e.g. en = English,\
        \ es = Spanish"
      explode: false
      in: path
      name: locale
      required: true
      schema:
        example: en
        pattern: "^[a-z]{2}$"
        type: string
      style: simple
    mappings:
      description: Controls how mappings will be applied to the user on creation.
        Defaults to async.
      explode: true
      in: query
      name: mappings
      required: false
      schema:
        enum:
        - async
        - sync
        - disabled
        type: string
      style: form
    validate_policy:
      description: Will passwords validate against the User Policy? Defaults to true.
      explode: true
      in: query
      name: validate_policy
      required: false
      schema:
        type: boolean
      style: form
    ignore_visibility:
      description: Defaults to `false`. When `true` will show all apps that are assigned
        to a user regardless of their portal visibility setting.
      explode: true
      in: query
      name: ignore_visibility
      required: false
      schema:
        default: false
        type: boolean
      style: form
    created_since:
      description: An ISO8601 timestamp value that returns all users created after
        a given date & time.
      explode: true
      in: query
      name: created_since
      required: false
      schema:
        type: string
      style: form
    created_until:
      description: An ISO8601 timestamp value that returns all users created before
        a given date & time.
      explode: true
      in: query
      name: created_until
      required: false
      schema:
        type: string
      style: form
    updated_since:
      description: An ISO8601 timestamp value that returns all users updated after
        a given date & time.
      explode: true
      in: query
      name: updated_since
      required: false
      schema:
        type: string
      style: form
    updated_until:
      description: An ISO8601 timestamp value that returns all users updated before
        a given date & time.
      explode: true
      in: query
      name: updated_until
      required: false
      schema:
        type: string
      style: form
    last_login_since:
      description: An ISO8601 timestamp value that returns all users that logged in
        after a given date & time.
      explode: true
      in: query
      name: last_login_since
      required: false
      schema:
        type: string
      style: form
    last_login_until:
      description: An ISO8601 timestamp value that returns all users that logged in
        before a given date & time.
      explode: true
      in: query
      name: last_login_until
      required: false
      schema:
        type: string
      style: form
    firstname:
      description: The first name of the user
      explode: true
      in: query
      name: firstname
      required: false
      schema:
        type: string
      style: form
    lastname:
      description: The last name of the user
      explode: true
      in: query
      name: lastname
      required: false
      schema:
        type: string
      style: form
    email:
      description: The email address of the user
      explode: true
      in: query
      name: email
      required: false
      schema:
        type: string
      style: form
    username:
      description: The username for the user
      explode: true
      in: query
      name: username
      required: false
      schema:
        type: string
      style: form
    samaccountname:
      description: The AD login name for the user
      explode: true
      in: query
      name: samaccountname
      required: false
      schema:
        type: string
      style: form
    external_id:
      description: An external identifier that has been set on the user
      explode: true
      in: query
      name: external_id
      required: false
      schema:
        type: string
      style: form
    user_ids:
      description: A comma separated list of OneLogin User IDs
      explode: true
      in: query
      name: user_ids
      required: false
      schema:
        type: string
      style: form
    custom_attributes:
      description: The short name of a custom attribute. Note that the attribute name
        is prefixed with custom_attributes.
      explode: true
      in: query
      name: "custom_attributes.{attribute_name}"
      required: false
      schema:
        type: string
      style: form
    fields:
      description: Optional. Comma delimited list of fields to return.
      explode: true
      in: query
      name: fields
      required: false
      schema:
        enum:
        - apps
        - users
        - admins
        type: string
      style: form
    user_id_query:
      description: Set to the id of the user that you want to return.
      explode: true
      in: query
      name: user_id
      required: false
      schema:
        $ref: '#/components/schemas/id'
      style: form
    id_query:
      explode: true
      in: query
      name: id
      required: false
      schema:
        $ref: '#/components/schemas/id'
      style: form
    locale_query:
      description: "The 2 character language locale for the template. e.g. en = English,\
        \ es = Spanish"
      explode: true
      in: query
      name: locale
      required: false
      schema:
        example: en
        pattern: "^[a-z]{2}$"
        type: string
      style: form
    app_name:
      description: Optional. Returns roles that contain this app name.
      explode: true
      in: query
      name: app_name
      required: false
      schema:
        type: string
      style: form
    role_name:
      description: Optional. Filters by role name.
      explode: true
      in: query
      name: role_name
      required: false
      schema:
        type: string
      style: form
    assigned:
      description: Optional. Defaults to true. Returns all apps not yet assigned to
        the role.
      explode: true
      in: query
      name: assigned
      required: false
      schema:
        type: boolean
      style: form
    include_unassigned:
      description: Optional. Defaults to false. Include users that aren’t assigned
        to the role.
      explode: true
      in: query
      name: include_unassigned
      required: false
      schema:
        type: boolean
      style: form
    user_name:
      description: "Allows you to filter on first name, last name, username, and email\
        \ address."
      explode: true
      in: query
      name: name
      required: false
      schema:
        type: string
      style: form
    app_id_query:
      explode: true
      in: query
      name: app_id
      required: true
      schema:
        type: integer
      style: form
    after:
      description: Optional ISO8601 formatted date string. Defaults to 30 days ago.
        Maximum date is 90 days ago.
      explode: true
      in: query
      name: after
      required: false
      schema:
        type: string
      style: form
    before:
      description: Optional ISO8601 formatted date string. Defaults to current date.
        Maximum date is 90 days ago.
      explode: true
      in: query
      name: before
      required: false
      schema:
        type: string
      style: form
    hook_id_path:
      description: Set to the id of the Hook that you want to return.
      explode: false
      in: path
      name: hook_id
      required: true
      schema:
        description: The Hook unique ID in OneLogin.
        type: string
      style: simple
    envvar_id_path:
      description: Set to the id of the Hook Environment Variable that you want to
        fetch.
      explode: false
      in: path
      name: envvar_id
      required: true
      schema:
        type: string
      style: simple
    request_id_query:
      description: Returns logs that contain this request_id.
      explode: true
      in: query
      name: request_id
      required: false
      schema:
        type: string
      style: form
    correlation_id_query:
      description: Returns logs that contain this correlation_id.
      explode: true
      in: query
      name: correlation_id
      required: false
      schema:
        type: string
      style: form
  responses:
    "400":
      content:
        application/json:
          example:
            statusCode: 400
            name: BadRequestError
            message: "The request could not be understood by the server due to malformed\
              \ syntax: Statement required Action array"
          schema:
            $ref: '#/components/schemas/altErr'
      description: Bad Request
    "401":
      content:
        application/json:
          example:
            statusCode: 401
            name: UnauthorizedError
            message: This request requires Authentication
          schema:
            $ref: '#/components/schemas/altErr'
      description: Unauthorized
    "403":
      content:
        application/json:
          example:
            statusCode: 403
            name: ForbiddenError
            message: Not allowed to destroy specified resource
          schema:
            $ref: '#/components/schemas/altErr'
      description: Forbidden
    "404":
      content:
        application/json:
          example:
            statusCode: 404
            name: NotFoundError
            message: The resource can't be found or the server has not found anything
              matching the Request-URI
          schema:
            $ref: '#/components/schemas/altErr'
      description: Not Found
    "422":
      content:
        application/json:
          example:
            statusCode: 422
            name: UnprocessableEntityError
            message: invalid value in \"auth_method\"
          schema:
            $ref: '#/components/schemas/altErr'
      description: Unprocessable Entity
    BadRequest:
      content:
        application/json:
          example:
            error: true
            code: 400
            type: bad request
            message: Request Failure
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad Request
    Forbidden:
      content:
        application/json:
          example:
            error: true
            code: 403
            type: ForbiddenError
            message: not allowed
          schema:
            $ref: '#/components/schemas/Error'
      description: Forbidden
    NotFound:
      content:
        application/json:
          example:
            error: true
            code: 404
            type: Not Found
            message: No Route Exists
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Found
    Unauthorized:
      content:
        application/json:
          example:
            error: true
            code: 401
            type: Unauthorized
            message: Unauthorized Error
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized
    Unprocessable:
      content:
        application/json:
          example:
            error: true
            code: 422
            type: UnprocessableEntityError
            message: "Validation failed: Value has already been taken"
          schema:
            $ref: '#/components/schemas/Error'
      description: Unprocessable
  schemas:
    Error:
      example:
        code: 200
        error: false
        type: Success
        message: Success
      properties:
        error:
          example: false
          type: boolean
        code:
          example: 200
          type: integer
        type:
          example: Success
          type: string
        message:
          example: Success
          type: string
      required:
      - code
      - message
      type: object
    action_obj:
      example:
        action: action
        value:
        - "2"
        - "2"
      properties:
        action:
          description: The action to apply
          type: string
        value:
          description: Only applicable to provisioned and set_* actions. Items in
            the array will be a plain text string or valid value for the selected
            action.
          items:
            example: "2"
            type: string
          type: array
      type: object
    altErr:
      example:
        name: Success
        message: Settings Updated
        statusCode: 200
      properties:
        statusCode:
          description: HTTP error code https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
          example: 200
          type: integer
        name:
          description: Error Code Name
          example: Success
          type: string
        message:
          description: Description of Error
          example: Settings Updated
          type: string
      type: object
    app_parameters:
      additionalProperties: true
      description: |-
        The parameters section contains parameterized attributes that have defined at the connector level as well as custom attributes that have been defined specifically for this app. Regardless of how they are defined, all parameters have the following attributes.
        Each parameter is an object with the key for the object being set as the parameters short name.
      example:
        include_in_saml_assertion: true
        user_attribute_macros: user_attribute_macros
        user_attribute_mappings: user_attribute_mappings
        label: label
      properties:
        user_attribute_mappings:
          description: A user attribute to map values from For custom attributes prefix
            the name of the attribute with `custom_attribute_`. e.g. To get the value
            for custom attribute `employee_id` use `custom_attribute_employee_id`.
          type: string
        user_attribute_macros:
          description: When `user_attribute_mappings` is set to `_macro_` this macro
            will be used to assign the parameter value.
          type: string
        label:
          description: The can only be set when creating a new parameter. It can not
            be updated.
          type: string
        include_in_saml_assertion:
          description: "When true, this parameter will be included in a SAML assertion\
            \ payload."
          example: true
          type: boolean
      type: object
    auth_claim:
      properties:
        name:
          description: The attribute name for the claim when its returned in an Access
            Token
          example: email_address
          type: string
        user_attribute_mappings:
          description: A user attribute to map values from For custom attributes prefix
            the name of the attribute with `custom_attribute_`. e.g. To get the value
            for custom attribute `employee_id` use `custom_attribute_employee_id`.
          example: email
          type: string
        user_attribute_macros:
          description: When `user_attribute_mappings` is set to `_macro_` this macro
            will be used to assign the parameter value.
          type: string
      required:
      - name
      type: object
    auth_id:
      example:
        id: 323005
      properties:
        id:
          description: Unique ID for the Scope
          example: 323005
          type: integer
      type: object
    auth_method:
      description: |-
        An ID indicating the type of app:
          - 0: Password
          - 1: OpenId
          - 2: SAML
          - 3: API
          - 4: Google
          - 6: Forms Based App
          - 7: WSFED
          - 8: OpenId Connect
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      example: 8
      type: integer
    auth_scope:
      example:
        description: A custom scope
        id: 323005
        value: custom:scope
      properties:
        id:
          description: Unique ID for the Scope
          example: 323005
          readOnly: true
          type: integer
        value:
          description: A value representing the api scope that with be authorized
          example: custom:scope
          type: string
        description:
          description: A description of what access the scope enables
          example: A custom scope
          type: string
      type: object
    auth_server:
      description: base resource for configuring api authorization in OneLogin
      example:
        configuration:
          access_token_expiration_minutes: 20
          resource_identifier: https://example.com/contacts
          audiences:
          - audiences
          - audiences
          refresh_token_expiration_minutes: 30
        name: Contacts API
        description: API manages contacts
        id: 1022697
      properties:
        id:
          description: Auth server unique ID in Onelogin
          example: 1022697
          readOnly: true
          type: integer
        name:
          description: Name of the API.
          example: Contacts API
          type: string
        description:
          description: Description of what the API does.
          example: API manages contacts
          type: string
        configuration:
          $ref: '#/components/schemas/auth_server_configuration'
      required:
      - configuration
      - description
      - name
      type: object
    auth_server_configuration:
      description: Authorization server configuration
      example:
        access_token_expiration_minutes: 20
        resource_identifier: https://example.com/contacts
        audiences:
        - audiences
        - audiences
        refresh_token_expiration_minutes: 30
      properties:
        audiences:
          description: List of API endpoints that will be returned in Access Tokens.
          items:
            type: string
          type: array
        refresh_token_expiration_minutes:
          description: The number of minutes until refresh token expires. There is
            no maximum expiry limit.
          example: 30
          type: integer
        resource_identifier:
          description: Unique identifier for the API that the Authorization Server
            will issue Access Tokens for.
          example: https://example.com/contacts
          type: string
        access_token_expiration_minutes:
          description: The number of minutes until access token expires. There is
            no maximum expiry limit.
          example: 20
          type: integer
      required:
      - audiences
      - resource_identifier
      type: object
    brand:
      example:
        id: 9
        enabled: true
        custom_support_enabled: false
        custom_color: '#1298b4'
        custom_accent_color: '#b60012'
        custom_masking_color: '#beefed'
        custom_masking_opacity: 40
        mfa_enrollment_message: You must register with the OneLogin Protect app in
          order to login
        enable_custom_label_for_login_screen: true
        custom_label_text_for_login_screen: ACME Username or Email
        login_instruction: "To login, enter your ACME Username or Email. Reach out\
          \ to help.desk@acme.org if you have trouble logging in."
        login_instruction_title: ACME Login Instructions
        hide_onelogin_footer: false
        background:
          urls:
            original: https://cdn.onelogin.com/images/account_branding/account_background/original/9ada91a5d34b497f6f0b93934165f0c713ed3c2d.?1599165114
            login: https://cdn.onelogin.com/images/account_branding/account_background/login/a2011597bad264455796281b94471284c6919857.jpg?1599165114
            branding: https://cdn.onelogin.com/images/account_branding/account_background/branding/8547d161732776facb3d9127146c06a09aa63362.jpg?1599165114
          file_size: 30338
          updated_at: 2020-09-03T20:31:54.146Z
          content_type: image/jpeg
        logo:
          urls:
            original: https://cdn.onelogin.com/images/account_branding/account_logo/original/25506f4f5b795b39f8ab6ea8a6c85f78094941bf.?1599165114
            login: https://cdn.onelogin.com/images/account_branding/account_logo/login/103d08ec5efb4ab204421f3dd15eddc973c8d0c5.png?1599165114
            navigation: https://cdn.onelogin.com/images/account_branding/account_logo/navigation/08fef613402a898832d215a3359b56e6d69ac232.png?1599165114
          file_size: 4408
          updated_at: 2020-09-03T20:31:54.373Z
          content_type: image/png
      properties:
        id:
          type: integer
        enabled:
          default: false
          description: Indicates if the brand is enabled or not
          example: true
          type: boolean
        custom_support_enabled:
          description: "Indicates if the custom support is enabled. If enabled, the\
            \ login page includes the ability to submit a support request."
          example: false
          type: boolean
        custom_color:
          description: Primary brand color
          example: '#1298b4'
          type: string
        custom_accent_color:
          description: Secondary brand color
          example: '#b60012'
          type: string
        custom_masking_color:
          description: Color for the masking layer above the background image of the
            branded login screen.
          example: '#beefed'
          type: string
        custom_masking_opacity:
          description: Opacity for the custom_masking_color.
          example: 40
          type: integer
        mfa_enrollment_message:
          description: Text that replaces the default text displayed on the initial
            screen of the MFA Registration.
          example: You must register with the OneLogin Protect app in order to login
          type: string
        enable_custom_label_for_login_screen:
          description: Indicates if the custom Username/Email field label is enabled
            or not
          example: true
          type: boolean
        custom_label_text_for_login_screen:
          description: Custom label for the Username/Email field on the login screen.
            See example here.
          example: ACME Username or Email
          type: string
        login_instruction:
          description: "Text for the login instruction screen, styled in Markdown."
          example: "To login, enter your ACME Username or Email. Reach out to help.desk@acme.org\
            \ if you have trouble logging in."
          type: string
        login_instruction_title:
          description: Link text to show login instruction screen.
          example: ACME Login Instructions
          type: string
        hide_onelogin_footer:
          description: Indicates if the OneLogin footer will appear at the bottom
            of the login page.
          example: true
          type: boolean
        background:
          $ref: '#/components/schemas/brand_background'
        logo:
          $ref: '#/components/schemas/brand_logo'
      required:
      - background
      - custom_accent_color
      - custom_color
      - custom_label_text_for_login_screen
      - custom_masking_color
      - custom_masking_opacity
      - custom_support_enabled
      - enable_custom_label_for_login_screen
      - enabled
      - hide_onelogin_footer
      - id
      - login_instruction
      - login_instruction_title
      - logo
      - mfa_enrollment_message
      type: object
    brand_app:
      example:
        auth_method: 2
        visible: true
        updated_at: 2020-09-11T19:35:08.288Z
        name: Mom Corp
        connector_id: 3001
        description: Mom’s Friendly Robot Company
        created_at: 2020-09-08T22:24:19.551Z
        id: 1455
        auth_method_description: SAML2.0
      properties:
        id:
          example: 1455
          type: integer
        updated_at:
          example: 2020-09-11T19:35:08.288Z
          type: string
        name:
          example: Mom Corp
          type: string
        connector_id:
          example: 3001
          type: integer
        auth_method_description:
          example: SAML2.0
          type: string
        description:
          example: Mom’s Friendly Robot Company
          type: string
        auth_method:
          example: 2
          type: integer
        created_at:
          example: 2020-09-08T22:24:19.551Z
          type: string
        visible:
          example: true
          type: boolean
      required:
      - auth_method
      - auth_method_description
      - connector_id
      - created_at
      - description
      - id
      - name
      - updated_at
      - visible
      type: object
    brand_req:
      example:
        name: ACME
        id: 912
        enabled: true
      properties:
        id:
          description: Brand’s unique ID in OneLogin.
          example: 912
          type: integer
        enabled:
          description: Indicates if the brand is enabled or not.
          example: true
          type: boolean
        name:
          description: Brand name for humans. This isn’t related to subdomains.
          example: ACME
          type: string
      type: object
    client_app_full:
      example:
        name: An oidc app
        scopes:
        - description: Read some contacts
          id: 25
          value: read:contacts
        - description: Read some contacts
          id: 25
          value: read:contacts
        api_auth_id: 1033034
        app_id: 1026152
      properties:
        scopes:
          description: List of All Scopes assigned to a client app
          items:
            $ref: '#/components/schemas/scope'
          type: array
        app_id:
          description: Unique Client App ID
          example: 1026152
          type: integer
        name:
          description: Name of client app
          example: An oidc app
          type: string
        api_auth_id:
          example: 1033034
          type: integer
      type: object
    clock_counter:
      description: "unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit\
        \ = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24"
      example:
        value: 30
        unit: 1
      properties:
        value:
          type: integer
        unit:
          type: integer
      type: object
    condition:
      description: Conditions in which mappings are applied
      example:
        source: last_login
        value: "90"
        operator: '>'
      properties:
        source:
          description: source field to check.
          example: last_login
          type: string
        operator:
          description: A valid operator for the selected condition source
          example: '>'
          type: string
        value:
          description: A plain text string or valid value for the selected  condition
            source
          example: "90"
          type: string
      type: object
    configuration_oidc:
      properties:
        login_url:
          description: The OpenId Connect Client Id. Note that client_secret is only
            returned after Creating an App.
          type: string
        redirect_uri:
          description: Comma or newline separated list of valid redirect uris for
            the OpenId Connect Authorization Code flow.
          example: https://localhost:3000/callback
          type: string
        access_token_expiration_minutes:
          description: Number of minutes the refresh token will be valid for.
          example: 1
          type: integer
        refresh_token_expiration_minutes:
          description: Number of minutes the refresh token will be valid for.
          example: 1
          type: integer
        token_endpoint_auth_method:
          description: "- 0: Basic - 1: POST - 2: None / PKCE"
          enum:
          - 0
          - 1
          - 2
          type: integer
        oidc_application_type:
          description: "- 0 : Web - 1 : Native / Mobile"
          enum:
          - 0
          - 1
          example: 0
          type: integer
      required:
      - access_token_expiration_minutes
      - login_url
      - oidc_application_type
      - redirect_uri
      - refresh_token_expiration_minutes
      - token_endpoint_auth_method
      type: object
    configuration_saml:
      properties:
        signature_algorithm:
          description: |-
            One of the following:
              - SHA-1
              - SHA-256
              - SHA-348
              - SHA-512
          example: SHA-512
          type: string
        certificate_id:
          description: When creating apps the default certificate will be used unless
            the `certificate_id` attribute is applied in the `configuration` object.
          example: 123456
          type: integer
      required:
      - certificate_id
      - signature_algorithm
      type: object
    connector:
      example:
        icon_url: https://cdn-shadow.onlgn.net/images/icons/square/amazonwebservices3multirole/old_original.png?1421095823
        allows_new_parameters: true
        auth_method: 8
        name: Amazon Web Services Multi-Role
        id: 1061937
      properties:
        id:
          description: Connectors unique ID in OneLogin.
          example: 1061937
          type: integer
        name:
          description: Name of Connector
          example: Amazon Web Services Multi-Role
          type: string
        icon_url:
          description: A link to the icon's url.
          example: https://cdn-shadow.onlgn.net/images/icons/square/amazonwebservices3multirole/old_original.png?1421095823
          type: string
        auth_method:
          $ref: '#/components/schemas/auth_method'
        allows_new_parameters:
          description: Indicates if apps created using this connector will be allowed
            to create custom parameters.
          type: boolean
      type: object
    device:
      properties:
        device_id:
          description: an ID for the device type that must be submitted with the Verify
            Factor API call.
          example: 654984
          type: integer
        device_type:
          description: "Lists an available MFA device type, such as OneLogin OTP SMS\
            \ or Google Authenticator."
          example: Google Authenticator
          type: string
      type: object
    devices:
      example:
      - device_id: 51684
        device_type: Google Authenticator
      items:
        $ref: '#/components/schemas/device'
      type: array
    email_config:
      properties:
        address:
          description: Email Settings server address
          example: smtp.sendgrid.net
          type: string
        use_tls:
          default: true
          description: Use TLS
          example: true
          type: boolean
        from:
          description: The From email address in the message.
          example: email@example.com
          type: string
        domain:
          description: Domain of the From address.
          example: example.com
          type: string
        user_name:
          description: The user name of the account to authenticate with the Email
            Settings server.
          example: user-name
          type: string
        password:
          description: The password of the account to authenticate with the Email
            Settings server.
          example: password
          format: password
          type: string
        port:
          default: 25
          description: Defaults to 25.
          example: 587
          type: integer
      required:
      - address
      - domain
      - from
      type: object
    enforcement_point:
      description: For apps that connect to a OneLogin Access Enforcement Point the
        following enforcement_point object will be included with the app payload.
      example:
        context_root: /
        resources:
        - resource_id: 809
          conditions: ""
          is_path_regex: false
          permissions: allow
          require_auth: false
          path: /
        landing_page: ""
        require_sitewide_authentication: false
        token: b491c647f5e0cff854ad606722ac98342b4b0882
        target: ""
        vhost: ""
        permissions: allow
        session_expiry_fixed:
          value: 30
          unit: 1
        case_sensitive: false
        use_target_host_header: false
        conditions: ""
        session_expiry_inactivity:
          value: 30
          unit: 1
      properties:
        require_sitewide_authentication:
          description: Require user authentication to access any resource protected
            by this enforcement point.
          example: false
          type: boolean
        conditions:
          description: "If access is conditional, the conditions that must evaluate\
            \ to true to allow access to a resource. For example, to require the user\
            \ must be authenticated and have either the role Admin or User"
          example: ""
          type: string
        session_expiry_fixed:
          $ref: '#/components/schemas/clock_counter'
        session_expiry_inactivity:
          $ref: '#/components/schemas/clock_counter'
        permissions:
          description: "Specify to always `allow`, `deny` access to resources, of\
            \ if access is `conditional`."
          enum:
          - allow
          - deny
          - conditional
          example: allow
          type: string
        token:
          description: Can only be set on create. Access Gateway Token.
          example: b491c647f5e0cff854ad606722ac98342b4b0882
          readOnly: true
          type: string
        target:
          description: "A fully-qualified URL to the internal application including\
            \ scheme, authority and path. The target host authority must be an IP\
            \ address, not a hostname."
          example: ""
          nullable: true
          type: string
        resources:
          description: Array of resource objects
          example:
          - resource_id: 809
            conditions: ""
            is_path_regex: false
            permissions: allow
            require_auth: false
            path: /
          items:
            $ref: '#/components/schemas/enforcement_point_resources_inner'
          type: array
        context_root:
          description: "The root path to the application, often the name of the application.\
            \ Can be any name, path or just a slash (“/”). The context root uniquely\
            \ identifies the application within the enforcement point."
          example: /
          type: string
        use_target_host_header:
          description: Use the target host header as opposed to the original gateway
            or upstream host header.
          example: false
          type: boolean
        vhost:
          description: A comma-delimited list of one or more virtual hosts that map
            to applications assigned to the enforcement point. A VHOST may be a host
            name or an IP address. VHOST distinguish between applications that are
            at the same context root.
          example: ""
          nullable: true
          type: string
        landing_page:
          description: "The location within the context root to which the browser\
            \ will be redirected for IdP-initiated single sign-on. For example, the\
            \ landing page might be an index page in the context root such as index.html\
            \ or default.aspx. The landing page cannot begin with a slash and must\
            \ use valid URL characters."
          example: ""
          nullable: true
          type: string
        case_sensitive:
          description: "The URL path evaluation is case insensitive by default. Resources\
            \ hosted on web servers such as Apache, NGINX and Java EE are case sensitive\
            \ paths. Web servers such as Microsoft IIS are not case-sensitive."
          example: false
          type: boolean
      type: object
    event:
      example:
        privilege_id: 6
        risk_reasons: risk_reasons
        notes: notes
        assumed_by_superadmin_or_reseller: 5
        policy_id: 1
        service_directory_id: 9
        directory_sync_run_id: 9
        user_name: user_name
        risk_cookie_id: risk_cookie_id
        created_at: created_at
        solved: true
        client_id: client_id
        event_type_id: 3
        otp_device_id: 1
        actor_user_id: 6
        certificate_id: 7
        resource_type_id: 1
        actor_user_name: actor_user_name
        param: param
        role_id: 5
        error_description: error_description
        user_field_id: 6
        id: 4
        ipaddr: ipaddr
        app_id: 5
        assuming_acting_user_id: 2
        proxy_ip: proxy_ip
        risk_score: 4
        otp_device_name: otp_device_name
        policy_name: policy_name
        object_id: 1
        adc_id: 1
        app-name: app-name
        role_name: role_name
        custom_message: custom_message
        policy_type: policy_type
        account_id: 0
        group-name: group-name
        group_id: 2
        user_id: 8
        resolved_at: resolved_at
        mapping_id: 7
        radius_config_id: 7
        trusted_idp_id: 9
        actor_system: actor_system
      properties:
        account_id:
          description: Account that triggered the event.
          type: integer
        actor_system:
          description: Acting system that triggered the event when the actor is not
            a user.
          type: string
        actor_user_id:
          description: ID of the user whose action triggered the event.
          type: integer
        actor_user_name:
          description: First and last name of the user whose action triggered the
            event.
          type: string
        adc_id:
          type: integer
        app-name:
          description: "Name of the app involved in the event, if applicable."
          type: string
        app_id:
          description: "ID of the app involved in the event, if applicable."
          type: integer
        assumed_by_superadmin_or_reseller:
          type: integer
        assuming_acting_user_id:
          description: "ID of the user who assumed the role of the acting user to\
            \ trigger the event, if applicable."
          type: integer
        certificate_id:
          type: integer
        client_id:
          description: Client ID used to generate the access token that made the API
            call that generated the event.
          type: string
        created_at:
          description: ISO8601 Time and date at which the event was created. This
            value is autogenerated by OneLogin.
          type: string
        custom_message:
          description: More details about the event.
          type: string
        directory_sync_run_id:
          description: Directory sync run ID.
          type: integer
        error_description:
          description: "Provisioning error details, if applicable."
          type: string
        event_type_id:
          description: Type of event triggered.
          enum:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
          - 10
          - 11
          - 12
          - 13
          - 14
          - 15
          - 16
          - 17
          - 18
          - 19
          - 20
          - 21
          - 22
          - 23
          - 24
          - 25
          - 26
          - 27
          - 28
          - 29
          - 30
          - 31
          - 32
          - 33
          - 34
          - 35
          - 36
          - 37
          - 38
          - 39
          - 40
          - 41
          - 42
          - 43
          - 44
          - 45
          - 46
          - 47
          - 48
          - 49
          - 50
          - 51
          - 52
          - 53
          - 54
          - 55
          - 56
          - 57
          - 58
          - 59
          - 60
          - 61
          - 62
          - 63
          - 64
          - 65
          - 66
          - 67
          - 68
          - 69
          - 70
          - 71
          - 72
          - 73
          - 74
          - 75
          - 76
          - 77
          - 78
          - 79
          - 80
          - 81
          - 82
          - 83
          - 84
          - 85
          - 86
          - 87
          - 88
          - 89
          - 90
          - 91
          - 92
          - 95
          - 96
          - 100
          - 101
          - 102
          - 103
          - 104
          - 105
          - 106
          - 110
          - 111
          - 112
          - 113
          - 114
          - 115
          - 116
          - 117
          - 118
          - 119
          - 120
          - 121
          - 122
          - 123
          - 124
          - 125
          - 126
          - 127
          - 128
          - 129
          - 130
          - 131
          - 132
          - 133
          - 134
          - 135
          - 136
          - 137
          - 138
          - 139
          - 140
          - 141
          - 145
          - 146
          - 147
          - 148
          - 149
          - 150
          - 151
          - 152
          - 153
          - 154
          - 155
          - 156
          - 157
          - 158
          - 159
          - 160
          - 161
          - 162
          - 163
          - 164
          - 165
          - 166
          - 167
          - 168
          - 169
          - 170
          - 171
          - 172
          - 173
          - 174
          - 175
          - 176
          - 177
          - 178
          - 179
          - 180
          - 181
          - 182
          - 183
          - 184
          - 185
          - 186
          - 187
          - 188
          - 189
          - 190
          - 191
          - 192
          - 193
          - 194
          - 195
          - 196
          - 197
          - 198
          - 199
          - 200
          - 201
          - 202
          - 203
          - 204
          - 205
          - 206
          - 207
          - 208
          - 209
          - 210
          - 211
          - 212
          - 213
          - 214
          - 215
          - 216
          - 217
          - 218
          - 219
          - 220
          - 221
          - 222
          - 223
          - 224
          - 225
          - 226
          - 227
          - 228
          - 229
          - 230
          - 231
          - 232
          - 233
          - 234
          - 235
          - 236
          - 237
          - 238
          - 239
          - 240
          - 241
          - 242
          - 243
          - 244
          - 245
          - 246
          - 247
          - 248
          - 249
          - 250
          - 251
          - 252
          - 253
          - 254
          - 255
          - 291
          - 300
          - 301
          - 303
          - 304
          - 305
          - 306
          - 307
          - 330
          - 331
          - 332
          - 333
          - 334
          - 400
          - 401
          - 402
          - 410
          - 411
          - 412
          - 501
          - 502
          - 503
          - 510
          - 511
          - 512
          - 513
          - 514
          - 515
          - 516
          - 517
          - 518
          - 519
          - 520
          - 521
          - 522
          - 523
          - 524
          - 525
          - 526
          - 527
          - 528
          - 529
          - 530
          - 531
          - 532
          - 533
          - 534
          - 535
          - 536
          - 537
          - 538
          - 539
          - 540
          - 541
          - 542
          - 545
          - 546
          - 550
          - 551
          - 552
          - 553
          - 554
          - 555
          - 600
          - 601
          - 602
          - 700
          - 701
          - 702
          - 703
          - 704
          - 705
          - 706
          - 800
          - 801
          - 802
          - 803
          - 804
          - 805
          - 900
          - 901
          - 902
          - 903
          - 904
          - 905
          - 906
          - 907
          - 911
          - 912
          - 931
          - 932
          - 950
          - 1001
          - 1002
          - 1010
          - 1100
          - 1101
          - 1200
          - 1201
          - 1244
          - 1245
          - 1300
          - 1301
          - 1302
          - 1303
          - 1304
          - 1305
          - 1400
          - 1401
          - 1402
          - 1403
          - 1404
          - 1405
          - 1406
          - 1407
          - 1408
          - 1409
          - 1410
          - 1411
          - 1412
          - 1413
          - 1414
          - 1415
          - 1416
          - 1417
          - 1418
          - 1419
          - 1420
          - 1421
          - 1422
          - 1423
          - 1424
          - 1500
          - 1501
          - 1502
          - 1503
          - 1504
          - 1505
          - 1506
          - 1507
          - 1508
          - 1509
          - 1510
          - 1511
          - 1512
          - 1513
          - 1514
          - 1600
          - 1601
          - 1602
          - 1603
          - 1604
          - 1605
          - 1606
          - 1607
          - 1608
          - 1609
          - 1700
          - 1701
          - 1702
          - 1801
          - 1802
          - 1900
          - 1901
          - 1902
          - 1903
          - 1904
          - 1905
          - 2000
          - 2001
          - 2002
          - 2003
          - 2004
          - 2005
          - 2006
          - 2007
          - 2008
          - 2009
          - 2010
          - 2011
          - 2012
          - 2013
          - 2014
          - 2015
          - 2016
          - 2017
          - 2018
          - 2100
          - 2101
          - 2102
          - 2103
          - 2104
          - 2105
          - 2106
          - 2107
          - 2108
          - 2109
          - 2110
          - 2111
          - 2112
          - 2113
          - 2114
          - 2201
          - 2202
          - 2203
          - 2204
          - 3000
          - 3001
          - 3002
          - 3003
          - 3004
          - 3005
          - 3006
          - 3007
          - 3008
          - 3009
          - 3010
          - 3011
          - 3012
          - 3013
          - 3014
          - 3015
          - 3016
          - 3017
          - 3018
          - 3019
          - 3020
          - 3021
          - 3022
          - 3023
          - 3024
          - 3025
          - 3026
          - 3027
          - 3028
          - 9000
          - 9001
          - 9002
          - 9003
          - 9004
          - 9005
          - 9006
          - 9007
          - 9008
          - 9009
          - 9010
          - 9011
          - 9012
          - 9013
          - 9014
          - 9015
          - 9016
          - 9017
          - 9018
          - 9019
          - 9020
          - 9021
          - 9022
          - 9023
          - 9024
          - 9025
          - 9026
          - 9027
          - 9028
          - 9029
          - 9030
          - 9031
          - 9032
          - 9033
          - 9034
          - 9035
          - 9036
          - 9037
          - 9038
          - 9039
          - 9040
          - 9041
          - 9042
          - 9043
          - 9044
          - 9045
          - 9046
          - 9047
          - 9048
          - 9049
          - 9050
          - 9051
          - 9052
          - 9053
          - 9054
          - 9055
          - 9056
          - 9057
          - 9058
          - 9059
          type: integer
        group-name:
          description: Name of a group involved in the event.
          type: string
        group_id:
          description: ID of a group involved in the event.
          type: integer
        id:
          description: Event's unique ID in OneLogin. Autogenerated by OneLogin.
          type: integer
        ipaddr:
          description: IP address of the machine used to trigger the event.
          type: string
        mapping_id:
          type: integer
        notes:
          description: More details about the event.
          type: string
        object_id:
          type: integer
        otp_device_id:
          description: ID of a device involved in the event.
          type: integer
        otp_device_name:
          description: Name of a device involved in the event.
          type: string
        param:
          type: string
        policy_id:
          description: ID of the policy involved in the event.
          type: integer
        policy_name:
          description: Name of the policy involved in the event.
          type: string
        policy_type:
          type: string
        privilege_id:
          type: integer
        proxy_ip:
          type: string
        radius_config_id:
          type: integer
        resolved_at:
          type: string
        resource_type_id:
          description: "ID of the resource (user, role, group, and so forth) associated\
            \ with the event."
          type: integer
        risk_cookie_id:
          description: Identifier for risk cookie
          type: string
        risk_reasons:
          type: string
        risk_score:
          type: integer
        role_id:
          description: ID of a role involved in the event.
          type: integer
        role_name:
          description: Name of a role involved in the event.
          type: string
        service_directory_id:
          type: integer
        solved:
          type: boolean
        trusted_idp_id:
          type: integer
        user_field_id:
          type: integer
        user_id:
          description: ID of the user that was acted upon to trigger the event.
          type: integer
        user_name:
          description: Name of the user that was acted upon to trigger the event.
          type: string
      type: object
    fp:
      description: Set to the value of the __tdli_fp cookie.
      type: string
    generic-app:
      additionalProperties: true
      example:
        icon_url: /images/missing_connector_icon/square/old_original.png
        visible: true
        notes: This app is in beta.
        policy_id: 0
        allow_assumed_signin: false
        description: description
        created_at: 2018-04-12T21:50:42Z
        role_ids:
        - 192513
        auth_method: 8
        tab_id: 196885
        enforcement_point:
          context_root: /
          resources:
          - resource_id: 809
            conditions: ""
            is_path_regex: false
            permissions: allow
            require_auth: false
            path: /
          landing_page: ""
          require_sitewide_authentication: false
          token: b491c647f5e0cff854ad606722ac98342b4b0882
          target: ""
          vhost: ""
          permissions: allow
          session_expiry_fixed:
            value: 30
            unit: 1
          case_sensitive: false
          use_target_host_header: false
          conditions: ""
          session_expiry_inactivity:
            value: 30
            unit: 1
        updated_at: 2019-05-16T19:20:34Z
        name: A Sample App
        connector_id: 108419
        provisioning:
          enabled: true
        id: 775664
        parameters:
          include_in_saml_assertion: true
          user_attribute_macros: user_attribute_macros
          user_attribute_mappings: user_attribute_mappings
          label: label
      properties:
        id:
          description: Apps unique ID in OneLogin.
          example: 775664
          readOnly: true
          type: integer
        name:
          description: The name of the app.
          example: A Sample App
          type: string
        visible:
          description: Indicates if the app is visible in the OneLogin portal.
          example: true
          type: boolean
        description:
          description: Freeform description of the app.
          type: string
        notes:
          description: Freeform notes about the app.
          example: This app is in beta.
          type: string
        icon_url:
          description: A link to the apps icon url
          example: /images/missing_connector_icon/square/old_original.png
          type: string
        auth_method:
          $ref: '#/components/schemas/auth_method'
        policy_id:
          description: The security policy assigned to the app.
          type: integer
        allow_assumed_signin:
          description: Indicates whether or not administrators can access the app
            as a user that they have assumed control over.
          example: false
          type: boolean
        tab_id:
          description: ID of the OneLogin portal tab that the app is assigned to.
          example: 196885
          type: integer
        connector_id:
          description: ID of the connector to base the app from.
          example: 108419
          type: integer
        created_at:
          description: the date the app was created
          example: 2018-04-12T21:50:42Z
          type: string
        updated_at:
          description: the date the app was last updated
          example: 2019-05-16T19:20:34Z
          type: string
        role_ids:
          description: List of Role IDs that are assigned to the app. On App Create
            or Update the entire array is replaced with the values provided.
          example:
          - 192513
          items:
            description: Role ID
            type: integer
          type: array
        provisioning:
          $ref: '#/components/schemas/generic_app_provisioning'
        parameters:
          $ref: '#/components/schemas/app_parameters'
        enforcement_point:
          $ref: '#/components/schemas/enforcement_point'
      type: object
    group:
      example:
        reference: "null"
        name: group.security.policy.default
        id: 425741
      properties:
        id:
          description: Group's unique Onelogin ID
          example: 425741
          type: integer
        name:
          description: Group name
          example: group.security.policy.default
          type: string
        reference:
          description: Deprecated. Will always show the attribute nil="true".
          example: "null"
          type: string
      type: object
    id:
      type: integer
    ip:
      description: The IP address of the User's request.
      type: string
    locale:
      properties:
        language:
          description: locale string
          format: "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$"
          type: string
        is_default:
          description: indicator if language is default
          type: boolean
      type: object
    mapping:
      example:
        name: name
        match: all
        id: 0
        position: 6
        conditions:
        - source: last_login
          value: "90"
          operator: '>'
        - source: last_login
          value: "90"
          operator: '>'
        actions:
        - action: action
          value:
          - "2"
          - "2"
        - action: action
          value:
          - "2"
          - "2"
        enabled: true
      properties:
        id:
          type: integer
        name:
          description: The name of the mapping.
          type: string
        enabled:
          description: Indicates if the mapping is enabled or not.
          type: boolean
        match:
          description: Indicates how conditions should be matched.
          enum:
          - all
          - any
          type: string
        position:
          description: Indicates the order of the mapping. When `null` this will default
            to last position.
          type: integer
        conditions:
          description: An array of conditions that the user must meet in order for
            the mapping to be applied.
          items:
            $ref: '#/components/schemas/condition'
          type: array
        actions:
          description: An array of actions that will be applied to the users that
            are matched by the conditions.
          items:
            $ref: '#/components/schemas/action_obj'
          type: array
      required:
      - actions
      - conditions
      - enabled
      - match
      - name
      - position
      type: object
    message_template:
      example:
        template: null
        account_id: 118462
        updated_at: 2021-11-24T21:25:29.480Z
        id: 544880
        type: email_forgot_password
        locale: en
        template_class: email_template
        brand_id: 5
      properties:
        id:
          example: 544880
          readOnly: true
          type: integer
        account_id:
          example: 118462
          readOnly: true
          type: integer
        type:
          description: "Template type that describes the source (sms, voice, email)\
            \ and purpose (registration, invite, etc)"
          enum:
          - email_forgot_password
          - email_code_registration
          - email_code_login_verification
          - email_code_app_verification
          - email_code_pw_reset_verification
          - email_magiclink_registration
          - email_magiclink_login_verification
          - email_magiclink_app_verification
          - email_magiclink_pw_reset_verification
          - sms_registration
          - sms_login_verification
          - sms_app_verification
          - sms_pw_reset_verification
          type: string
        locale:
          description: "The 2 character language locale for the template. e.g. en\
            \ = English, es = Spanish"
          example: en
          pattern: "^[a-z]{2}$"
          type: string
        template:
          $ref: '#/components/schemas/message_template_template'
        template_class:
          example: email_template
          readOnly: true
          type: string
        updated_at:
          description: Last time template was updated
          example: 2021-11-24T21:25:29.480Z
          readOnly: true
          type: string
        brand_id:
          description: brand id number
          example: 5
          readOnly: true
          type: integer
      required:
      - locale
      - template
      - type
      type: object
    oauth_token:
      example:
        access_token: xx508xx63817x752xx74004x30705xx92x58349x5x78f5xx34xxxxx51
        refresh_token: deprecated
        account_id: 555555
        created_at: 2015-11-11T03:36:18.714Z
        token_type: bearer
        expires_in: 36000
      properties:
        access_token:
          description: Provides the requested access token. You can use this token
            to call our resource APIs.
          example: xx508xx63817x752xx74004x30705xx92x58349x5x78f5xx34xxxxx51
          type: string
        created_at:
          description: Time at which the access token was generated.
          example: 2015-11-11T03:36:18.714Z
          type: string
        expires_in:
          description: |-
            Indicates that the generated access token expires in 36,000 seconds, 600 minutes, or 10 hours.
            An expired access token cannot be used to make resource API calls, but it can still be used along with its associated refresh token to call the Refresh Tokens v2 API.
          example: 36000
          type: integer
        refresh_token:
          description: deprecated No longer in use
          example: deprecated
          type: string
        token_type:
          description: Indicates that the generated access token is a bearer token.
          example: bearer
          type: string
        account_id:
          description: Account ID associated with the API credentials used to generate
            the token.
          example: 555555
          type: integer
      type: object
    oidc_app:
      allOf:
      - $ref: '#/components/schemas/generic-app'
      - $ref: '#/components/schemas/oidc_app_allOf'
    privilege:
      example:
        name: User Administrator
        description: Can administer users
        id: 2c963197-bee2-4607-abc0-4786f1bfa55a
        privilege:
          Version: 2018-05-18
          Statement:
          - Action:
            - Users:Delete
            - Users:ResetPassword
            - Users:Unlock
            - Users:Get
            Scope:
            - '*'
            - '*'
            Effect: Allow
          - Action:
            - Users:Delete
            - Users:ResetPassword
            - Users:Unlock
            - Users:Get
            Scope:
            - '*'
            - '*'
            Effect: Allow
      properties:
        id:
          example: 2c963197-bee2-4607-abc0-4786f1bfa55a
          type: string
        name:
          example: User Administrator
          type: string
        description:
          example: Can administer users
          type: string
        privilege:
          $ref: '#/components/schemas/privilege_privilege'
      required:
      - name
      - privilege
      type: object
    rate_limit:
      example:
        X-RateLimit-Remaining: 4988
        X-RateLimit-Reset: 832
        X-RateLimit-Limit: 5000
      properties:
        X-RateLimit-Limit:
          description: Rate Limit Limit
          example: 5000
          type: integer
        X-RateLimit-Remaining:
          description: Rate Limit Remaining
          example: 4988
          type: integer
        X-RateLimit-Reset:
          description: Rate Limit Reset
          example: 832
          type: integer
      type: object
    request_brand:
      properties:
        enabled:
          default: false
          description: Indicates if the brand is enabled or not
          example: true
          type: boolean
        name:
          description: Brand’s name for humans. This isn’t related to subdomains.
          example: Acme Branding
          type: string
        custom_support_enabled:
          description: "Indicates if the custom support is enabled. If enabled, the\
            \ login page includes the ability to submit a support request."
          example: false
          type: boolean
        custom_color:
          description: Primary brand color
          example: '#1298b4'
          type: string
        custom_accent_color:
          description: Secondary brand color
          example: '#b60012'
          type: string
        custom_masking_color:
          description: Color for the masking layer above the background image of the
            branded login screen.
          example: '#beefed'
          type: string
        custom_masking_opacity:
          description: Opacity for the custom_masking_color.
          example: 40
          type: integer
        enable_custom_label_for_login_screen:
          description: Indicates if the custom Username/Email field label is enabled
            or not
          example: true
          type: boolean
        custom_label_text_for_login_screen:
          description: Custom label for the Username/Email field on the login screen.
            See example here.
          example: ACME Username or Email
          type: string
        login_instruction_title:
          description: Link text to show login instruction screen.
          example: ACME Login Instructions
          type: string
        login_instruction:
          description: "Text for the login instruction screen, styled in Markdown."
          example: "To login, enter your ACME Username or Email. Reach out to help.desk@acme.org\
            \ if you have trouble logging in."
          type: string
        hide_onelogin_footer:
          description: Indicates if the OneLogin footer will appear at the bottom
            of the login page.
          example: true
          type: boolean
        mfa_enrollment_message:
          description: Text that replaces the default text displayed on the initial
            screen of the MFA Registration.
          example: You must register with the OneLogin Protect app in order to login
          type: string
        background:
          description: "Base64 encoded image data (JPG/PNG, <5MB)"
          example: /9j/4AAQSkZJRgAB...J3a+IvMu7D8T/9k=
          type: string
        logo:
          description: "Base64 encoded image data (PNG, <1MB)"
          example: iVBORw0KGgoAAAAN...AABJRU5ErkJggg==
          type: string
      required:
      - name
      type: object
    risk_device:
      description: Information about the device being used.
      properties:
        id:
          description: This device's unique identifier
          type: string
      type: object
    risk_rule:
      example:
        name: name
        description: description
        id: id
        filters:
        - filters
        - filters
        source:
          name: name
          id: id
        type: blacklist
        target: location.ip
      properties:
        id:
          type: string
        name:
          description: The name of this rule
          type: string
        description:
          type: string
        type:
          description: The type parameter specifies the type of rule that will be
            created.
          enum:
          - blacklist
          - whitelist
          type: string
        target:
          description: The target parameter that will be used when evaluating the
            rule against an incoming event.
          enum:
          - location.ip
          - location.address.country_iso_code
          type: string
        filters:
          description: A list of IP addresses or country codes or names to evaluate
            against each event.
          items:
            type: string
          type: array
        source:
          $ref: '#/components/schemas/source'
      type: object
    risk_user:
      description: An Object containing User details.
      properties:
        id:
          description: A unique identifier for the user.
          type: string
        name:
          description: A name for the user.
          type: string
        authenticated:
          default: false
          description: Indicates if the metadata supplied in this event should be
            considered as trusted for the user.
          type: boolean
      required:
      - id
      type: object
    role:
      example:
        name: name
        id: 0
        users:
        - 6
        - 6
        admins:
        - 1
        - 1
        apps:
        - 234
        - 567
        - 777
      properties:
        id:
          description: Role ID
          readOnly: true
          type: integer
        name:
          description: The name of the role.
          type: string
        apps:
          description: A list of app IDs that will be assigned to the role.
          example:
          - 234
          - 567
          - 777
          items:
            $ref: '#/components/schemas/id'
          type: array
        users:
          description: A list of user IDs to assign to the role.
          items:
            type: integer
          type: array
        admins:
          description: A list of user IDs to assign as role administrators.
          items:
            type: integer
          type: array
      required:
      - name
      type: object
    app_rule:
      example:
        name: My first app rule
        match: all
        id: 196670
        position: 1
        conditions:
        - source: last_login
          value: "90"
          operator: '>'
        - source: last_login
          value: "90"
          operator: '>'
        actions:
        - action: action
          value:
          - "2"
          - "2"
        - action: action
          value:
          - "2"
          - "2"
        enabled: true
      properties:
        id:
          description: App Rule ID
          example: 196670
          type: integer
        name:
          description: Rule Name
          example: My first app rule
          type: string
        match:
          description: Indicates how conditions should be matched.
          enum:
          - all
          - any
          type: string
        enabled:
          description: Indicates if the rule is enabled or not.
          type: boolean
        position:
          description: Indicates the order of the rule. When `null` this will default
            to last position.
          example: 1
          type: integer
        conditions:
          description: An array of conditions that the user must meet in order for
            the rule to be applied.
          items:
            $ref: '#/components/schemas/condition'
          type: array
        actions:
          items:
            $ref: '#/components/schemas/action_obj'
          type: array
      type: object
    saml_app:
      allOf:
      - $ref: '#/components/schemas/generic-app'
      - $ref: '#/components/schemas/saml_app_allOf'
    saml_assert:
      example:
        username_or_email: hazel.zhang@onelogin.com
        password: P@ssw0rd
        app_id: "16819324"
        subdomain: exampleOrganization
        ip_address: 174.66.77.24
      properties:
        username_or_email:
          description: Set this to the username or email of the OneLogin user accessing
            the app for which you want to generate a SAML token.
          type: string
        password:
          description: Password of the OneLogin user accessing the app for which you
            want to generate a SAML token.
          type: string
        app_id:
          description: App ID of the app for which you want to generate a SAML token.
            This is the app ID in OneLogin.
          type: string
        subdomain:
          description: Set to the subdomain of the OneLogin user accessing the app
            for which you want to generate a SAML token.
          type: string
        ip_address:
          description: "If you are using this API in a scenario in which MFA is required\
            \ and you’ll need to be able to honor IP address whitelisting defined\
            \ in MFA policies, provide this parameter and set its value to the whitelisted\
            \ IP address that needs to be bypassed."
          type: string
      required:
      - app_id
      - password
      - subdomain
      - username_or_email
      type: object
    saml_factor:
      properties:
        app_id:
          description: App ID of the app for which you want to generate a SAML token.
            This is the app ID in OneLogin.
          example: "1657651"
          type: string
        device_id:
          description: Provide the MFA device_id you are submitting for verification.
            The device_id is supplied by the Generate SAML Assertion API.
          example: "1657651"
          type: string
        state_token:
          description: Provide the state_token associated with the MFA device_id you
            are submitting for verification. The state_token is supplied by the Generate
            SAML Assertion API.
          example: 11x0x1x16x1x3259xxxx0x59xx6xxxx670x61x45xxxxx
          type: string
        otp_token:
          description: "Provide the OTP value for the MFA factor you are submitting\
            \ for verification. For some MFA factors; such as OneLogin OTP SMS, which\
            \ requires the user to request an OTP; the otp_token value is not required,\
            \ and if not included, returns a 200 OK - Pending result. You’ll make\
            \ a subsequent Verify Factor API call to provide the otp_token value once\
            \ it has been provided to the user."
          example: "999999"
          type: string
        do_not_notify:
          description: "When verifying MFA via Protect Push, set this to true to stop\
            \ additional push notifications being sent to the OneLogin Protect device."
          example: false
          type: boolean
      required:
      - app_id
      - device_id
      - state_token
      type: object
    scope:
      example:
        description: Read some contacts
        id: 25
        value: read:contacts
      properties:
        id:
          description: Unique Scope ID value
          example: 25
          type: integer
        value:
          description: Scope Value
          example: read:contacts
          type: string
        description:
          description: Description of the scope
          example: Read some contacts
          type: string
      type: object
    session:
      description: "A dictionary of extra information that provides useful context\
        \ about the session, for example the session ID, or some cookie information."
      properties:
        id:
          description: "If you use a database to track sessions, you can send us the\
            \ session ID."
          type: string
      type: object
    source:
      description: "Used for targeting custom rules based on a group of people, customers,\
        \ accounts, or even a single user."
      example:
        name: name
        id: id
      properties:
        id:
          description: A unique id that represents the source of the event.
          type: string
        name:
          description: The name of the source
          type: string
      type: object
    token_claim:
      example:
        default_values: default_values
        provisioned_entitlements: true
        attribute_transformations: attribute_transformations
        values: []
        user_attribute_macros: user_attribute_macros
        skip_if_blank: true
        id: 320780
        label: email_address
        user_attribute_mappings: email
      properties:
        id:
          description: The unique ID of the claim.
          example: 320780
          type: integer
        label:
          description: The UI label for the claims.
          example: email_address
          type: string
        user_attribute_mappings:
          description: A user attribute to map values from.
          example: email
          type: string
        user_attribute_macros:
          description: When `user_attribute_mappings` is set to `_macro_` this macro
            will be used to assign the claims value.
          type: string
        attribute_transformations:
          description: The type of transformation to perform on multi valued attributes.
          type: string
        skip_if_blank:
          description: not used
          type: boolean
        values:
          description: Relates to Rules/Entitlements. Not supported yet.
          example: []
          items:
            type: string
          type: array
        default_values:
          description: Relates to Rules/Entitlements. Not supported yet.
          type: string
        provisioned_entitlements:
          description: Relates to Rules/Entitlements. Not supported yet.
          type: boolean
      type: object
    user:
      example:
        firstname: firstname
        password_confirmation: password_confirmation
        created_at: created_at
        external_id: external_id
        locked_until: locked_until
        title: title
        invitation_sent_at: invitation_sent_at
        role_ids:
        - 1
        - 1
        password: password
        updated_at: updated_at
        password_algorithm: password_algorithm
        company: company
        id: 0
        state: 5
        directory_id: 2
        department: department
        member_of: member_of
        email: email
        manager_ad_id: manager_ad_id
        password_changed_at: password_changed_at
        salt: salt
        last_login: last_login
        invalid_login_attempts: 9
        preferred_locale_code: preferred_locale_code
        manager_user_id: manager_user_id
        lastname: lastname
        samaccountname: samaccountname
        activated_at: activated_at
        userprincipalname: userprincipalname
        group_id: 6
        phone: phone
        distinguished_name: distinguished_name
        trusted_idp_id: 7
        comment: comment
        username: username
        status: 5
      properties:
        id:
          type: integer
        username:
          description: A username for the user.
          type: string
        email:
          description: A valid email for the user.
          type: string
        firstname:
          description: The user's first name.
          type: string
        lastname:
          description: The user's last name.
          type: string
        title:
          description: The user's job title.
          type: string
        department:
          description: The user's department.
          type: string
        company:
          description: The user's company.
          type: string
        comment:
          description: Free text related to the user.
          type: string
        group_id:
          description: The ID of the Group in OneLogin that the user is assigned to.
          type: integer
        role_ids:
          description: A list of OneLogin Role IDs of the user
          items:
            type: integer
          minLength: 1
          type: array
        phone:
          description: The E.164 format phone number for a user.
          type: string
        state:
          enum:
          - 0
          - 1
          - 2
          - 3
          type: integer
        status:
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 7
          - 8
          type: integer
        directory_id:
          description: The ID of the OneLogin Directory of the user.
          type: integer
        trusted_idp_id:
          description: The ID of the OneLogin Trusted IDP of the user.
          type: integer
        manager_ad_id:
          description: The ID of the user's manager in Active Directory.
          type: string
        manager_user_id:
          description: The OneLogin User ID for the user's manager.
          type: string
        samaccountname:
          description: The user's Active Directory username.
          type: string
        member_of:
          description: The user's directory membership.
          type: string
        userprincipalname:
          description: The principle name of the user.
          type: string
        distinguished_name:
          description: The distinguished name of the user.
          type: string
        external_id:
          description: The ID of the user in an external directory.
          type: string
        activated_at:
          type: string
        last_login:
          type: string
        invitation_sent_at:
          type: string
        updated_at:
          type: string
        preferred_locale_code:
          type: string
        created_at:
          type: string
        invalid_login_attempts:
          type: integer
        locked_until:
          type: string
        password_changed_at:
          type: string
        password:
          description: The password to set for a user.
          type: string
        password_confirmation:
          description: Required if the password is being set.
          type: string
        password_algorithm:
          description: Use this when importing a password that's already hashed. Prepend
            the salt value to the cleartext password value before SHA-256-encoding
            it
          type: string
        salt:
          description: The salt value used with the password_algorithm.
          type: string
      type: object
    user_agent:
      description: The user agent of the User's request.
      type: string
    verb:
      description: Verbs are used to distinguish between different types of events.
        Where possible use one of the following verbs to describe the event. Alternately
        you can create custom verbs to describe other types of actions within your
        application.
      enum:
      - log-in
      - log-out
      - log-in-denied
      - authentication-challenge
      - authentication-challenge-pass
      - authentication-challenge-fail
      type: string
    sso_oidc:
      properties:
        client_id:
          description: "OIDC: The OpenId Connect Client Id.  Note that client_secret\
            \ is only returned after Creating an App"
          example: 78d1d040-20c9-0136-5146-067351775fae92920
          type: string
      type: object
    sso_saml:
      properties:
        metadata_url:
          example: https://app.onelogin.com/saml/metadata/5772393d-2ad3-47d6-a64f-2339b1028291
          type: string
        acs_url:
          example: https://sharkbytes.onelogin.com/trust/saml2/http-post/sso/928532
          type: string
        sls_url:
          example: https://sharkbytes.onelogin.com/trust/saml2/http-redirect/slo/928532
          type: string
        issuer:
          example: https://app.onelogin.com/saml/metadata/5772393d-2ad3-47d6-a64f-2339b1028291
          type: string
        certificate:
          $ref: '#/components/schemas/sso_saml_certificate'
      type: object
    rule_condition:
      example:
        name: Administrators
        value: "272445"
      properties:
        name:
          description: Name of the operator
          example: Administrators
          type: string
        value:
          description: The condition operator value to use when creating or updating
            rules.
          example: "272445"
          type: string
      type: object
    rule_action:
      example:
        name: Set Role
        value: add_role
      properties:
        name:
          description: Name of the Action
          example: Set Role
          type: string
        value:
          description: The unique identifier of the action. This should be used when
            defining actions for a User Mapping.
          example: add_role
          type: string
      type: object
    otp_device:
      properties:
        factor_id:
          description: The identifier of the factor to enroll the user with.
          example: 16282
          readOnly: true
          type: integer
        display_name:
          description: A name for the users device
          example: Rich's Phone
          type: string
        number:
          description: The phone number of the user in E.164 format.
          example: +1xxxxxxxxxx
          type: string
        verified:
          description: "Defaults to false. Some factors like SMS or Voice require\
            \ that a user recieve a token and then that token is supplied to the Verify\
            \ endpoint before the device is considered active.\nYou can set verfied\
            \ to `true` which indicates the the users phone number is pre verified\
            \ and the device can be immediately activated.           "
          type: boolean
      required:
      - display_name
      - factor_id
      - number
      type: object
    hook_envvar:
      example:
        updated_at: updated_at
        name: name
        created_at: created_at
        id: id
        value: value
      properties:
        id:
          description: A unique identifier for the Hook Environment Variable
          readOnly: true
          type: string
        name:
          description: The name of the environment variable.
          type: string
        created_at:
          description: The ISO8601 formatted date that the environment variable was
            created.
          type: string
        updated_at:
          description: The ISO8601 formatted date that the environment variable was
            last updated.
          type: string
        value:
          description: The secret value that will be encrypted at rest and injected
            in applicable hook functions at run time.
          type: string
          writeOnly: true
      required:
      - name
      - value
      type: object
    hook_log:
      example:
        correlation_id: correlation_id
        created_at: created_at
        request_id: request_id
        events:
        - events
        - events
      properties:
        request_id:
          type: string
        correlation_id:
          type: string
        created_at:
          type: string
        events:
          items:
            type: string
          type: array
      type: object
    hook_status:
      properties:
        name:
          description: responses status nam
          example: success
          type: string
        message:
          description: your operation was successful
          type: string
      type: object
    hook:
      example:
        runtime: runtime
        created_at: created_at
        type: type
        packages:
          key: packages
        timeout: 0
        env_vars:
        - env_vars
        - env_vars
        retries: 2
        updated_at: updated_at
        context_version: context_version
        function: function
        options:
          risk_enabled: true
          mfa_device_info_enabled: true
          location_enabled: true
        disabled: true
        id: id
        conditions:
        - source: last_login
          value: "90"
          operator: '>'
        - source: last_login
          value: "90"
          operator: '>'
        status: ready
      properties:
        id:
          description: The Hook unique ID in OneLogin.
          type: string
        type:
          description: A string describing the type of hook. e.g. `pre-authentication`
          type: string
        disabled:
          default: true
          description: Boolean to enable or disable the hook. Disabled hooks will
            not run.
          type: boolean
        timeout:
          default: 1
          description: The number of seconds to allow the hook function to run before
            before timing out. Maximum timeout varies based on the type of hook.
          type: integer
        env_vars:
          description: Environment Variable objects that will be available via process.env.ENV_VAR_NAME
            in the hook code.
          items:
            type: string
          type: array
        runtime:
          description: The Smart Hooks supported Node.js version to execute this hook
            with.
          type: string
        retries:
          default: 0
          description: Number of retries if execution fails.
          maximum: 4
          type: integer
        packages:
          additionalProperties:
            type: string
          description: An object containing NPM packages that are bundled with the
            hook function.
          type: object
        function:
          description: A base64 encoded string containing the javascript function
            code.
          type: string
        context_version:
          description: The semantic version of the content that will be injected into
            this hook.
          type: string
        status:
          description: String describing the state of the hook function. When a hook
            is ready and disabled is false it will be executed.
          enum:
          - ready
          - create-queued
          - create-running
          - create-failed
          - update-queued
          - update-running
          - update-failed
          type: string
        options:
          $ref: '#/components/schemas/hook_options'
        conditions:
          description: An array of objects that let you limit the execution of a hook
            to users in specific roles.
          items:
            $ref: '#/components/schemas/condition'
          type: array
        created_at:
          description: ISO8601 format date that they hook function was created.
          type: string
        updated_at:
          description: ISO8601 format date that they hook function was last updated.
          type: string
      required:
      - disabled
      - env_vars
      - function
      - packages
      - retries
      - runtime
      - timeout
      - type
      type: object
    generateToken_request:
      properties:
        grant_type:
          default: client_credentials
          description: Set to client_credentials.
          type: string
      required:
      - grant_type
      type: object
    revokeTokens_request:
      properties:
        access_token:
          description: |-
            Set to the access token you want to revoke.
            This access token must have been generated using the client_id and client_secret provided in the Authorization header.
          example: xx508xx63817x752xx74004x30705xx92x58349x5x78f5xx34x8x614xxxx1451
          type: string
      required:
      - access_token
      type: object
    getRateLimit_200_response:
      example:
        data:
          X-RateLimit-Remaining: 4988
          X-RateLimit-Reset: 832
          X-RateLimit-Limit: 5000
        status:
          code: 200
          error: false
          type: Success
          message: Success
      properties:
        status:
          $ref: '#/components/schemas/Error'
        data:
          $ref: '#/components/schemas/rate_limit'
      type: object
    addClientApp_request:
      properties:
        app_id:
          description: The ID of the OpenId Connect app to allow access through.
          example: 1026152
          type: integer
        scopes:
          description: An array of Scope IDs that represent scopes the app can request
          example:
          - 31
          - 24
          items:
            type: integer
          type: array
      type: object
    addClientApp_201_response:
      example:
        api_auth_id: 1022697
        app_id: 909021
      properties:
        app_id:
          example: 909021
          type: integer
        api_auth_id:
          example: 1022697
          type: integer
      type: object
    updateClientApp_request:
      properties:
        scopes:
          description: An array of Scope IDs the scopes the app can request
          example:
          - 123
          - 456
          items:
            type: integer
          type: array
      type: object
    getEvents_200_response_pagination:
      example:
        after_cursor: xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
        previous_link: "null"
        before_cursor: "null"
        next_link: https://your-api-subdomain.onelogin.com/api/1/events?after_cursor=xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
      properties:
        before_cursor:
          example: "null"
          type: string
        after_cursor:
          example: xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
          type: string
        previous_link:
          example: "null"
          type: string
        next_link:
          example: https://your-api-subdomain.onelogin.com/api/1/events?after_cursor=xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
          type: string
      type: object
    getEvents_200_response:
      example:
        pagination:
          after_cursor: xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
          previous_link: "null"
          before_cursor: "null"
          next_link: https://your-api-subdomain.onelogin.com/api/1/events?after_cursor=xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
        data:
        - privilege_id: 6
          risk_reasons: risk_reasons
          notes: notes
          assumed_by_superadmin_or_reseller: 5
          policy_id: 1
          service_directory_id: 9
          directory_sync_run_id: 9
          user_name: user_name
          risk_cookie_id: risk_cookie_id
          created_at: created_at
          solved: true
          client_id: client_id
          event_type_id: 3
          otp_device_id: 1
          actor_user_id: 6
          certificate_id: 7
          resource_type_id: 1
          actor_user_name: actor_user_name
          param: param
          role_id: 5
          error_description: error_description
          user_field_id: 6
          id: 4
          ipaddr: ipaddr
          app_id: 5
          assuming_acting_user_id: 2
          proxy_ip: proxy_ip
          risk_score: 4
          otp_device_name: otp_device_name
          policy_name: policy_name
          object_id: 1
          adc_id: 1
          app-name: app-name
          role_name: role_name
          custom_message: custom_message
          policy_type: policy_type
          account_id: 0
          group-name: group-name
          group_id: 2
          user_id: 8
          resolved_at: resolved_at
          mapping_id: 7
          radius_config_id: 7
          trusted_idp_id: 9
          actor_system: actor_system
        - privilege_id: 6
          risk_reasons: risk_reasons
          notes: notes
          assumed_by_superadmin_or_reseller: 5
          policy_id: 1
          service_directory_id: 9
          directory_sync_run_id: 9
          user_name: user_name
          risk_cookie_id: risk_cookie_id
          created_at: created_at
          solved: true
          client_id: client_id
          event_type_id: 3
          otp_device_id: 1
          actor_user_id: 6
          certificate_id: 7
          resource_type_id: 1
          actor_user_name: actor_user_name
          param: param
          role_id: 5
          error_description: error_description
          user_field_id: 6
          id: 4
          ipaddr: ipaddr
          app_id: 5
          assuming_acting_user_id: 2
          proxy_ip: proxy_ip
          risk_score: 4
          otp_device_name: otp_device_name
          policy_name: policy_name
          object_id: 1
          adc_id: 1
          app-name: app-name
          role_name: role_name
          custom_message: custom_message
          policy_type: policy_type
          account_id: 0
          group-name: group-name
          group_id: 2
          user_id: 8
          resolved_at: resolved_at
          mapping_id: 7
          radius_config_id: 7
          trusted_idp_id: 9
          actor_system: actor_system
        status:
          code: 200
          error: false
          type: Success
          message: Success
      properties:
        status:
          $ref: '#/components/schemas/Error'
        pagination:
          $ref: '#/components/schemas/getEvents_200_response_pagination'
        data:
          items:
            $ref: '#/components/schemas/event'
          type: array
      type: object
    getEventById_200_response:
      example:
        data:
          privilege_id: 6
          risk_reasons: risk_reasons
          notes: notes
          assumed_by_superadmin_or_reseller: 5
          policy_id: 1
          service_directory_id: 9
          directory_sync_run_id: 9
          user_name: user_name
          risk_cookie_id: risk_cookie_id
          created_at: created_at
          solved: true
          client_id: client_id
          event_type_id: 3
          otp_device_id: 1
          actor_user_id: 6
          certificate_id: 7
          resource_type_id: 1
          actor_user_name: actor_user_name
          param: param
          role_id: 5
          error_description: error_description
          user_field_id: 6
          id: 4
          ipaddr: ipaddr
          app_id: 5
          assuming_acting_user_id: 2
          proxy_ip: proxy_ip
          risk_score: 4
          otp_device_name: otp_device_name
          policy_name: policy_name
          object_id: 1
          adc_id: 1
          app-name: app-name
          role_name: role_name
          custom_message: custom_message
          policy_type: policy_type
          account_id: 0
          group-name: group-name
          group_id: 2
          user_id: 8
          resolved_at: resolved_at
          mapping_id: 7
          radius_config_id: 7
          trusted_idp_id: 9
          actor_system: actor_system
        status:
          code: 200
          error: false
          type: Success
          message: Success
      properties:
        status:
          $ref: '#/components/schemas/Error'
        data:
          $ref: '#/components/schemas/event'
      type: object
    getEventTypes_200_response_data_inner:
      example:
        name: APP_REMOVED_FROM_ROLE
        description: App %app% removed from role %role%
        id: 2
      properties:
        name:
          example: APP_REMOVED_FROM_ROLE
          type: string
        description:
          example: App %app% removed from role %role%
          type: string
        id:
          example: 2
          type: integer
      type: object
    getEventTypes_200_response:
      example:
        data:
        - name: APP_REMOVED_FROM_ROLE
          description: App %app% removed from role %role%
          id: 2
        - name: APP_REMOVED_FROM_ROLE
          description: App %app% removed from role %role%
          id: 2
        status:
          code: 200
          error: false
          type: Success
          message: Success
      properties:
        status:
          $ref: '#/components/schemas/Error'
        data:
          items:
            $ref: '#/components/schemas/getEventTypes_200_response_data_inner'
          type: array
      type: object
    getGroups_200_response:
      example:
        data:
        - reference: "null"
          name: group.security.policy.default
          id: 425741
        - reference: "null"
          name: group.security.policy.default
          id: 425741
        status:
          code: 200
          error: false
          type: Success
          message: Success
      properties:
        status:
          $ref: '#/components/schemas/Error'
        data:
          items:
            $ref: '#/components/schemas/group'
          type: array
      type: object
    getInviteLink_request:
      properties:
        email:
          description: Set to the user email address to generate an invite link. The
            value is case sensitive.
          example: jennifer.hasenfus@mycompany.com
          type: string
      type: object
    getInviteLink_200_response:
      example:
        data:
        - data
        - data
        status:
          code: 200
          error: false
          type: Success
          message: Success
      properties:
        status:
          $ref: '#/components/schemas/Error'
        data:
          description: Provides reset password link
          items:
            type: string
          type: array
      type: object
    sendInviteLink_request:
      properties:
        email:
          description: Set to the user email address to generate an invite link. The
            value is case sensitive.
          example: jennifer.hasenfus@mycompany.com
          type: string
        personal_email:
          description: "To send an invite email to a different address than the one\
            \ provided in email, provide it here. The invite link is sent to this\
            \ address instead."
          example: jennifer.hasenfus@mail.com
          type: string
      type: object
    sendInviteLink_200_response:
      example:
        status:
          code: 200
          error: false
          type: Success
          message: Success
      properties:
        status:
          $ref: '#/components/schemas/Error'
      type: object
    getUserApps_200_response_inner:
      example:
        icon_url: icon_url
        provisioning_enabled: true
        login_id: 6
        provisioning_state: unknown
        extension: true
        name: name
        provisioning_status: enabling
        id: 0
      properties:
        id:
          description: The App ID
          type: integer
        icon_url:
          description: A url for the icon that represents the app in the OneLogin
            portal
          type: string
        extension:
          description: Boolean that indicates if the OneLogin browser extension is
            required to launch this app.
          type: boolean
        login_id:
          description: Unqiue identifier for this user and app combination.
          type: integer
        name:
          description: The name of the app.
          type: string
        provisioning_status:
          enum:
          - enabling
          - disabling
          - enabling_pending_approval
          - disabling_pendding_approval
          - enabled
          - disabled
          - disabling_failed
          - enabling_failed
          type: string
        provisioning_state:
          description: If provisioning is enabled this indicates the state of provisioning
            for the given user.
          enum:
          - unknown
          - provisioning
          - modifying
          - deleting
          - provisioning_pending_approval
          - deleting_pending_approval
          - modifying_pending_approval
          - linking
          - provisioned
          - deleted
          - modifying_failed
          - provisioning_failed
          - deleting_failed
          - linking_failed
          - disabled
          - nonexistent
          - modifying_pending_approval_then_disabled
          type: string
        provisioning_enabled:
          description: Indicates if provisioning is enabled for this app.
          type: boolean
      type: object
    getUserRoles_200_response:
      example:
        data:
        - 0
        - 0
        status:
          code: 200
          error: false
          type: Success
          message: Success
      properties:
        status:
          $ref: '#/components/schemas/Error'
        data:
          description: List of Role IDs that are assigned to the User
          items:
            type: integer
          type: array
      type: object
    updatePasswordInsecure_request:
      properties:
        password:
          description: |-
            Set to the password value using cleartext.
            Hashes are never stored as cleartext. They are stored securely using cryptographic hash. OneLogin continuously upgrades the strength of the hash. Ensure that the value meets the password strength requirements set for the account.
          example: <password>
          type: string
        password_confirmation:
          description: Ensure that this value matches the password value exactly.
          example: <password_confirmation>
          type: string
        validate_policy:
          default: false
          description: Will passwords validate against the User Policy. Defaults to
            false.
          example: false
          type: boolean
      required:
      - password
      - password_confirmation
      type: object
    updatePasswordSecure_request:
      properties:
        password:
          description: |-
            Set to the password value using a SHA-256-encoded value. If you are including your own password_salt value in your request, prepend the salt value to the cleartext password value before SHA-256-encoding it.
            For example, if your salt value is hello and your cleartext password value is password, the value you need to SHA-256-encode is hellopassword. The resulting encoded value would be b1c788abac15390de987ad17b65ac73c9b475d428a51f245c645a442fddd078b.
            Note that the alpha characters in this has must all be lower case.
          example: xxxxx637aead4030a653f29dae62f1542d67484342c00627a65066e05c5f0
          type: string
        password_confirmation:
          description: This value must match the password value.
          example: xxxxx637aead4030a653f29dae62f1542d67484342c00627a65066e05c5f0
          type: string
        password_algorithm:
          description: Set to salt+sha256.
          example: salt+sha256
          type: string
        password_salt:
          description: |-
            Optional. If your password hash has been salted then you can provide the salt used in this param.
            This assumes that the salt was prepended to the password before doing the SHA256 hash.
            The API supports a salt value that is up to 40 characters long.
          example: 11xxxx1
          type: string
      required:
      - password
      - password_algorithm
      - password_confirmation
      type: object
    getCustomAttributes_200_response:
      example:
        data:
        - - alias
          - branch
        status:
          code: 200
          error: false
          type: Success
          message: Success
      properties:
        status:
          $ref: '#/components/schemas/Error'
        data:
          description: |-
            Provides a list of custom attribute fields (also known as custom user fields) that are available for your account.
            The values returned correspond to the values you provided in the Shortname field when you defined the custom user field.
            For details about defining custom user fields, see Custom User Fields.
          example:
          - - alias
            - branch
          items:
            items:
              type: string
            type: array
          type: array
      type: object
    getMFAFactors_200_response_data_auth_factors_inner:
      example:
        name: Onelogin SMS
        factor_id: 16282
      properties:
        name:
          description: "Official authentication factor name, as it appears to administrators\
            \ in OneLogin."
          example: Onelogin SMS
          type: string
        factor_id:
          description: Identifier for the factor which will be used for user enrollment
          example: 16282
          type: integer
    getMFAFactors_200_response_data:
      example:
        auth_factors:
        - name: Onelogin SMS
          factor_id: 16282
        - name: Onelogin SMS
          factor_id: 16282
      properties:
        auth_factors:
          items:
            $ref: '#/components/schemas/getMFAFactors_200_response_data_auth_factors_inner'
          type: array
      type: object
    getMFAFactors_200_response:
      example:
        data:
          auth_factors:
          - name: Onelogin SMS
            factor_id: 16282
          - name: Onelogin SMS
            factor_id: 16282
        status:
          code: 200
          error: false
          type: Success
          message: Success
      properties:
        status:
          $ref: '#/components/schemas/Error'
        data:
          $ref: '#/components/schemas/getMFAFactors_200_response_data'
      type: object
    lockAccountUser_request:
      properties:
        locked_until:
          description: |-
            Set to the number of minutes for which you want to lock the user account.
            Set to 0 if you want to lock the user account based on the Lock effective period set in the policy assigned to the user.
            If no policy is assigned to the user, setting this value to 0 will lock the user’s account until you unlock it
            Note that this value can not be less time that the Lock Effective Period specified on a user policy.
          example: 15
          type: integer
      required:
      - locked_until
      type: object
    getEnrolledFactors_200_response_data_otp_devices_inner:
      example:
        type_display_name: Onelogin SMS
        default: false
        needs_trigger: true
        active: true
        state_token: f2402de2b446abd86ea5aa1f79b3fa72b4befacd
        phone_number: +1xxxxxxxxxx
        auth_factor_name: Onelogin SMS
        id: 525509
        user_display_name: Rich's Phone
      properties:
        active:
          description: True = enabled (used successfully for authentication at least
            once). False = pending (registered but never used).
          example: true
          type: boolean
        default:
          description: True = is user’s default MFA device for OneLogin.
          example: false
          type: boolean
        state_token:
          description: A short lived token that is required to Verify the Factor.
            This token expires in 120 seconds.
          example: f2402de2b446abd86ea5aa1f79b3fa72b4befacd
          type: string
        auth_factor_name:
          description: "\"Official\" authentication factor name, as it appears to\
            \ administrators in OneLogin."
          example: Onelogin SMS
          type: string
        phone_number:
          description: "For OTP codes sent via SMS, the phone number receiving the\
            \ SMS message."
          example: +1xxxxxxxxxx
          type: string
        type_display_name:
          description: "Authentication factor display name as it appears to users\
            \ upon initial registration, as defined by admins at Settings > Authentication\
            \ Factors."
          example: Onelogin SMS
          type: string
        needs_trigger:
          description: |-
            true: You MUST Activate this Factor to trigger an SMS or Push notification before Verifying the OTP code. false: No Activation required. You can Verify the OTP immediately.
            MFA factors that provide both push notifications (user accepts notification) and pull code submission (user initiates code submission from device or enters it manually) should appear twice; once with needs_trigger: true and once with needs_trigger: false.
          example: true
          type: boolean
        user_display_name:
          description: Authentication factor display name assigned by users when they
            enroll the device.
          example: Rich's Phone
          type: string
        id:
          description: MFA device identifier.
          example: 525509
          type: integer
    getEnrolledFactors_200_response_data:
      example:
        otp_devices:
        - type_display_name: Onelogin SMS
          default: false
          needs_trigger: true
          active: true
          state_token: f2402de2b446abd86ea5aa1f79b3fa72b4befacd
          phone_number: +1xxxxxxxxxx
          auth_factor_name: Onelogin SMS
          id: 525509
          user_display_name: Rich's Phone
        - type_display_name: Onelogin SMS
          default: false
          needs_trigger: true
          active: true
          state_token: f2402de2b446abd86ea5aa1f79b3fa72b4befacd
          phone_number: +1xxxxxxxxxx
          auth_factor_name: Onelogin SMS
          id: 525509
          user_display_name: Rich's Phone
      properties:
        otp_devices:
          items:
            $ref: '#/components/schemas/getEnrolledFactors_200_response_data_otp_devices_inner'
          type: array
      type: object
    getEnrolledFactors_200_response:
      example:
        data:
          otp_devices:
          - type_display_name: Onelogin SMS
            default: false
            needs_trigger: true
            active: true
            state_token: f2402de2b446abd86ea5aa1f79b3fa72b4befacd
            phone_number: +1xxxxxxxxxx
            auth_factor_name: Onelogin SMS
            id: 525509
            user_display_name: Rich's Phone
          - type_display_name: Onelogin SMS
            default: false
            needs_trigger: true
            active: true
            state_token: f2402de2b446abd86ea5aa1f79b3fa72b4befacd
            phone_number: +1xxxxxxxxxx
            auth_factor_name: Onelogin SMS
            id: 525509
            user_display_name: Rich's Phone
        status:
          code: 200
          error: false
          type: Success
          message: Success
      properties:
        status:
          $ref: '#/components/schemas/Error'
        data:
          $ref: '#/components/schemas/getEnrolledFactors_200_response_data'
      type: object
    enrollMfaFactor_200_response:
      example:
        data:
        - type_display_name: Onelogin SMS
          default: false
          needs_trigger: true
          active: true
          state_token: f2402de2b446abd86ea5aa1f79b3fa72b4befacd
          phone_number: +1xxxxxxxxxx
          auth_factor_name: Onelogin SMS
          id: 525509
          user_display_name: Rich's Phone
        - type_display_name: Onelogin SMS
          default: false
          needs_trigger: true
          active: true
          state_token: f2402de2b446abd86ea5aa1f79b3fa72b4befacd
          phone_number: +1xxxxxxxxxx
          auth_factor_name: Onelogin SMS
          id: 525509
          user_display_name: Rich's Phone
        status:
          code: 200
          error: false
          type: Success
          message: Success
      properties:
        status:
          $ref: '#/components/schemas/Error'
        data:
          items:
            $ref: '#/components/schemas/getEnrolledFactors_200_response_data_otp_devices_inner'
          type: array
      type: object
    generateMFAtoken_request:
      properties:
        expires_in:
          description: |-
            Set the duration of the token in seconds.
            Token expiration defaults to 259200 seconds = 72 hours. 72 hours is the max value.
          example: 300
          type: integer
        reusable:
          default: false
          description: |-
            Defines if the token is reusable multiple times within the expiry window.
            Value defaults to false. If set to true, token can be used multiple times, until it expires.
          example: false
          type: boolean
      type: object
    generateMFAtoken_200_response:
      example:
        expires_at: 2019-01-16T22:16:38.000Z
        mfa_token: "55647655"
        resuable: true
      properties:
        mfa_token:
          description: Token can function as a temporary MFA token. It can be used
            to authenticate for any app when valid.
          example: "55647655"
          type: string
        resuable:
          description: "true indcates the token can be used multiple times, until\
            \ it expires. false indicates the token is invalid after a single use\
            \ or once it expires. Defaults to false."
          example: true
          type: boolean
        expires_at:
          description: Defines the expiration time and date for the token. Format
            is UTC time.
          example: 2019-01-16T22:16:38.000Z
          type: string
      type: object
    addRolesToUser_request:
      properties:
        role_id_array:
          description: Set to an array of one or more role IDs. The IDs must be positive
            integers.
          items:
            type: integer
          type: array
      required:
      - role_id_array
      type: object
    setUserState_request:
      properties:
        state:
          description: |-
            Set to the state value. Valid values include:
              - 0 : Unapproved
              - 1 : Approved
              - 2 : Rejected
              - 3 : Unlicensed
          enum:
          - 0
          - 1
          - 2
          - 3
          example: 1
          type: integer
      required:
      - state
      type: object
    removeUserRole_request_role_id_array_inner:
      properties:
        role_id:
          type: integer
    removeUserRole_request:
      properties:
        role_id_array:
          items:
            $ref: '#/components/schemas/removeUserRole_request_role_id_array_inner'
          type: array
      required:
      - role_id_array
      type: object
    verifyMfaFactor_request:
      properties:
        state_token:
          description: |-
            The state_token is returned after a successful request to Enroll a Factor or Activate a Factor. The state_token MUST be provided if the needs_trigger attribute from the proceeding calls is set to true.
            Note that the state_token expires 120 seconds after creation. If the token is expired you will need to Activate the Factor again.
          example: 98e008497066bc2763c52342996e06358aab2e32
          type: string
        otp_token:
          description: |-
            OTP code provided by the device or SMS message sent to user.
            When a device like OneLogin Protect that supports Push has been used you do not need to provide the otp_token and can keep polling this endpoint until the state_token expires.
          example: B41832
          type: string
      type: object
    activateMfaFactors_request:
      properties:
        state_token_expires_in:
          description: |-
            Optional. Sets the window of time in seconds that the factor must be verified within.
            Defaults to 120 seconds (2 minutes). Max 900 seconds (15 minutes).
          example: 300
          type: integer
        numeric_sms_otp:
          description: |-
            Optional. Defaults to false. Only applies to SMS factor.
            When set to `true` a 6 digit numeric code will be sent to the user instead of the standard code which is alphanumeric.
          example: true
          type: boolean
        sms_message:
          description: |-
            Optional. Only applies to SMS factor.
            A message template that will be sent via SMS. Max length of the message after template items are inserted is 160 characters.
            The following template variables can be included in the message.
            - {{otp_code}} - The security code. - {{expiration}} - The number of minutes until the one time code expires.
          example: "This is a security code from ABC Co {{otp_code}}. It expires in\
            \ {{expiration}} minutes."
          type: string
      type: object
    createPrivilege_200_response:
      example:
        id: 5e43a548-e9c6-47be-9341-92160902f7a6
      properties:
        id:
          description: Privilege Id
          example: 5e43a548-e9c6-47be-9341-92160902f7a6
          type: string
      type: object
    updatePrivilege_200_response:
      example:
        id: id
      properties:
        id:
          description: Privilege ID
          type: string
      type: object
    listPrivelegeRoles_200_response:
      example:
        total: 0
        previousLink: previousLink
        beforeCursor: 1
        roles:
        - 6
        - 6
        afterCursor: 5
        nextLink: nextLink
      properties:
        total:
          type: integer
        roles:
          items:
            type: integer
          type: array
        beforeCursor:
          nullable: true
          type: integer
        previousLink:
          nullable: true
          type: string
        afterCursor:
          nullable: true
          type: integer
        nextLink:
          nullable: true
          type: string
      type: object
    addPrivilegeToRole_request:
      example:
        roles:
        - 123
        - 456
        - 789
      properties:
        roles:
          items:
            type: integer
          type: array
      type: object
    addPrivilegeToRole_201_response:
      example:
        success: true
      properties:
        success:
          example: true
          type: boolean
      type: object
    getAssignedUser_200_response:
      example:
        total: 0
        previousLink: previousLink
        beforeCursor: 1
        afterCursor: 5
        users:
        - 6
        - 6
        nextLink: nextLink
      properties:
        total:
          type: integer
        users:
          items:
            type: integer
          type: array
        beforeCursor:
          nullable: true
          type: integer
        previousLink:
          nullable: true
          type: string
        afterCursor:
          nullable: true
          type: integer
        nextLink:
          nullable: true
          type: string
      type: object
    assignUsersToPrivilege_request:
      properties:
        users:
          items:
            type: integer
          type: array
      type: object
    getRoleByName_200_response_pagination:
      example:
        after_cursor: xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
        previous_link: '""'
        before_cursor: '""'
        next_link: https://your-api-subdomain.onelogin.com/api/1/events?after_cursor=xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
      properties:
        after_cursor:
          example: xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
          type: string
        before_cursor:
          example: '""'
          type: string
        next_link:
          example: https://your-api-subdomain.onelogin.com/api/1/events?after_cursor=xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
          type: string
        previous_link:
          example: '""'
          type: string
      type: object
    getRoleByName_200_response_data_inner:
      properties:
        id:
          description: Role ID
          type: integer
        name:
          description: Role Name
          type: string
      type: object
    getRoleByName_200_response:
      example:
        pagination:
          after_cursor: xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
          previous_link: '""'
          before_cursor: '""'
          next_link: https://your-api-subdomain.onelogin.com/api/1/events?after_cursor=xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
        data:
        - id: 1111
          name: C-Executive
        - id: 1112
          name: Contractor
        - id: 1113
          name: Default
        - id: 1114
          name: Employee
        status:
          code: 200
          error: false
          type: Success
          message: Success
      properties:
        status:
          $ref: '#/components/schemas/Error'
        pagination:
          $ref: '#/components/schemas/getRoleByName_200_response_pagination'
        data:
          example:
          - id: 1111
            name: C-Executive
          - id: 1112
            name: Contractor
          - id: 1113
            name: Default
          - id: 1114
            name: Employee
          items:
            $ref: '#/components/schemas/getRoleByName_200_response_data_inner'
          type: array
      type: object
    getRoleById_200_response_data_inner:
      example:
        name: Employee
        id: 123456
      properties:
        id:
          description: role's unique ID in Onelogin
          example: 123456
          type: integer
        name:
          description: Role name
          example: Employee
          type: string
      type: object
    getRoleById_200_response:
      example:
        data:
        - name: Employee
          id: 123456
        - name: Employee
          id: 123456
        status:
          code: 200
          error: false
          type: Success
          message: Success
      properties:
        status:
          $ref: '#/components/schemas/Error'
        data:
          items:
            $ref: '#/components/schemas/getRoleById_200_response_data_inner'
          type: array
      type: object
    generateSamlAssert_200_response:
      example:
        data:
        - "{}"
        - "{}"
        status:
          code: 200
          error: false
          type: Success
          message: Success
      properties:
        status:
          $ref: '#/components/schemas/Error'
        data:
          items:
            type: object
          type: array
      type: object
    verFactorSaml_200_response:
      example:
        data: PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIElEPSJSZjE5Y2EyMTI0ZGMxNzJmNzhmMjI3OTk3YzMwOTBkODVkNzFjYWMzOCIgVmVyc2lvbj0iMi4wIiBJc3N1ZUluc3RhbnQ9IjIwMjAtM
        message: SMS token sent to your mobile device. Authentication pending
      properties:
        data:
          description: Provides the SAML assertion.
          example: PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIElEPSJSZjE5Y2EyMTI0ZGMxNzJmNzhmMjI3OTk3YzMwOTBkODVkNzFjYWMzOCIgVmVyc2lvbj0iMi4wIiBJc3N1ZUluc3RhbnQ9IjIwMjAtM
          type: string
        message:
          description: Plain text description describing the outcome of the response.
          example: SMS token sent to your mobile device. Authentication pending
          type: string
      type: object
    listMappingConditions_200_response:
      example:
        name: MemberOf
        value: member_of
      properties:
        name:
          description: Name of Condition
          example: MemberOf
          type: string
        value:
          description: The unique identifier of the condition. This should be used
            when defining conditions for a User Mapping
          example: member_of
          type: string
      type: object
    listMappingConditionsOperators_200_response_inner:
      example:
        name: equals
        value: =
      properties:
        name:
          description: Name or description of operator
          example: equals
          type: string
        value:
          description: The condition operator value to use when creating or updating
            User Mappings.
          example: =
          type: string
    listMappingContionValues_200_response_inner:
      example:
        name: default
        value: 199848
      properties:
        name:
          description: Name or description of operator
          example: default
          type: string
        value:
          description: The condition operator value to use when creating or updating
            User Mappings.
          example: 199848
          type: integer
    listMappingsActions_200_response_inner:
      example:
        name: set Role
        value: add_role
      properties:
        name:
          description: Name of the action
          example: set Role
          type: string
        value:
          description: The unique identifier of the action. This should be used when
            defining actions for a User Mapping.
          example: add_role
          type: string
    listMappingActionValues_200_response_inner:
      example:
        name: default
        value: 199848
      properties:
        name:
          description: Name or description of operator
          example: default
          type: string
        value:
          description: The action operator value to use when creating or updating
            User Mappings.
          example: 199848
          type: integer
    createApp_request:
      oneOf:
      - $ref: '#/components/schemas/oidc_app'
      - $ref: '#/components/schemas/saml_app'
      - $ref: '#/components/schemas/generic-app'
    createApp_200_response:
      discriminator:
        mapping:
          "0": '#/components/schemas/generic-app'
          "1": '#/components/schemas/generic-app'
          "2": '#/components/schemas/saml_app'
          "3": '#/components/schemas/generic-app'
          "4": '#/components/schemas/generic-app'
          "5": '#/components/schemas/generic-app'
          "6": '#/components/schemas/generic-app'
          "7": '#/components/schemas/generic-app'
          "8": '#/components/schemas/oidc_app'
        propertyName: auth_method
      oneOf:
      - $ref: '#/components/schemas/oidc_app'
      - $ref: '#/components/schemas/saml_app'
      - $ref: '#/components/schemas/generic-app'
    listConditions_200_response_inner:
      example:
        name: MemberOf
        value: member_of
      properties:
        name:
          description: Name of the rule condition
          example: MemberOf
          type: string
        value:
          description: The unique identifier of the condition. This should be used
            when defining conditions for a rule.
          example: member_of
          type: string
      type: object
    updateRiskRule_request:
      properties:
        id:
          description: The ID of the Rule to Update
          type: string
      type: object
    trackRiskEvent_request:
      properties:
        verb:
          description: Verbs are used to distinguish between different types of events.
          type: string
        ip:
          description: The IP address of the User's request.
          type: string
        user_agent:
          description: The user agent of the User's request.
          type: string
        user:
          $ref: '#/components/schemas/risk_user'
        source:
          $ref: '#/components/schemas/source'
        session:
          $ref: '#/components/schemas/session'
        device:
          $ref: '#/components/schemas/risk_device'
        fp:
          description: Set to the value of the __tdli_fp cookie.
          type: string
        published:
          description: Date and time of the event in IS08601 format. Useful for preloading
            old events. Defaults to date time this API request is received.
          type: string
      required:
      - ip
      - user
      - user_agent
      - verb
      type: object
    getRiskScores_200_response_scores:
      example:
        minimal: 0
        high: 5
        low: 6
        very_high: 5
        medium: 1
      properties:
        minimal:
          type: integer
        low:
          type: integer
        medium:
          type: integer
        high:
          type: integer
        very_high:
          type: integer
      type: object
    getRiskScores_200_response:
      example:
        total: 2
        scores:
          minimal: 0
          high: 5
          low: 6
          very_high: 5
          medium: 1
      properties:
        scores:
          $ref: '#/components/schemas/getRiskScores_200_response_scores'
        total:
          type: integer
      type: object
    getRiskScore_request:
      properties:
        ip:
          description: The IP address of the User's request.
          type: string
        user_agent:
          description: The user agent of the User's request.
          type: string
        user:
          $ref: '#/components/schemas/risk_user'
        source:
          $ref: '#/components/schemas/source'
        session:
          $ref: '#/components/schemas/session'
        device:
          $ref: '#/components/schemas/risk_device'
        fp:
          description: Set to the value of the __tdli_fp cookie.
          type: string
      required:
      - ip
      - user
      - user_agent
      type: object
    getRiskScore_200_response:
      example:
        score: 8.008281904610115
        triggers:
        - triggers
        - triggers
      properties:
        score:
          description: A risk score 0 is low risk and 100 is the highest risk level
            possible.
          maximum: 100
          minimum: 0
          type: number
        triggers:
          description: Triggers are indicators of some of the key items that influenced
            the risk score.
          items:
            type: string
          type: array
      type: object
    verifyUserRegistration_request:
      example:
        otp: 58959
      properties:
        otp:
          description: One-Time-Password (OTP) that was sent to the user based on
            the chosen factor. OneLogin SMS and OneLogin Email support this OTP code.
          type: integer
      type: object
    verifyUserRegistration_200_response:
      example:
        device_id: "3926157"
        id: 44aa6883-5048-4cd5-8cb2-64d47784230c
        status: accepted
      properties:
        id:
          description: Registration identifier.
          example: 44aa6883-5048-4cd5-8cb2-64d47784230c
          type: string
        status:
          description: pending registration has not been completed successfully. accepted
            registration has successfully completed.
          example: accepted
          type: string
        device_id:
          description: Device id to be used with Verify the Factor.
          example: "3926157"
          type: string
      type: object
    createFactorRegistration_request:
      properties:
        factor_id:
          description: The identifier of the factor to enroll the user with. See Get
            Available Factors for a list of possible id values.
          example: 58959
          type: integer
        display_name:
          description: A name for the users device
          example: OneLogin SMS
          type: string
        expires_in:
          description: "Defaults to 120. Valid values are: 120-900 seconds."
          type: string
        verified:
          description: |-
            Defaults to false. The following factors support verified = true as part of the initial registration request: OneLogin SMS, OneLogin Voice, OneLogin Email. When using verified = true it is critical that the supported factors have pre-verified values, most likely imported from an existing directory or by the users themselvdes.
            Factors such as Authenticator and OneLogin Protect do not support verification = true as the user interaction is required to verify the factor.
          type: boolean
        redirect_to:
          description: Only applies to Email MagicLink factor. Redirects MagicLink
            success page to specified URL after 2 seconds. Email must already be configured
            by the user.
          type: string
        custom_message:
          description: |-
            Only applies to SMS factor.
            A message template that will be sent via SMS. Max length of the message after template items are inserted is 160 characters including the OTP code. SMS must already be configured by the user.
            The following template variables can be included in the message. - {{otp_code}} - The security code. - {{otp_expiry}} - The number of minutes until the one time code expires.
          type: string
      required:
      - display_name
      - factor_id
      type: object
    createFactorRegistration_201_response:
      example:
        type_display_name: OneLogin Voice
        device_id: "3920373"
        user_id: 5a0ba80a-39a1-4627-9a8b-1273278b34ee
        auth_factor_name: OneLogin Voice
        id: 5a0ba80a-39a1-4627-9a8b-1273278b34ee
        user_display_name: OneLogin Voice
      properties:
        device_id:
          description: MFA device identifier.
          example: "3920373"
          type: string
        user_display_name:
          description: Authentication factor display name assigned by users when they
            register the device.
          example: OneLogin Voice
          type: string
        type_display_name:
          description: "Authentication factor display name as it appears to users\
            \ upon initial registration, as defined by admins at Settings > Authentication\
            \ Factors."
          example: OneLogin Voice
          type: string
        auth_factor_name:
          description: "Authentication factor name, as it appears to administrators\
            \ in OneLogin."
          example: OneLogin Voice
          type: string
        id:
          description: Verification identifier used in subsequent verification step.
          example: 5a0ba80a-39a1-4627-9a8b-1273278b34ee
          type: string
        user_id:
          description: User identifier
          example: 5a0ba80a-39a1-4627-9a8b-1273278b34ee
          type: string
      type: object
    getAuthenticationDevices_200_response_inner:
      example:
        type_display_name: OneLogin Voice
        default: false
        device_id: "3920373"
        auth_factor_name: OneLogin Voice
        user_display_name: OneLogin Voice
      properties:
        device_id:
          description: MFA device identifier.
          example: "3920373"
          type: string
        user_display_name:
          description: Authentication factor display name assigned by users when they
            register the device.
          example: OneLogin Voice
          type: string
        type_display_name:
          description: "Authentication factor display name as it appears to users\
            \ upon initial registration, as defined by admins at Settings > Authentication\
            \ Factors."
          example: OneLogin Voice
          type: string
        auth_factor_name:
          description: "Authentication factor name, as it appears to administrators\
            \ in OneLogin."
          example: OneLogin Voice
          type: string
        default:
          default: false
          description: true = is user’s default MFA device for OneLogin.
          type: boolean
      type: object
    getUserVerification_200_response:
      example:
        device_id: "331991"
        id: 5a0ba80a-39a1-4627-9a8b-1273278b34ee
        status: pending
      properties:
        id:
          description: registration identifier
          example: 5a0ba80a-39a1-4627-9a8b-1273278b34ee
          type: string
        status:
          description: "pending = has not been completed. accepted registration has\
            \ successfully completed, rejected user has denied the MFA attempt or\
            \ incorrectly provided the OneLogin Voice OTP code."
          example: pending
          type: string
        device_id:
          description: Device Id to be used with verify factor
          example: "331991"
          type: string
      type: object
    verifyUserVerification_request:
      properties:
        otp:
          description: OTP code provided by the device or SMS message sent to user.
          example: "123456"
          type: string
        device_id:
          description: ID of the specified device which has been registerd for the
            given user. Available on Get Devices API call.
          example: 98765
          type: integer
      type: object
    createDeviceVerification_request:
      properties:
        device_id:
          description: Specifies the factor to be verified.
          example: 58959
          type: integer
        display_name:
          description: A name for the users device
          example: OneLogin SMS
          type: string
        expires_in:
          description: "Defaults to 120. Valid values are: 120-900 seconds."
          type: string
        redirect_to:
          description: Only applies to Email MagicLink factor. Redirects MagicLink
            success page to specified URL after 2 seconds. Email must already be configured
            by the user.
          type: string
        custom_message:
          description: |-
            Only applies to SMS factor.
            A message template that will be sent via SMS. Max length of the message after template items are inserted is 160 characters including the OTP code. SMS must already be configured by the user.
            The following template variables can be included in the message. - {{otp_code}} - The security code. - {{otp_expiry}} - The number of minutes until the one time code expires.
          type: string
      required:
      - device_id
      type: object
    createDeviceVerification_201_response:
      example:
        type_display_name: OneLogin Voice
        expires_at: 2020-07-11T22:24:50Z
        device_id: 58959
        id: 44aa6883-5048-4cd5-8cb2-64d47784230c
        auth_factor_name: OneLogin Voice
        display_name: OneLogin SMS
        user_display_name: OneLogin Voice
        redirect_to: redirect_to
      properties:
        device_id:
          description: Specifies the factor to be verified.
          example: 58959
          type: integer
        display_name:
          description: A name for the users device
          example: OneLogin SMS
          type: string
        expires_at:
          description: A short lived token that is required to Verify the Factor.
            This token expires based on the expires_in parameter passed in.
          example: 2020-07-11T22:24:50Z
          type: string
        redirect_to:
          description: Only applies to Email MagicLink factor. Redirects MagicLink
            success page to specified URL after 2 seconds. Email must already be configured
            by the user.
          type: string
        user_display_name:
          description: Authentication factor display name assigned by users when they
            register the device.
          example: OneLogin Voice
          type: string
        id:
          description: Registration identifier.
          example: 44aa6883-5048-4cd5-8cb2-64d47784230c
          type: string
        type_display_name:
          description: "Authentication factor display name as it appears to users\
            \ upon initial registration, as defined by admins at Settings > Authentication\
            \ Factors."
          example: OneLogin Voice
          type: string
        auth_factor_name:
          description: "Authentication factor name, as it appears to administrators\
            \ in OneLogin."
          example: OneLogin Voice
          type: string
      type: object
    getAuthFactors_200_response:
      example:
        name: Onelogin Protect
        factor_id: 598524
        auth_factor_name: Onelogin
      properties:
        factor_id:
          description: Identifier for the factor which will be used for user enrollment
          example: 598524
          type: integer
        name:
          description: "Authentication factor name, as it appears to administrators\
            \ in OneLogin."
          example: Onelogin Protect
          type: string
        auth_factor_name:
          description: Internal use only
          example: Onelogin
          type: string
      type: object
    generateOTP_request:
      properties:
        expires_in:
          description: Set the duration of the token in seconds. Token expiration
            defaults to 259200 seconds = 72 hours. 72 hours is the max value.
          example: 300
          type: integer
        reusable:
          default: false
          description: "Defines if the token is reusable multiple times within the\
            \ expiry window. Value defaults to false. If set to true, token can be\
            \ used multiple times, until it expires."
          type: boolean
      type: object
    generateOTP_201_response:
      example:
        expires_at: 2020-06-26T21:52:56Z
        device_id: user_temp_otp_36216766
        mfa_token: UIOWE787979
        reusable: false
      properties:
        mfa_token:
          description: Token can function as a temporary MFA token. It can be used
            to authenticate for any app when valid.
          example: UIOWE787979
          type: string
        reusable:
          default: false
          description: "true indcates the token can be used multiple times, until\
            \ it expires. false indicates the token is invalid after a single use\
            \ or once it expires. Defaults to false."
          type: boolean
        expires_at:
          description: Defines the expiration time and date for the token. Format
            is UTC time.
          example: 2020-06-26T21:52:56Z
          type: string
        device_id:
          description: A unique identifier for the temp otp device that has been created
            for this token.
          example: user_temp_otp_36216766
          type: string
      type: object
    createRole_201_response_inner:
      example:
        id: 0
      properties:
        id:
          type: integer
      type: object
    updateRole_200_response:
      example:
        id: 0
      properties:
        id:
          type: integer
      type: object
    getRoleApps_200_response_inner:
      example:
        id: 345
        name: Dropbox
        icon_url: https://testurl.com
      properties:
        id:
          description: app id
          type: integer
        name:
          description: app name
          type: string
        icon_url:
          description: url of Icon
          format: url
          type: string
      type: object
    removeRoleUsers_request:
      properties:
        user_id:
          items:
            $ref: '#/components/schemas/id'
          type: array
      type: object
    updateEnvironmentVariable_request:
      properties:
        value:
          description: The secret value that will be encrypted at rest and injected
            in applicable hook functions at run time.
          type: string
      required:
      - value
      type: object
    listMessageTemplates_200_response_inner:
      example:
        name: ACME
        id: 912
        enabled: true
      properties:
        id:
          description: template ID
          example: 912
          type: integer
        enabled:
          description: indicator if template is enabled
          example: true
          type: boolean
        name:
          description: name of message template
          example: ACME
          type: string
      type: object
    getEmailSettings_200_response_oneOf:
      properties:
        mode:
          example: onelogin_email
          type: string
      type: object
    getEmailSettings_200_response:
      oneOf:
      - $ref: '#/components/schemas/getEmailSettings_200_response_oneOf'
      - $ref: '#/components/schemas/email_config'
    brand_background_urls:
      properties:
        original:
          type: string
        login:
          type: string
        branding:
          type: string
      required:
      - branding
      - login
      - original
      type: object
    brand_background:
      properties:
        urls:
          $ref: '#/components/schemas/brand_background_urls'
        file_size:
          type: integer
        updated_at:
          type: string
        content_type:
          type: string
      required:
      - content_type
      - file_size
      - updated_at
      - urls
      type: object
    brand_logo_urls:
      properties:
        original:
          type: string
        login:
          type: string
        navigation:
          type: string
      required:
      - login
      - navigation
      - original
      type: object
    brand_logo:
      properties:
        urls:
          $ref: '#/components/schemas/brand_logo_urls'
        file_size:
          type: integer
        updated_at:
          type: string
        content_type:
          type: string
      required:
      - content_type
      - file_size
      - updated_at
      - urls
      type: object
    enforcement_point_resources_inner:
      properties:
        path:
          example: /
          type: string
        is_path_regex:
          nullable: true
          type: boolean
        require_auth:
          example: false
          type: boolean
        permission:
          enum:
          - allow
          - deny
          - conditions
          type: string
        conditions:
          description: required if permission == "conditions"
          type: string
      type: object
    generic_app_provisioning:
      description: Indicates if provisioning is enabled for this app.
      example:
        enabled: true
      properties:
        enabled:
          example: true
          type: boolean
      type: object
    message_template_template_oneOf:
      properties:
        subject:
          description: Custom Email Subject
          example: Email MFA App Verification Code
          type: string
        html:
          description: The HTML body of the Custom Email
          example: "<html><head></head><body><p>Here is the code: {{otp_code}}</p></body></html>"
          type: string
        plain:
          description: The Plain text body of the email
          example: "Here is the code: {{otp_code}}"
          type: string
      required:
      - html
      - plain
      - subject
      type: object
    message_template_template_oneOf_1:
      properties:
        message:
          description: The body of the SMS message. Max length 160 characters.
          example: "Here is the code: {{otp_code}}"
          maxLength: 160
          type: string
      required:
      - message
      type: object
    message_template_template:
      oneOf:
      - $ref: '#/components/schemas/message_template_template_oneOf'
      - $ref: '#/components/schemas/message_template_template_oneOf_1'
    oidc_app_allOf:
      example: "{\"id\":928549,\"name\":\"Sample OpenId Connect App\",\"visible\"\
        :true,\"description\":\"\",\"notes\":null,\"icon_url\":\"/images/missing_connector_icon/square/old_original.png\"\
        ,\"auth_method\":8,\"policy_id\":165278,\"provisioning\":{\"enabled\":false},\"\
        allow_assumed_signin\":false,\"tab_id\":null,\"connector_id\":108419,\"sso\"\
        :{\"client_secret\":\"3acdcdba4e57bbb4f0454a8729fbc4ec5c4ac327c8e1d6d60c305cc9ea5dbcd3\"\
        ,\"client_id\":\"b5dee2e0-5cbf-0137-6e19-12c80e5197ec92920\"},\"configuration\"\
        :{\"redirect_uri\":\"http://example.com/callback\",\"refresh_token_expiration_minutes\"\
        :60,\"login_url\":\"http://example.com/login\",\"oidc_encryption_key\":\"\"\
        ,\"oidc_application_type\":0,\"token_endpoint_auth_method\":0,\"access_token_expiration_minutes\"\
        :5},\"created_at\":\"2019-05-19T23:56:57Z\",\"updated_at\":\"2019-05-19T23:56:57Z\"\
        ,\"parameters\":{\"groups\":{\"values\":null,\"user_attribute_mappings\":null,\"\
        provisioned_entitlements\":false,\"skip_if_blank\":false,\"id\":237825,\"\
        default_values\":null,\"attributes_transformations\":null,\"label\":\"Groups\"\
        ,\"user_attribute_macros\":null,\"include_in_saml_assertion\":true}}}"
      properties:
        configuration:
          $ref: '#/components/schemas/configuration_oidc'
        sso:
          $ref: '#/components/schemas/sso_oidc'
      required:
      - configuration
      - connector_id
      - description
      - name
      - policy_id
      - visible
      type: object
    privilege_privilege_Statement_inner:
      example:
        Action:
        - Users:Delete
        - Users:ResetPassword
        - Users:Unlock
        - Users:Get
        Scope:
        - '*'
        - '*'
        Effect: Allow
      properties:
        Effect:
          description: "Set to “Allow.” By default, all actions are denied, this Statement\
            \ allows the listed actions to be executed."
          example: Allow
          type: string
        Action:
          description: |-
            An array of strings that represent actions within OneLogin. Actions are prefixed with the class of object they are related to and followed by a specific action for the given class.
            e.g. users:List, where the class is users and the specific action is List. Don’t mix classes within an Action array. To create a privilege that includes multiple different classes, create multiple statements. A wildcard * that includes all actions is supported. Use wildcards to create a Super User privilege.
          example:
          - Users:Delete
          - Users:ResetPassword
          - Users:Unlock
          - Users:Get
          items:
            enum:
            - Apps:Create
            - Apps:Delete
            - Apps:List
            - Apps:Get
            - Apps:Update
            - Apps:ManageConnectors
            - Apps:ManageRoles
            - Apps:ManageTabs
            - Apps:ManageUsers
            - Apps:ReapplyMappings
            - Users:Create
            - Users:Delete
            - Users:List
            - Users:Get
            - Users:Update
            - Users:AssumeUser
            - Users:ManageApps
            - Users:Unlock
            - Users:GenerateTempMfaToken
            - Users:ResetPassword
            - Users:ReapplyMappings
            - Users:ManageLicense
            - Users:Invite
            - Users:ManageRoles
            - Roles:Create
            - Roles:Get
            - Roles:List
            - Roles:Update
            - Roles:Delete
            - Roles:ManageUsers
            - Roles:ManageApps
            - Reports:Create
            - Reports:Get
            - Reports:List
            - Reports:Update
            - Reports:Delete
            - Reports:Clone
            - Events:Get
            - Events:List
            - Groups:Create
            - Groups:Get
            - Groups:List
            - Groups:Update
            - Groups:Delete
            - Policies:Create
            - Policies:Get
            - Policies:List
            - Policies:Update
            - Policies:Delete
            - Policies:SetDefault
            type: string
          type: array
        Scope:
          description: |-
            Target the privileged action against specific resources with the scope.
            The scope pattern is the class of object used by the Action, followed by an ID that represents a resource in OneLogin.
            e.g. apps/1234, where apps is the class and 1234 is the ID of an app.
            The wildcard * is supported and indicates that all resources of the class type declared, in the Action, are in scope.
            The Action and Scope classes must match. However, there is an exception, a scope of roles/{role_id} can be combined with Actions on the user or app class. The exception allows you to target groups of users or apps with specific actions.
          items:
            example: '*'
            type: string
          type: array
      required:
      - Action
      - Effect
      - Scope
      type: object
    privilege_privilege:
      example:
        Version: 2018-05-18
        Statement:
        - Action:
          - Users:Delete
          - Users:ResetPassword
          - Users:Unlock
          - Users:Get
          Scope:
          - '*'
          - '*'
          Effect: Allow
        - Action:
          - Users:Delete
          - Users:ResetPassword
          - Users:Unlock
          - Users:Get
          Scope:
          - '*'
          - '*'
          Effect: Allow
      properties:
        Version:
          example: 2018-05-18
          type: string
        Statement:
          items:
            $ref: '#/components/schemas/privilege_privilege_Statement_inner'
          type: array
      type: object
    saml_app_allOf_parameters_saml_username:
      properties:
        user_attribute_mappings:
          type: string
      required:
      - user_attribute_mappings
      type: object
      example: null
    saml_app_allOf_parameters:
      properties:
        saml_username:
          $ref: '#/components/schemas/saml_app_allOf_parameters_saml_username'
      required:
      - saml_username
      type: object
      example: null
    saml_app_allOf:
      properties:
        configuration:
          $ref: '#/components/schemas/configuration_saml'
        sso:
          $ref: '#/components/schemas/sso_saml'
        parameters:
          $ref: '#/components/schemas/saml_app_allOf_parameters'
      required:
      - configuration
      - connector_id
      - description
      - name
      - parameters
      - policy_id
      - visible
      type: object
      example: null
    sso_saml_certificate:
      description: The Certificate used for signing
      properties:
        id:
          description: SAML Certificate ID
          example: 170216
          type: integer
        name:
          description: SAML Certificate Name
          example: My Companies SAML Certificate
          type: string
        value:
          description: SAML Certificate Value
          example: c6d814d032f000d9c03bc79727265
          type: string
      type: object
    hook_options:
      description: A set of attributes allow control over the information that is
        included in the hook context.
      example:
        risk_enabled: true
        mfa_device_info_enabled: true
        location_enabled: true
      properties:
        risk_enabled:
          type: boolean
        location_enabled:
          type: boolean
        mfa_device_info_enabled:
          type: boolean
      type: object
  securitySchemes:
    OAuth2:
      description: "This API uses OAuth2 with the Client Credential grant flow. [More\
        \ info](https://developers.onelogin.com/api-docs/2/getting-started/working-with-api-credentials)"
      flows:
        clientCredentials:
          scopes:
            Authentication Only: |-
              Gives the credential pair the ability to generate an access token that can perform POST calls only to authentication endpoints, providing least privileged access to authentication code. These endpoints include:
                - Verify Factor (SAML Assertion)
                - Generate SAML Assertion
                - Verify Factor (Login)
                - Create Session Login Token
                - Log User Out
            Read Users: "Gives the credential pair the ability to generate an access\
              \ token that can perform GET calls available for the User, Role, and\
              \ Group API resources."
            Manage users: "Gives the credential pair the ability to generate an access\
              \ token that can perform GET, POST, PUT, and DELETE calls available\
              \ for the User, Role, and Group API resources, with the exception of\
              \ setting passwords and assigning and removing roles"
            Manage All: "Gives the credential pair the ability to generate an access\
              \ token that can perform GET, POST, PUT, and DELETE calls for all available\
              \ API resources, including the ability to set passwords and assign and\
              \ remove roles."
            Read All: Gives the credential pair the ability to generate an access
              token that can perform GET calls available for all API resources.
          tokenUrl: https://your-api-subdomain.onelogin.com/auth/oauth2/v2/token
      type: oauth2
    basicAuth:
      scheme: basic
      type: http
