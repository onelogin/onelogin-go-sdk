/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the ActivateMfaFactorsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivateMfaFactorsRequest{}

// ActivateMfaFactorsRequest struct for ActivateMfaFactorsRequest
type ActivateMfaFactorsRequest struct {
	// Optional. Sets the window of time in seconds that the factor must be verified within. Defaults to 120 seconds (2 minutes). Max 900 seconds (15 minutes).
	StateTokenExpiresIn *int32 `json:"state_token_expires_in,omitempty"`
	// Optional. Defaults to false. Only applies to SMS factor. When set to `true` a 6 digit numeric code will be sent to the user instead of the standard code which is alphanumeric.
	NumericSmsOtp *bool `json:"numeric_sms_otp,omitempty"`
	// Optional. Only applies to SMS factor. A message template that will be sent via SMS. Max length of the message after template items are inserted is 160 characters. The following template variables can be included in the message. - {{otp_code}} - The security code. - {{expiration}} - The number of minutes until the one time code expires.
	SmsMessage *string `json:"sms_message,omitempty"`
}

// NewActivateMfaFactorsRequest instantiates a new ActivateMfaFactorsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivateMfaFactorsRequest() *ActivateMfaFactorsRequest {
	this := ActivateMfaFactorsRequest{}
	return &this
}

// NewActivateMfaFactorsRequestWithDefaults instantiates a new ActivateMfaFactorsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivateMfaFactorsRequestWithDefaults() *ActivateMfaFactorsRequest {
	this := ActivateMfaFactorsRequest{}
	return &this
}

// GetStateTokenExpiresIn returns the StateTokenExpiresIn field value if set, zero value otherwise.
func (o *ActivateMfaFactorsRequest) GetStateTokenExpiresIn() int32 {
	if o == nil || isNil(o.StateTokenExpiresIn) {
		var ret int32
		return ret
	}
	return *o.StateTokenExpiresIn
}

// GetStateTokenExpiresInOk returns a tuple with the StateTokenExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivateMfaFactorsRequest) GetStateTokenExpiresInOk() (*int32, bool) {
	if o == nil || isNil(o.StateTokenExpiresIn) {
		return nil, false
	}
	return o.StateTokenExpiresIn, true
}

// HasStateTokenExpiresIn returns a boolean if a field has been set.
func (o *ActivateMfaFactorsRequest) HasStateTokenExpiresIn() bool {
	if o != nil && !isNil(o.StateTokenExpiresIn) {
		return true
	}

	return false
}

// SetStateTokenExpiresIn gets a reference to the given int32 and assigns it to the StateTokenExpiresIn field.
func (o *ActivateMfaFactorsRequest) SetStateTokenExpiresIn(v int32) {
	o.StateTokenExpiresIn = &v
}

// GetNumericSmsOtp returns the NumericSmsOtp field value if set, zero value otherwise.
func (o *ActivateMfaFactorsRequest) GetNumericSmsOtp() bool {
	if o == nil || isNil(o.NumericSmsOtp) {
		var ret bool
		return ret
	}
	return *o.NumericSmsOtp
}

// GetNumericSmsOtpOk returns a tuple with the NumericSmsOtp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivateMfaFactorsRequest) GetNumericSmsOtpOk() (*bool, bool) {
	if o == nil || isNil(o.NumericSmsOtp) {
		return nil, false
	}
	return o.NumericSmsOtp, true
}

// HasNumericSmsOtp returns a boolean if a field has been set.
func (o *ActivateMfaFactorsRequest) HasNumericSmsOtp() bool {
	if o != nil && !isNil(o.NumericSmsOtp) {
		return true
	}

	return false
}

// SetNumericSmsOtp gets a reference to the given bool and assigns it to the NumericSmsOtp field.
func (o *ActivateMfaFactorsRequest) SetNumericSmsOtp(v bool) {
	o.NumericSmsOtp = &v
}

// GetSmsMessage returns the SmsMessage field value if set, zero value otherwise.
func (o *ActivateMfaFactorsRequest) GetSmsMessage() string {
	if o == nil || isNil(o.SmsMessage) {
		var ret string
		return ret
	}
	return *o.SmsMessage
}

// GetSmsMessageOk returns a tuple with the SmsMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivateMfaFactorsRequest) GetSmsMessageOk() (*string, bool) {
	if o == nil || isNil(o.SmsMessage) {
		return nil, false
	}
	return o.SmsMessage, true
}

// HasSmsMessage returns a boolean if a field has been set.
func (o *ActivateMfaFactorsRequest) HasSmsMessage() bool {
	if o != nil && !isNil(o.SmsMessage) {
		return true
	}

	return false
}

// SetSmsMessage gets a reference to the given string and assigns it to the SmsMessage field.
func (o *ActivateMfaFactorsRequest) SetSmsMessage(v string) {
	o.SmsMessage = &v
}

func (o ActivateMfaFactorsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivateMfaFactorsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.StateTokenExpiresIn) {
		toSerialize["state_token_expires_in"] = o.StateTokenExpiresIn
	}
	if !isNil(o.NumericSmsOtp) {
		toSerialize["numeric_sms_otp"] = o.NumericSmsOtp
	}
	if !isNil(o.SmsMessage) {
		toSerialize["sms_message"] = o.SmsMessage
	}
	return toSerialize, nil
}

type NullableActivateMfaFactorsRequest struct {
	value *ActivateMfaFactorsRequest
	isSet bool
}

func (v NullableActivateMfaFactorsRequest) Get() *ActivateMfaFactorsRequest {
	return v.value
}

func (v *NullableActivateMfaFactorsRequest) Set(val *ActivateMfaFactorsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableActivateMfaFactorsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableActivateMfaFactorsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivateMfaFactorsRequest(val *ActivateMfaFactorsRequest) *NullableActivateMfaFactorsRequest {
	return &NullableActivateMfaFactorsRequest{value: val, isSet: true}
}

func (v NullableActivateMfaFactorsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivateMfaFactorsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


