/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the AddRolesToUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddRolesToUserRequest{}

// AddRolesToUserRequest struct for AddRolesToUserRequest
type AddRolesToUserRequest struct {
	// Set to an array of one or more role IDs. The IDs must be positive integers.
	RoleIdArray []int32 `json:"role_id_array"`
}

// NewAddRolesToUserRequest instantiates a new AddRolesToUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddRolesToUserRequest(roleIdArray []int32) *AddRolesToUserRequest {
	this := AddRolesToUserRequest{}
	this.RoleIdArray = roleIdArray
	return &this
}

// NewAddRolesToUserRequestWithDefaults instantiates a new AddRolesToUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddRolesToUserRequestWithDefaults() *AddRolesToUserRequest {
	this := AddRolesToUserRequest{}
	return &this
}

// GetRoleIdArray returns the RoleIdArray field value
func (o *AddRolesToUserRequest) GetRoleIdArray() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.RoleIdArray
}

// GetRoleIdArrayOk returns a tuple with the RoleIdArray field value
// and a boolean to check if the value has been set.
func (o *AddRolesToUserRequest) GetRoleIdArrayOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoleIdArray, true
}

// SetRoleIdArray sets field value
func (o *AddRolesToUserRequest) SetRoleIdArray(v []int32) {
	o.RoleIdArray = v
}

func (o AddRolesToUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddRolesToUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role_id_array"] = o.RoleIdArray
	return toSerialize, nil
}

type NullableAddRolesToUserRequest struct {
	value *AddRolesToUserRequest
	isSet bool
}

func (v NullableAddRolesToUserRequest) Get() *AddRolesToUserRequest {
	return v.value
}

func (v *NullableAddRolesToUserRequest) Set(val *AddRolesToUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddRolesToUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddRolesToUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddRolesToUserRequest(val *AddRolesToUserRequest) *NullableAddRolesToUserRequest {
	return &NullableAddRolesToUserRequest{value: val, isSet: true}
}

func (v NullableAddRolesToUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddRolesToUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


