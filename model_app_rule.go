/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the AppRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppRule{}

// AppRule struct for AppRule
type AppRule struct {
	// App Rule ID
	Id *int32 `json:"id,omitempty"`
	// Rule Name
	Name *string `json:"name,omitempty"`
	// Indicates how conditions should be matched.
	Match *string `json:"match,omitempty"`
	// Indicates if the rule is enabled or not.
	Enabled *bool `json:"enabled,omitempty"`
	// Indicates the order of the rule. When `null` this will default to last position.
	Position *int32 `json:"position,omitempty"`
	// An array of conditions that the user must meet in order for the rule to be applied.
	Conditions []Condition `json:"conditions,omitempty"`
	Actions []ActionObj `json:"actions,omitempty"`
}

// NewAppRule instantiates a new AppRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppRule() *AppRule {
	this := AppRule{}
	return &this
}

// NewAppRuleWithDefaults instantiates a new AppRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppRuleWithDefaults() *AppRule {
	this := AppRule{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AppRule) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRule) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AppRule) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AppRule) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AppRule) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRule) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AppRule) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AppRule) SetName(v string) {
	o.Name = &v
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *AppRule) GetMatch() string {
	if o == nil || isNil(o.Match) {
		var ret string
		return ret
	}
	return *o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRule) GetMatchOk() (*string, bool) {
	if o == nil || isNil(o.Match) {
		return nil, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *AppRule) HasMatch() bool {
	if o != nil && !isNil(o.Match) {
		return true
	}

	return false
}

// SetMatch gets a reference to the given string and assigns it to the Match field.
func (o *AppRule) SetMatch(v string) {
	o.Match = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AppRule) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRule) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AppRule) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AppRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *AppRule) GetPosition() int32 {
	if o == nil || isNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRule) GetPositionOk() (*int32, bool) {
	if o == nil || isNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *AppRule) HasPosition() bool {
	if o != nil && !isNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *AppRule) SetPosition(v int32) {
	o.Position = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *AppRule) GetConditions() []Condition {
	if o == nil || isNil(o.Conditions) {
		var ret []Condition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRule) GetConditionsOk() ([]Condition, bool) {
	if o == nil || isNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *AppRule) HasConditions() bool {
	if o != nil && !isNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []Condition and assigns it to the Conditions field.
func (o *AppRule) SetConditions(v []Condition) {
	o.Conditions = v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *AppRule) GetActions() []ActionObj {
	if o == nil || isNil(o.Actions) {
		var ret []ActionObj
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRule) GetActionsOk() ([]ActionObj, bool) {
	if o == nil || isNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *AppRule) HasActions() bool {
	if o != nil && !isNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []ActionObj and assigns it to the Actions field.
func (o *AppRule) SetActions(v []ActionObj) {
	o.Actions = v
}

func (o AppRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Match) {
		toSerialize["match"] = o.Match
	}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !isNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !isNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	return toSerialize, nil
}

type NullableAppRule struct {
	value *AppRule
	isSet bool
}

func (v NullableAppRule) Get() *AppRule {
	return v.value
}

func (v *NullableAppRule) Set(val *AppRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAppRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAppRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppRule(val *AppRule) *NullableAppRule {
	return &NullableAppRule{value: val, isSet: true}
}

func (v NullableAppRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


