/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the AuthServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthServer{}

// AuthServer base resource for configuring api authorization in OneLogin
type AuthServer struct {
	// Auth server unique ID in Onelogin
	Id *int32 `json:"id,omitempty"`
	// Name of the API.
	Name string `json:"name"`
	// Description of what the API does.
	Description string `json:"description"`
	Configuration AuthServerConfiguration `json:"configuration"`
}

// NewAuthServer instantiates a new AuthServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthServer(name string, description string, configuration AuthServerConfiguration) *AuthServer {
	this := AuthServer{}
	this.Name = name
	this.Description = description
	this.Configuration = configuration
	return &this
}

// NewAuthServerWithDefaults instantiates a new AuthServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthServerWithDefaults() *AuthServer {
	this := AuthServer{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuthServer) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthServer) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuthServer) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AuthServer) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *AuthServer) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AuthServer) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AuthServer) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *AuthServer) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *AuthServer) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *AuthServer) SetDescription(v string) {
	o.Description = v
}

// GetConfiguration returns the Configuration field value
func (o *AuthServer) GetConfiguration() AuthServerConfiguration {
	if o == nil {
		var ret AuthServerConfiguration
		return ret
	}

	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value
// and a boolean to check if the value has been set.
func (o *AuthServer) GetConfigurationOk() (*AuthServerConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Configuration, true
}

// SetConfiguration sets field value
func (o *AuthServer) SetConfiguration(v AuthServerConfiguration) {
	o.Configuration = v
}

func (o AuthServer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["configuration"] = o.Configuration
	return toSerialize, nil
}

type NullableAuthServer struct {
	value *AuthServer
	isSet bool
}

func (v NullableAuthServer) Get() *AuthServer {
	return v.value
}

func (v *NullableAuthServer) Set(val *AuthServer) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthServer) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthServer(val *AuthServer) *NullableAuthServer {
	return &NullableAuthServer{value: val, isSet: true}
}

func (v NullableAuthServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


