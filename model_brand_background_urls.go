/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the BrandBackgroundUrls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BrandBackgroundUrls{}

// BrandBackgroundUrls struct for BrandBackgroundUrls
type BrandBackgroundUrls struct {
	Original string `json:"original"`
	Login string `json:"login"`
	Branding string `json:"branding"`
}

// NewBrandBackgroundUrls instantiates a new BrandBackgroundUrls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrandBackgroundUrls(original string, login string, branding string) *BrandBackgroundUrls {
	this := BrandBackgroundUrls{}
	this.Original = original
	this.Login = login
	this.Branding = branding
	return &this
}

// NewBrandBackgroundUrlsWithDefaults instantiates a new BrandBackgroundUrls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrandBackgroundUrlsWithDefaults() *BrandBackgroundUrls {
	this := BrandBackgroundUrls{}
	return &this
}

// GetOriginal returns the Original field value
func (o *BrandBackgroundUrls) GetOriginal() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Original
}

// GetOriginalOk returns a tuple with the Original field value
// and a boolean to check if the value has been set.
func (o *BrandBackgroundUrls) GetOriginalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Original, true
}

// SetOriginal sets field value
func (o *BrandBackgroundUrls) SetOriginal(v string) {
	o.Original = v
}

// GetLogin returns the Login field value
func (o *BrandBackgroundUrls) GetLogin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Login
}

// GetLoginOk returns a tuple with the Login field value
// and a boolean to check if the value has been set.
func (o *BrandBackgroundUrls) GetLoginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Login, true
}

// SetLogin sets field value
func (o *BrandBackgroundUrls) SetLogin(v string) {
	o.Login = v
}

// GetBranding returns the Branding field value
func (o *BrandBackgroundUrls) GetBranding() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branding
}

// GetBrandingOk returns a tuple with the Branding field value
// and a boolean to check if the value has been set.
func (o *BrandBackgroundUrls) GetBrandingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branding, true
}

// SetBranding sets field value
func (o *BrandBackgroundUrls) SetBranding(v string) {
	o.Branding = v
}

func (o BrandBackgroundUrls) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BrandBackgroundUrls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["original"] = o.Original
	toSerialize["login"] = o.Login
	toSerialize["branding"] = o.Branding
	return toSerialize, nil
}

type NullableBrandBackgroundUrls struct {
	value *BrandBackgroundUrls
	isSet bool
}

func (v NullableBrandBackgroundUrls) Get() *BrandBackgroundUrls {
	return v.value
}

func (v *NullableBrandBackgroundUrls) Set(val *BrandBackgroundUrls) {
	v.value = val
	v.isSet = true
}

func (v NullableBrandBackgroundUrls) IsSet() bool {
	return v.isSet
}

func (v *NullableBrandBackgroundUrls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrandBackgroundUrls(val *BrandBackgroundUrls) *NullableBrandBackgroundUrls {
	return &NullableBrandBackgroundUrls{value: val, isSet: true}
}

func (v NullableBrandBackgroundUrls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrandBackgroundUrls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


