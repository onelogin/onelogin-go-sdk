/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the ClockCounter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClockCounter{}

// ClockCounter unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
type ClockCounter struct {
	Value *int32 `json:"value,omitempty"`
	Unit *int32 `json:"unit,omitempty"`
}

// NewClockCounter instantiates a new ClockCounter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClockCounter() *ClockCounter {
	this := ClockCounter{}
	return &this
}

// NewClockCounterWithDefaults instantiates a new ClockCounter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClockCounterWithDefaults() *ClockCounter {
	this := ClockCounter{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ClockCounter) GetValue() int32 {
	if o == nil || isNil(o.Value) {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClockCounter) GetValueOk() (*int32, bool) {
	if o == nil || isNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ClockCounter) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *ClockCounter) SetValue(v int32) {
	o.Value = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *ClockCounter) GetUnit() int32 {
	if o == nil || isNil(o.Unit) {
		var ret int32
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClockCounter) GetUnitOk() (*int32, bool) {
	if o == nil || isNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *ClockCounter) HasUnit() bool {
	if o != nil && !isNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given int32 and assigns it to the Unit field.
func (o *ClockCounter) SetUnit(v int32) {
	o.Unit = &v
}

func (o ClockCounter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClockCounter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !isNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableClockCounter struct {
	value *ClockCounter
	isSet bool
}

func (v NullableClockCounter) Get() *ClockCounter {
	return v.value
}

func (v *NullableClockCounter) Set(val *ClockCounter) {
	v.value = val
	v.isSet = true
}

func (v NullableClockCounter) IsSet() bool {
	return v.isSet
}

func (v *NullableClockCounter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClockCounter(val *ClockCounter) *NullableClockCounter {
	return &NullableClockCounter{value: val, isSet: true}
}

func (v NullableClockCounter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClockCounter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


