/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
	"fmt"
)

// CreateApp200Response - struct for CreateApp200Response
type CreateApp200Response struct {
	GenericApp *GenericApp
	OidcApp *OidcApp
	SamlApp *SamlApp
}

// GenericAppAsCreateApp200Response is a convenience function that returns GenericApp wrapped in CreateApp200Response
func GenericAppAsCreateApp200Response(v *GenericApp) CreateApp200Response {
	return CreateApp200Response{
		GenericApp: v,
	}
}

// OidcAppAsCreateApp200Response is a convenience function that returns OidcApp wrapped in CreateApp200Response
func OidcAppAsCreateApp200Response(v *OidcApp) CreateApp200Response {
	return CreateApp200Response{
		OidcApp: v,
	}
}

// SamlAppAsCreateApp200Response is a convenience function that returns SamlApp wrapped in CreateApp200Response
func SamlAppAsCreateApp200Response(v *SamlApp) CreateApp200Response {
	return CreateApp200Response{
		SamlApp: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateApp200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GenericApp
	err = newStrictDecoder(data).Decode(&dst.GenericApp)
	if err == nil {
		jsonGenericApp, _ := json.Marshal(dst.GenericApp)
		if string(jsonGenericApp) == "{}" { // empty struct
			dst.GenericApp = nil
		} else {
			match++
		}
	} else {
		dst.GenericApp = nil
	}

	// try to unmarshal data into OidcApp
	err = newStrictDecoder(data).Decode(&dst.OidcApp)
	if err == nil {
		jsonOidcApp, _ := json.Marshal(dst.OidcApp)
		if string(jsonOidcApp) == "{}" { // empty struct
			dst.OidcApp = nil
		} else {
			match++
		}
	} else {
		dst.OidcApp = nil
	}

	// try to unmarshal data into SamlApp
	err = newStrictDecoder(data).Decode(&dst.SamlApp)
	if err == nil {
		jsonSamlApp, _ := json.Marshal(dst.SamlApp)
		if string(jsonSamlApp) == "{}" { // empty struct
			dst.SamlApp = nil
		} else {
			match++
		}
	} else {
		dst.SamlApp = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GenericApp = nil
		dst.OidcApp = nil
		dst.SamlApp = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateApp200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateApp200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateApp200Response) MarshalJSON() ([]byte, error) {
	if src.GenericApp != nil {
		return json.Marshal(&src.GenericApp)
	}

	if src.OidcApp != nil {
		return json.Marshal(&src.OidcApp)
	}

	if src.SamlApp != nil {
		return json.Marshal(&src.SamlApp)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateApp200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GenericApp != nil {
		return obj.GenericApp
	}

	if obj.OidcApp != nil {
		return obj.OidcApp
	}

	if obj.SamlApp != nil {
		return obj.SamlApp
	}

	// all schemas are nil
	return nil
}

type NullableCreateApp200Response struct {
	value *CreateApp200Response
	isSet bool
}

func (v NullableCreateApp200Response) Get() *CreateApp200Response {
	return v.value
}

func (v *NullableCreateApp200Response) Set(val *CreateApp200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateApp200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateApp200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateApp200Response(val *CreateApp200Response) *NullableCreateApp200Response {
	return &NullableCreateApp200Response{value: val, isSet: true}
}

func (v NullableCreateApp200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateApp200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


