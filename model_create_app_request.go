/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
	"fmt"
)

// CreateAppRequest - struct for CreateAppRequest
type CreateAppRequest struct {
	GenericApp *GenericApp
	OidcApp *OidcApp
	SamlApp *SamlApp
}

// GenericAppAsCreateAppRequest is a convenience function that returns GenericApp wrapped in CreateAppRequest
func GenericAppAsCreateAppRequest(v *GenericApp) CreateAppRequest {
	return CreateAppRequest{
		GenericApp: v,
	}
}

// OidcAppAsCreateAppRequest is a convenience function that returns OidcApp wrapped in CreateAppRequest
func OidcAppAsCreateAppRequest(v *OidcApp) CreateAppRequest {
	return CreateAppRequest{
		OidcApp: v,
	}
}

// SamlAppAsCreateAppRequest is a convenience function that returns SamlApp wrapped in CreateAppRequest
func SamlAppAsCreateAppRequest(v *SamlApp) CreateAppRequest {
	return CreateAppRequest{
		SamlApp: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateAppRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GenericApp
	err = newStrictDecoder(data).Decode(&dst.GenericApp)
	if err == nil {
		jsonGenericApp, _ := json.Marshal(dst.GenericApp)
		if string(jsonGenericApp) == "{}" { // empty struct
			dst.GenericApp = nil
		} else {
			match++
		}
	} else {
		dst.GenericApp = nil
	}

	// try to unmarshal data into OidcApp
	err = newStrictDecoder(data).Decode(&dst.OidcApp)
	if err == nil {
		jsonOidcApp, _ := json.Marshal(dst.OidcApp)
		if string(jsonOidcApp) == "{}" { // empty struct
			dst.OidcApp = nil
		} else {
			match++
		}
	} else {
		dst.OidcApp = nil
	}

	// try to unmarshal data into SamlApp
	err = newStrictDecoder(data).Decode(&dst.SamlApp)
	if err == nil {
		jsonSamlApp, _ := json.Marshal(dst.SamlApp)
		if string(jsonSamlApp) == "{}" { // empty struct
			dst.SamlApp = nil
		} else {
			match++
		}
	} else {
		dst.SamlApp = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GenericApp = nil
		dst.OidcApp = nil
		dst.SamlApp = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateAppRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateAppRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateAppRequest) MarshalJSON() ([]byte, error) {
	if src.GenericApp != nil {
		return json.Marshal(&src.GenericApp)
	}

	if src.OidcApp != nil {
		return json.Marshal(&src.OidcApp)
	}

	if src.SamlApp != nil {
		return json.Marshal(&src.SamlApp)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateAppRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GenericApp != nil {
		return obj.GenericApp
	}

	if obj.OidcApp != nil {
		return obj.OidcApp
	}

	if obj.SamlApp != nil {
		return obj.SamlApp
	}

	// all schemas are nil
	return nil
}

type NullableCreateAppRequest struct {
	value *CreateAppRequest
	isSet bool
}

func (v NullableCreateAppRequest) Get() *CreateAppRequest {
	return v.value
}

func (v *NullableCreateAppRequest) Set(val *CreateAppRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAppRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAppRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAppRequest(val *CreateAppRequest) *NullableCreateAppRequest {
	return &NullableCreateAppRequest{value: val, isSet: true}
}

func (v NullableCreateAppRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAppRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


