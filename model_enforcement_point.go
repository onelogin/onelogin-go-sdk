/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the EnforcementPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnforcementPoint{}

// EnforcementPoint For apps that connect to a OneLogin Access Enforcement Point the following enforcement_point object will be included with the app payload.
type EnforcementPoint struct {
	// Require user authentication to access any resource protected by this enforcement point.
	RequireSitewideAuthentication *bool `json:"require_sitewide_authentication,omitempty"`
	// If access is conditional, the conditions that must evaluate to true to allow access to a resource. For example, to require the user must be authenticated and have either the role Admin or User
	Conditions *string `json:"conditions,omitempty"`
	SessionExpiryFixed *ClockCounter `json:"session_expiry_fixed,omitempty"`
	SessionExpiryInactivity *ClockCounter `json:"session_expiry_inactivity,omitempty"`
	// Specify to always `allow`, `deny` access to resources, of if access is `conditional`.
	Permissions *string `json:"permissions,omitempty"`
	// Can only be set on create. Access Gateway Token.
	Token *string `json:"token,omitempty"`
	// A fully-qualified URL to the internal application including scheme, authority and path. The target host authority must be an IP address, not a hostname.
	Target NullableString `json:"target,omitempty"`
	// Array of resource objects
	Resources []EnforcementPointResourcesInner `json:"resources,omitempty"`
	// The root path to the application, often the name of the application. Can be any name, path or just a slash (“/”). The context root uniquely identifies the application within the enforcement point.
	ContextRoot *string `json:"context_root,omitempty"`
	// Use the target host header as opposed to the original gateway or upstream host header.
	UseTargetHostHeader *bool `json:"use_target_host_header,omitempty"`
	// A comma-delimited list of one or more virtual hosts that map to applications assigned to the enforcement point. A VHOST may be a host name or an IP address. VHOST distinguish between applications that are at the same context root.
	Vhost NullableString `json:"vhost,omitempty"`
	// The location within the context root to which the browser will be redirected for IdP-initiated single sign-on. For example, the landing page might be an index page in the context root such as index.html or default.aspx. The landing page cannot begin with a slash and must use valid URL characters.
	LandingPage NullableString `json:"landing_page,omitempty"`
	// The URL path evaluation is case insensitive by default. Resources hosted on web servers such as Apache, NGINX and Java EE are case sensitive paths. Web servers such as Microsoft IIS are not case-sensitive.
	CaseSensitive *bool `json:"case_sensitive,omitempty"`
}

// NewEnforcementPoint instantiates a new EnforcementPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnforcementPoint() *EnforcementPoint {
	this := EnforcementPoint{}
	return &this
}

// NewEnforcementPointWithDefaults instantiates a new EnforcementPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnforcementPointWithDefaults() *EnforcementPoint {
	this := EnforcementPoint{}
	return &this
}

// GetRequireSitewideAuthentication returns the RequireSitewideAuthentication field value if set, zero value otherwise.
func (o *EnforcementPoint) GetRequireSitewideAuthentication() bool {
	if o == nil || isNil(o.RequireSitewideAuthentication) {
		var ret bool
		return ret
	}
	return *o.RequireSitewideAuthentication
}

// GetRequireSitewideAuthenticationOk returns a tuple with the RequireSitewideAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnforcementPoint) GetRequireSitewideAuthenticationOk() (*bool, bool) {
	if o == nil || isNil(o.RequireSitewideAuthentication) {
		return nil, false
	}
	return o.RequireSitewideAuthentication, true
}

// HasRequireSitewideAuthentication returns a boolean if a field has been set.
func (o *EnforcementPoint) HasRequireSitewideAuthentication() bool {
	if o != nil && !isNil(o.RequireSitewideAuthentication) {
		return true
	}

	return false
}

// SetRequireSitewideAuthentication gets a reference to the given bool and assigns it to the RequireSitewideAuthentication field.
func (o *EnforcementPoint) SetRequireSitewideAuthentication(v bool) {
	o.RequireSitewideAuthentication = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *EnforcementPoint) GetConditions() string {
	if o == nil || isNil(o.Conditions) {
		var ret string
		return ret
	}
	return *o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnforcementPoint) GetConditionsOk() (*string, bool) {
	if o == nil || isNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *EnforcementPoint) HasConditions() bool {
	if o != nil && !isNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given string and assigns it to the Conditions field.
func (o *EnforcementPoint) SetConditions(v string) {
	o.Conditions = &v
}

// GetSessionExpiryFixed returns the SessionExpiryFixed field value if set, zero value otherwise.
func (o *EnforcementPoint) GetSessionExpiryFixed() ClockCounter {
	if o == nil || isNil(o.SessionExpiryFixed) {
		var ret ClockCounter
		return ret
	}
	return *o.SessionExpiryFixed
}

// GetSessionExpiryFixedOk returns a tuple with the SessionExpiryFixed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnforcementPoint) GetSessionExpiryFixedOk() (*ClockCounter, bool) {
	if o == nil || isNil(o.SessionExpiryFixed) {
		return nil, false
	}
	return o.SessionExpiryFixed, true
}

// HasSessionExpiryFixed returns a boolean if a field has been set.
func (o *EnforcementPoint) HasSessionExpiryFixed() bool {
	if o != nil && !isNil(o.SessionExpiryFixed) {
		return true
	}

	return false
}

// SetSessionExpiryFixed gets a reference to the given ClockCounter and assigns it to the SessionExpiryFixed field.
func (o *EnforcementPoint) SetSessionExpiryFixed(v ClockCounter) {
	o.SessionExpiryFixed = &v
}

// GetSessionExpiryInactivity returns the SessionExpiryInactivity field value if set, zero value otherwise.
func (o *EnforcementPoint) GetSessionExpiryInactivity() ClockCounter {
	if o == nil || isNil(o.SessionExpiryInactivity) {
		var ret ClockCounter
		return ret
	}
	return *o.SessionExpiryInactivity
}

// GetSessionExpiryInactivityOk returns a tuple with the SessionExpiryInactivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnforcementPoint) GetSessionExpiryInactivityOk() (*ClockCounter, bool) {
	if o == nil || isNil(o.SessionExpiryInactivity) {
		return nil, false
	}
	return o.SessionExpiryInactivity, true
}

// HasSessionExpiryInactivity returns a boolean if a field has been set.
func (o *EnforcementPoint) HasSessionExpiryInactivity() bool {
	if o != nil && !isNil(o.SessionExpiryInactivity) {
		return true
	}

	return false
}

// SetSessionExpiryInactivity gets a reference to the given ClockCounter and assigns it to the SessionExpiryInactivity field.
func (o *EnforcementPoint) SetSessionExpiryInactivity(v ClockCounter) {
	o.SessionExpiryInactivity = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *EnforcementPoint) GetPermissions() string {
	if o == nil || isNil(o.Permissions) {
		var ret string
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnforcementPoint) GetPermissionsOk() (*string, bool) {
	if o == nil || isNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *EnforcementPoint) HasPermissions() bool {
	if o != nil && !isNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given string and assigns it to the Permissions field.
func (o *EnforcementPoint) SetPermissions(v string) {
	o.Permissions = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *EnforcementPoint) GetToken() string {
	if o == nil || isNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnforcementPoint) GetTokenOk() (*string, bool) {
	if o == nil || isNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *EnforcementPoint) HasToken() bool {
	if o != nil && !isNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *EnforcementPoint) SetToken(v string) {
	o.Token = &v
}

// GetTarget returns the Target field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnforcementPoint) GetTarget() string {
	if o == nil || isNil(o.Target.Get()) {
		var ret string
		return ret
	}
	return *o.Target.Get()
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnforcementPoint) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Target.Get(), o.Target.IsSet()
}

// HasTarget returns a boolean if a field has been set.
func (o *EnforcementPoint) HasTarget() bool {
	if o != nil && o.Target.IsSet() {
		return true
	}

	return false
}

// SetTarget gets a reference to the given NullableString and assigns it to the Target field.
func (o *EnforcementPoint) SetTarget(v string) {
	o.Target.Set(&v)
}
// SetTargetNil sets the value for Target to be an explicit nil
func (o *EnforcementPoint) SetTargetNil() {
	o.Target.Set(nil)
}

// UnsetTarget ensures that no value is present for Target, not even an explicit nil
func (o *EnforcementPoint) UnsetTarget() {
	o.Target.Unset()
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *EnforcementPoint) GetResources() []EnforcementPointResourcesInner {
	if o == nil || isNil(o.Resources) {
		var ret []EnforcementPointResourcesInner
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnforcementPoint) GetResourcesOk() ([]EnforcementPointResourcesInner, bool) {
	if o == nil || isNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *EnforcementPoint) HasResources() bool {
	if o != nil && !isNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []EnforcementPointResourcesInner and assigns it to the Resources field.
func (o *EnforcementPoint) SetResources(v []EnforcementPointResourcesInner) {
	o.Resources = v
}

// GetContextRoot returns the ContextRoot field value if set, zero value otherwise.
func (o *EnforcementPoint) GetContextRoot() string {
	if o == nil || isNil(o.ContextRoot) {
		var ret string
		return ret
	}
	return *o.ContextRoot
}

// GetContextRootOk returns a tuple with the ContextRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnforcementPoint) GetContextRootOk() (*string, bool) {
	if o == nil || isNil(o.ContextRoot) {
		return nil, false
	}
	return o.ContextRoot, true
}

// HasContextRoot returns a boolean if a field has been set.
func (o *EnforcementPoint) HasContextRoot() bool {
	if o != nil && !isNil(o.ContextRoot) {
		return true
	}

	return false
}

// SetContextRoot gets a reference to the given string and assigns it to the ContextRoot field.
func (o *EnforcementPoint) SetContextRoot(v string) {
	o.ContextRoot = &v
}

// GetUseTargetHostHeader returns the UseTargetHostHeader field value if set, zero value otherwise.
func (o *EnforcementPoint) GetUseTargetHostHeader() bool {
	if o == nil || isNil(o.UseTargetHostHeader) {
		var ret bool
		return ret
	}
	return *o.UseTargetHostHeader
}

// GetUseTargetHostHeaderOk returns a tuple with the UseTargetHostHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnforcementPoint) GetUseTargetHostHeaderOk() (*bool, bool) {
	if o == nil || isNil(o.UseTargetHostHeader) {
		return nil, false
	}
	return o.UseTargetHostHeader, true
}

// HasUseTargetHostHeader returns a boolean if a field has been set.
func (o *EnforcementPoint) HasUseTargetHostHeader() bool {
	if o != nil && !isNil(o.UseTargetHostHeader) {
		return true
	}

	return false
}

// SetUseTargetHostHeader gets a reference to the given bool and assigns it to the UseTargetHostHeader field.
func (o *EnforcementPoint) SetUseTargetHostHeader(v bool) {
	o.UseTargetHostHeader = &v
}

// GetVhost returns the Vhost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnforcementPoint) GetVhost() string {
	if o == nil || isNil(o.Vhost.Get()) {
		var ret string
		return ret
	}
	return *o.Vhost.Get()
}

// GetVhostOk returns a tuple with the Vhost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnforcementPoint) GetVhostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vhost.Get(), o.Vhost.IsSet()
}

// HasVhost returns a boolean if a field has been set.
func (o *EnforcementPoint) HasVhost() bool {
	if o != nil && o.Vhost.IsSet() {
		return true
	}

	return false
}

// SetVhost gets a reference to the given NullableString and assigns it to the Vhost field.
func (o *EnforcementPoint) SetVhost(v string) {
	o.Vhost.Set(&v)
}
// SetVhostNil sets the value for Vhost to be an explicit nil
func (o *EnforcementPoint) SetVhostNil() {
	o.Vhost.Set(nil)
}

// UnsetVhost ensures that no value is present for Vhost, not even an explicit nil
func (o *EnforcementPoint) UnsetVhost() {
	o.Vhost.Unset()
}

// GetLandingPage returns the LandingPage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnforcementPoint) GetLandingPage() string {
	if o == nil || isNil(o.LandingPage.Get()) {
		var ret string
		return ret
	}
	return *o.LandingPage.Get()
}

// GetLandingPageOk returns a tuple with the LandingPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnforcementPoint) GetLandingPageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LandingPage.Get(), o.LandingPage.IsSet()
}

// HasLandingPage returns a boolean if a field has been set.
func (o *EnforcementPoint) HasLandingPage() bool {
	if o != nil && o.LandingPage.IsSet() {
		return true
	}

	return false
}

// SetLandingPage gets a reference to the given NullableString and assigns it to the LandingPage field.
func (o *EnforcementPoint) SetLandingPage(v string) {
	o.LandingPage.Set(&v)
}
// SetLandingPageNil sets the value for LandingPage to be an explicit nil
func (o *EnforcementPoint) SetLandingPageNil() {
	o.LandingPage.Set(nil)
}

// UnsetLandingPage ensures that no value is present for LandingPage, not even an explicit nil
func (o *EnforcementPoint) UnsetLandingPage() {
	o.LandingPage.Unset()
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise.
func (o *EnforcementPoint) GetCaseSensitive() bool {
	if o == nil || isNil(o.CaseSensitive) {
		var ret bool
		return ret
	}
	return *o.CaseSensitive
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnforcementPoint) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil || isNil(o.CaseSensitive) {
		return nil, false
	}
	return o.CaseSensitive, true
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *EnforcementPoint) HasCaseSensitive() bool {
	if o != nil && !isNil(o.CaseSensitive) {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given bool and assigns it to the CaseSensitive field.
func (o *EnforcementPoint) SetCaseSensitive(v bool) {
	o.CaseSensitive = &v
}

func (o EnforcementPoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnforcementPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RequireSitewideAuthentication) {
		toSerialize["require_sitewide_authentication"] = o.RequireSitewideAuthentication
	}
	if !isNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !isNil(o.SessionExpiryFixed) {
		toSerialize["session_expiry_fixed"] = o.SessionExpiryFixed
	}
	if !isNil(o.SessionExpiryInactivity) {
		toSerialize["session_expiry_inactivity"] = o.SessionExpiryInactivity
	}
	if !isNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	// skip: token is readOnly
	if o.Target.IsSet() {
		toSerialize["target"] = o.Target.Get()
	}
	if !isNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !isNil(o.ContextRoot) {
		toSerialize["context_root"] = o.ContextRoot
	}
	if !isNil(o.UseTargetHostHeader) {
		toSerialize["use_target_host_header"] = o.UseTargetHostHeader
	}
	if o.Vhost.IsSet() {
		toSerialize["vhost"] = o.Vhost.Get()
	}
	if o.LandingPage.IsSet() {
		toSerialize["landing_page"] = o.LandingPage.Get()
	}
	if !isNil(o.CaseSensitive) {
		toSerialize["case_sensitive"] = o.CaseSensitive
	}
	return toSerialize, nil
}

type NullableEnforcementPoint struct {
	value *EnforcementPoint
	isSet bool
}

func (v NullableEnforcementPoint) Get() *EnforcementPoint {
	return v.value
}

func (v *NullableEnforcementPoint) Set(val *EnforcementPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableEnforcementPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableEnforcementPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnforcementPoint(val *EnforcementPoint) *NullableEnforcementPoint {
	return &NullableEnforcementPoint{value: val, isSet: true}
}

func (v NullableEnforcementPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnforcementPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


