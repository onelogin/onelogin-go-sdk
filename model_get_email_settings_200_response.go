/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
	"fmt"
)

// GetEmailSettings200Response - struct for GetEmailSettings200Response
type GetEmailSettings200Response struct {
	EmailConfig *EmailConfig
	GetEmailSettings200ResponseOneOf *GetEmailSettings200ResponseOneOf
}

// EmailConfigAsGetEmailSettings200Response is a convenience function that returns EmailConfig wrapped in GetEmailSettings200Response
func EmailConfigAsGetEmailSettings200Response(v *EmailConfig) GetEmailSettings200Response {
	return GetEmailSettings200Response{
		EmailConfig: v,
	}
}

// GetEmailSettings200ResponseOneOfAsGetEmailSettings200Response is a convenience function that returns GetEmailSettings200ResponseOneOf wrapped in GetEmailSettings200Response
func GetEmailSettings200ResponseOneOfAsGetEmailSettings200Response(v *GetEmailSettings200ResponseOneOf) GetEmailSettings200Response {
	return GetEmailSettings200Response{
		GetEmailSettings200ResponseOneOf: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetEmailSettings200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EmailConfig
	err = newStrictDecoder(data).Decode(&dst.EmailConfig)
	if err == nil {
		jsonEmailConfig, _ := json.Marshal(dst.EmailConfig)
		if string(jsonEmailConfig) == "{}" { // empty struct
			dst.EmailConfig = nil
		} else {
			match++
		}
	} else {
		dst.EmailConfig = nil
	}

	// try to unmarshal data into GetEmailSettings200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetEmailSettings200ResponseOneOf)
	if err == nil {
		jsonGetEmailSettings200ResponseOneOf, _ := json.Marshal(dst.GetEmailSettings200ResponseOneOf)
		if string(jsonGetEmailSettings200ResponseOneOf) == "{}" { // empty struct
			dst.GetEmailSettings200ResponseOneOf = nil
		} else {
			match++
		}
	} else {
		dst.GetEmailSettings200ResponseOneOf = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EmailConfig = nil
		dst.GetEmailSettings200ResponseOneOf = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetEmailSettings200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetEmailSettings200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetEmailSettings200Response) MarshalJSON() ([]byte, error) {
	if src.EmailConfig != nil {
		return json.Marshal(&src.EmailConfig)
	}

	if src.GetEmailSettings200ResponseOneOf != nil {
		return json.Marshal(&src.GetEmailSettings200ResponseOneOf)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetEmailSettings200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EmailConfig != nil {
		return obj.EmailConfig
	}

	if obj.GetEmailSettings200ResponseOneOf != nil {
		return obj.GetEmailSettings200ResponseOneOf
	}

	// all schemas are nil
	return nil
}

type NullableGetEmailSettings200Response struct {
	value *GetEmailSettings200Response
	isSet bool
}

func (v NullableGetEmailSettings200Response) Get() *GetEmailSettings200Response {
	return v.value
}

func (v *NullableGetEmailSettings200Response) Set(val *GetEmailSettings200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEmailSettings200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEmailSettings200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEmailSettings200Response(val *GetEmailSettings200Response) *NullableGetEmailSettings200Response {
	return &NullableGetEmailSettings200Response{value: val, isSet: true}
}

func (v NullableGetEmailSettings200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEmailSettings200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


