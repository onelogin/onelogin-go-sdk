/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the Hook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Hook{}

// Hook struct for Hook
type Hook struct {
	// The Hook unique ID in OneLogin.
	Id *string `json:"id,omitempty"`
	// A string describing the type of hook. e.g. `pre-authentication`
	Type string `json:"type"`
	// Boolean to enable or disable the hook. Disabled hooks will not run.
	Disabled bool `json:"disabled"`
	// The number of seconds to allow the hook function to run before before timing out. Maximum timeout varies based on the type of hook.
	Timeout int32 `json:"timeout"`
	// Environment Variable objects that will be available via process.env.ENV_VAR_NAME in the hook code.
	EnvVars []string `json:"env_vars"`
	// The Smart Hooks supported Node.js version to execute this hook with.
	Runtime string `json:"runtime"`
	// Number of retries if execution fails.
	Retries int32 `json:"retries"`
	// An object containing NPM packages that are bundled with the hook function.
	Packages map[string]string `json:"packages"`
	// A base64 encoded string containing the javascript function code.
	Function string `json:"function"`
	// The semantic version of the content that will be injected into this hook.
	ContextVersion *string `json:"context_version,omitempty"`
	// String describing the state of the hook function. When a hook is ready and disabled is false it will be executed.
	Status *string `json:"status,omitempty"`
	Options *HookOptions `json:"options,omitempty"`
	// An array of objects that let you limit the execution of a hook to users in specific roles.
	Conditions []Condition `json:"conditions,omitempty"`
	// ISO8601 format date that they hook function was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// ISO8601 format date that they hook function was last updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewHook instantiates a new Hook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHook(type_ string, disabled bool, timeout int32, envVars []string, runtime string, retries int32, packages map[string]string, function string) *Hook {
	this := Hook{}
	this.Type = type_
	this.Disabled = disabled
	this.Timeout = timeout
	this.EnvVars = envVars
	this.Runtime = runtime
	this.Retries = retries
	this.Packages = packages
	this.Function = function
	return &this
}

// NewHookWithDefaults instantiates a new Hook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHookWithDefaults() *Hook {
	this := Hook{}
	var disabled bool = true
	this.Disabled = disabled
	var timeout int32 = 1
	this.Timeout = timeout
	var retries int32 = 0
	this.Retries = retries
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Hook) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hook) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Hook) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Hook) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value
func (o *Hook) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Hook) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Hook) SetType(v string) {
	o.Type = v
}

// GetDisabled returns the Disabled field value
func (o *Hook) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *Hook) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *Hook) SetDisabled(v bool) {
	o.Disabled = v
}

// GetTimeout returns the Timeout field value
func (o *Hook) GetTimeout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value
// and a boolean to check if the value has been set.
func (o *Hook) GetTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeout, true
}

// SetTimeout sets field value
func (o *Hook) SetTimeout(v int32) {
	o.Timeout = v
}

// GetEnvVars returns the EnvVars field value
func (o *Hook) GetEnvVars() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EnvVars
}

// GetEnvVarsOk returns a tuple with the EnvVars field value
// and a boolean to check if the value has been set.
func (o *Hook) GetEnvVarsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnvVars, true
}

// SetEnvVars sets field value
func (o *Hook) SetEnvVars(v []string) {
	o.EnvVars = v
}

// GetRuntime returns the Runtime field value
func (o *Hook) GetRuntime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Runtime
}

// GetRuntimeOk returns a tuple with the Runtime field value
// and a boolean to check if the value has been set.
func (o *Hook) GetRuntimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Runtime, true
}

// SetRuntime sets field value
func (o *Hook) SetRuntime(v string) {
	o.Runtime = v
}

// GetRetries returns the Retries field value
func (o *Hook) GetRetries() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Retries
}

// GetRetriesOk returns a tuple with the Retries field value
// and a boolean to check if the value has been set.
func (o *Hook) GetRetriesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Retries, true
}

// SetRetries sets field value
func (o *Hook) SetRetries(v int32) {
	o.Retries = v
}

// GetPackages returns the Packages field value
func (o *Hook) GetPackages() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Packages
}

// GetPackagesOk returns a tuple with the Packages field value
// and a boolean to check if the value has been set.
func (o *Hook) GetPackagesOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Packages, true
}

// SetPackages sets field value
func (o *Hook) SetPackages(v map[string]string) {
	o.Packages = v
}

// GetFunction returns the Function field value
func (o *Hook) GetFunction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Function
}

// GetFunctionOk returns a tuple with the Function field value
// and a boolean to check if the value has been set.
func (o *Hook) GetFunctionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Function, true
}

// SetFunction sets field value
func (o *Hook) SetFunction(v string) {
	o.Function = v
}

// GetContextVersion returns the ContextVersion field value if set, zero value otherwise.
func (o *Hook) GetContextVersion() string {
	if o == nil || isNil(o.ContextVersion) {
		var ret string
		return ret
	}
	return *o.ContextVersion
}

// GetContextVersionOk returns a tuple with the ContextVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hook) GetContextVersionOk() (*string, bool) {
	if o == nil || isNil(o.ContextVersion) {
		return nil, false
	}
	return o.ContextVersion, true
}

// HasContextVersion returns a boolean if a field has been set.
func (o *Hook) HasContextVersion() bool {
	if o != nil && !isNil(o.ContextVersion) {
		return true
	}

	return false
}

// SetContextVersion gets a reference to the given string and assigns it to the ContextVersion field.
func (o *Hook) SetContextVersion(v string) {
	o.ContextVersion = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Hook) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hook) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Hook) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Hook) SetStatus(v string) {
	o.Status = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Hook) GetOptions() HookOptions {
	if o == nil || isNil(o.Options) {
		var ret HookOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hook) GetOptionsOk() (*HookOptions, bool) {
	if o == nil || isNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Hook) HasOptions() bool {
	if o != nil && !isNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given HookOptions and assigns it to the Options field.
func (o *Hook) SetOptions(v HookOptions) {
	o.Options = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *Hook) GetConditions() []Condition {
	if o == nil || isNil(o.Conditions) {
		var ret []Condition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hook) GetConditionsOk() ([]Condition, bool) {
	if o == nil || isNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *Hook) HasConditions() bool {
	if o != nil && !isNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []Condition and assigns it to the Conditions field.
func (o *Hook) SetConditions(v []Condition) {
	o.Conditions = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Hook) GetCreatedAt() string {
	if o == nil || isNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hook) GetCreatedAtOk() (*string, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Hook) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Hook) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Hook) GetUpdatedAt() string {
	if o == nil || isNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hook) GetUpdatedAtOk() (*string, bool) {
	if o == nil || isNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Hook) HasUpdatedAt() bool {
	if o != nil && !isNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *Hook) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o Hook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Hook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["type"] = o.Type
	toSerialize["disabled"] = o.Disabled
	toSerialize["timeout"] = o.Timeout
	toSerialize["env_vars"] = o.EnvVars
	toSerialize["runtime"] = o.Runtime
	toSerialize["retries"] = o.Retries
	toSerialize["packages"] = o.Packages
	toSerialize["function"] = o.Function
	if !isNil(o.ContextVersion) {
		toSerialize["context_version"] = o.ContextVersion
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !isNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !isNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !isNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableHook struct {
	value *Hook
	isSet bool
}

func (v NullableHook) Get() *Hook {
	return v.value
}

func (v *NullableHook) Set(val *Hook) {
	v.value = val
	v.isSet = true
}

func (v NullableHook) IsSet() bool {
	return v.isSet
}

func (v *NullableHook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHook(val *Hook) *NullableHook {
	return &NullableHook{value: val, isSet: true}
}

func (v NullableHook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


