/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the HookEnvvar type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HookEnvvar{}

// HookEnvvar struct for HookEnvvar
type HookEnvvar struct {
	// A unique identifier for the Hook Environment Variable
	Id *string `json:"id,omitempty"`
	// The name of the environment variable.
	Name string `json:"name"`
	// The ISO8601 formatted date that the environment variable was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// The ISO8601 formatted date that the environment variable was last updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// The secret value that will be encrypted at rest and injected in applicable hook functions at run time.
	Value string `json:"value"`
}

// NewHookEnvvar instantiates a new HookEnvvar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHookEnvvar(name string, value string) *HookEnvvar {
	this := HookEnvvar{}
	this.Name = name
	this.Value = value
	return &this
}

// NewHookEnvvarWithDefaults instantiates a new HookEnvvar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHookEnvvarWithDefaults() *HookEnvvar {
	this := HookEnvvar{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HookEnvvar) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookEnvvar) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HookEnvvar) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *HookEnvvar) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *HookEnvvar) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HookEnvvar) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *HookEnvvar) SetName(v string) {
	o.Name = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *HookEnvvar) GetCreatedAt() string {
	if o == nil || isNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookEnvvar) GetCreatedAtOk() (*string, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *HookEnvvar) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *HookEnvvar) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *HookEnvvar) GetUpdatedAt() string {
	if o == nil || isNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookEnvvar) GetUpdatedAtOk() (*string, bool) {
	if o == nil || isNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *HookEnvvar) HasUpdatedAt() bool {
	if o != nil && !isNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *HookEnvvar) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetValue returns the Value field value
func (o *HookEnvvar) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *HookEnvvar) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *HookEnvvar) SetValue(v string) {
	o.Value = v
}

func (o HookEnvvar) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HookEnvvar) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	toSerialize["name"] = o.Name
	if !isNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !isNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableHookEnvvar struct {
	value *HookEnvvar
	isSet bool
}

func (v NullableHookEnvvar) Get() *HookEnvvar {
	return v.value
}

func (v *NullableHookEnvvar) Set(val *HookEnvvar) {
	v.value = val
	v.isSet = true
}

func (v NullableHookEnvvar) IsSet() bool {
	return v.isSet
}

func (v *NullableHookEnvvar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHookEnvvar(val *HookEnvvar) *NullableHookEnvvar {
	return &NullableHookEnvvar{value: val, isSet: true}
}

func (v NullableHookEnvvar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHookEnvvar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


