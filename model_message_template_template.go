/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
	"fmt"
)

// MessageTemplateTemplate - struct for MessageTemplateTemplate
type MessageTemplateTemplate struct {
	MessageTemplateTemplateOneOf *MessageTemplateTemplateOneOf
	MessageTemplateTemplateOneOf1 *MessageTemplateTemplateOneOf1
}

// MessageTemplateTemplateOneOfAsMessageTemplateTemplate is a convenience function that returns MessageTemplateTemplateOneOf wrapped in MessageTemplateTemplate
func MessageTemplateTemplateOneOfAsMessageTemplateTemplate(v *MessageTemplateTemplateOneOf) MessageTemplateTemplate {
	return MessageTemplateTemplate{
		MessageTemplateTemplateOneOf: v,
	}
}

// MessageTemplateTemplateOneOf1AsMessageTemplateTemplate is a convenience function that returns MessageTemplateTemplateOneOf1 wrapped in MessageTemplateTemplate
func MessageTemplateTemplateOneOf1AsMessageTemplateTemplate(v *MessageTemplateTemplateOneOf1) MessageTemplateTemplate {
	return MessageTemplateTemplate{
		MessageTemplateTemplateOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MessageTemplateTemplate) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MessageTemplateTemplateOneOf
	err = newStrictDecoder(data).Decode(&dst.MessageTemplateTemplateOneOf)
	if err == nil {
		jsonMessageTemplateTemplateOneOf, _ := json.Marshal(dst.MessageTemplateTemplateOneOf)
		if string(jsonMessageTemplateTemplateOneOf) == "{}" { // empty struct
			dst.MessageTemplateTemplateOneOf = nil
		} else {
			match++
		}
	} else {
		dst.MessageTemplateTemplateOneOf = nil
	}

	// try to unmarshal data into MessageTemplateTemplateOneOf1
	err = newStrictDecoder(data).Decode(&dst.MessageTemplateTemplateOneOf1)
	if err == nil {
		jsonMessageTemplateTemplateOneOf1, _ := json.Marshal(dst.MessageTemplateTemplateOneOf1)
		if string(jsonMessageTemplateTemplateOneOf1) == "{}" { // empty struct
			dst.MessageTemplateTemplateOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.MessageTemplateTemplateOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MessageTemplateTemplateOneOf = nil
		dst.MessageTemplateTemplateOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MessageTemplateTemplate)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MessageTemplateTemplate)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MessageTemplateTemplate) MarshalJSON() ([]byte, error) {
	if src.MessageTemplateTemplateOneOf != nil {
		return json.Marshal(&src.MessageTemplateTemplateOneOf)
	}

	if src.MessageTemplateTemplateOneOf1 != nil {
		return json.Marshal(&src.MessageTemplateTemplateOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MessageTemplateTemplate) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MessageTemplateTemplateOneOf != nil {
		return obj.MessageTemplateTemplateOneOf
	}

	if obj.MessageTemplateTemplateOneOf1 != nil {
		return obj.MessageTemplateTemplateOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableMessageTemplateTemplate struct {
	value *MessageTemplateTemplate
	isSet bool
}

func (v NullableMessageTemplateTemplate) Get() *MessageTemplateTemplate {
	return v.value
}

func (v *NullableMessageTemplateTemplate) Set(val *MessageTemplateTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageTemplateTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageTemplateTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageTemplateTemplate(val *MessageTemplateTemplate) *NullableMessageTemplateTemplate {
	return &NullableMessageTemplateTemplate{value: val, isSet: true}
}

func (v NullableMessageTemplateTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageTemplateTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


