/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the OauthToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OauthToken{}

// OauthToken struct for OauthToken
type OauthToken struct {
	// Provides the requested access token. You can use this token to call our resource APIs.
	AccessToken *string `json:"access_token,omitempty"`
	// Time at which the access token was generated.
	CreatedAt *string `json:"created_at,omitempty"`
	// Indicates that the generated access token expires in 36,000 seconds, 600 minutes, or 10 hours. An expired access token cannot be used to make resource API calls, but it can still be used along with its associated refresh token to call the Refresh Tokens v2 API.
	ExpiresIn *int32 `json:"expires_in,omitempty"`
	// deprecated No longer in use
	RefreshToken *string `json:"refresh_token,omitempty"`
	// Indicates that the generated access token is a bearer token.
	TokenType *string `json:"token_type,omitempty"`
	// Account ID associated with the API credentials used to generate the token.
	AccountId *int32 `json:"account_id,omitempty"`
}

// NewOauthToken instantiates a new OauthToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOauthToken() *OauthToken {
	this := OauthToken{}
	return &this
}

// NewOauthTokenWithDefaults instantiates a new OauthToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOauthTokenWithDefaults() *OauthToken {
	this := OauthToken{}
	return &this
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *OauthToken) GetAccessToken() string {
	if o == nil || isNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OauthToken) GetAccessTokenOk() (*string, bool) {
	if o == nil || isNil(o.AccessToken) {
		return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *OauthToken) HasAccessToken() bool {
	if o != nil && !isNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *OauthToken) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OauthToken) GetCreatedAt() string {
	if o == nil || isNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OauthToken) GetCreatedAtOk() (*string, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OauthToken) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *OauthToken) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *OauthToken) GetExpiresIn() int32 {
	if o == nil || isNil(o.ExpiresIn) {
		var ret int32
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OauthToken) GetExpiresInOk() (*int32, bool) {
	if o == nil || isNil(o.ExpiresIn) {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *OauthToken) HasExpiresIn() bool {
	if o != nil && !isNil(o.ExpiresIn) {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given int32 and assigns it to the ExpiresIn field.
func (o *OauthToken) SetExpiresIn(v int32) {
	o.ExpiresIn = &v
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise.
func (o *OauthToken) GetRefreshToken() string {
	if o == nil || isNil(o.RefreshToken) {
		var ret string
		return ret
	}
	return *o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OauthToken) GetRefreshTokenOk() (*string, bool) {
	if o == nil || isNil(o.RefreshToken) {
		return nil, false
	}
	return o.RefreshToken, true
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *OauthToken) HasRefreshToken() bool {
	if o != nil && !isNil(o.RefreshToken) {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given string and assigns it to the RefreshToken field.
func (o *OauthToken) SetRefreshToken(v string) {
	o.RefreshToken = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *OauthToken) GetTokenType() string {
	if o == nil || isNil(o.TokenType) {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OauthToken) GetTokenTypeOk() (*string, bool) {
	if o == nil || isNil(o.TokenType) {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *OauthToken) HasTokenType() bool {
	if o != nil && !isNil(o.TokenType) {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *OauthToken) SetTokenType(v string) {
	o.TokenType = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *OauthToken) GetAccountId() int32 {
	if o == nil || isNil(o.AccountId) {
		var ret int32
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OauthToken) GetAccountIdOk() (*int32, bool) {
	if o == nil || isNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *OauthToken) HasAccountId() bool {
	if o != nil && !isNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int32 and assigns it to the AccountId field.
func (o *OauthToken) SetAccountId(v int32) {
	o.AccountId = &v
}

func (o OauthToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OauthToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AccessToken) {
		toSerialize["access_token"] = o.AccessToken
	}
	if !isNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !isNil(o.ExpiresIn) {
		toSerialize["expires_in"] = o.ExpiresIn
	}
	if !isNil(o.RefreshToken) {
		toSerialize["refresh_token"] = o.RefreshToken
	}
	if !isNil(o.TokenType) {
		toSerialize["token_type"] = o.TokenType
	}
	if !isNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	return toSerialize, nil
}

type NullableOauthToken struct {
	value *OauthToken
	isSet bool
}

func (v NullableOauthToken) Get() *OauthToken {
	return v.value
}

func (v *NullableOauthToken) Set(val *OauthToken) {
	v.value = val
	v.isSet = true
}

func (v NullableOauthToken) IsSet() bool {
	return v.isSet
}

func (v *NullableOauthToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauthToken(val *OauthToken) *NullableOauthToken {
	return &NullableOauthToken{value: val, isSet: true}
}

func (v NullableOauthToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauthToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


