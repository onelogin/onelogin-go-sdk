/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the OtpDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OtpDevice{}

// OtpDevice struct for OtpDevice
type OtpDevice struct {
	// The identifier of the factor to enroll the user with.
	FactorId int32 `json:"factor_id"`
	// A name for the users device
	DisplayName string `json:"display_name"`
	// The phone number of the user in E.164 format.
	Number string `json:"number"`
	// Defaults to false. Some factors like SMS or Voice require that a user recieve a token and then that token is supplied to the Verify endpoint before the device is considered active. You can set verfied to `true` which indicates the the users phone number is pre verified and the device can be immediately activated.           
	Verified *bool `json:"verified,omitempty"`
}

// NewOtpDevice instantiates a new OtpDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOtpDevice(factorId int32, displayName string, number string) *OtpDevice {
	this := OtpDevice{}
	this.FactorId = factorId
	this.DisplayName = displayName
	this.Number = number
	return &this
}

// NewOtpDeviceWithDefaults instantiates a new OtpDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOtpDeviceWithDefaults() *OtpDevice {
	this := OtpDevice{}
	return &this
}

// GetFactorId returns the FactorId field value
func (o *OtpDevice) GetFactorId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FactorId
}

// GetFactorIdOk returns a tuple with the FactorId field value
// and a boolean to check if the value has been set.
func (o *OtpDevice) GetFactorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FactorId, true
}

// SetFactorId sets field value
func (o *OtpDevice) SetFactorId(v int32) {
	o.FactorId = v
}

// GetDisplayName returns the DisplayName field value
func (o *OtpDevice) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *OtpDevice) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *OtpDevice) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetNumber returns the Number field value
func (o *OtpDevice) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *OtpDevice) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *OtpDevice) SetNumber(v string) {
	o.Number = v
}

// GetVerified returns the Verified field value if set, zero value otherwise.
func (o *OtpDevice) GetVerified() bool {
	if o == nil || isNil(o.Verified) {
		var ret bool
		return ret
	}
	return *o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtpDevice) GetVerifiedOk() (*bool, bool) {
	if o == nil || isNil(o.Verified) {
		return nil, false
	}
	return o.Verified, true
}

// HasVerified returns a boolean if a field has been set.
func (o *OtpDevice) HasVerified() bool {
	if o != nil && !isNil(o.Verified) {
		return true
	}

	return false
}

// SetVerified gets a reference to the given bool and assigns it to the Verified field.
func (o *OtpDevice) SetVerified(v bool) {
	o.Verified = &v
}

func (o OtpDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OtpDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: factor_id is readOnly
	toSerialize["display_name"] = o.DisplayName
	toSerialize["number"] = o.Number
	if !isNil(o.Verified) {
		toSerialize["verified"] = o.Verified
	}
	return toSerialize, nil
}

type NullableOtpDevice struct {
	value *OtpDevice
	isSet bool
}

func (v NullableOtpDevice) Get() *OtpDevice {
	return v.value
}

func (v *NullableOtpDevice) Set(val *OtpDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableOtpDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableOtpDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOtpDevice(val *OtpDevice) *NullableOtpDevice {
	return &NullableOtpDevice{value: val, isSet: true}
}

func (v NullableOtpDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOtpDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


