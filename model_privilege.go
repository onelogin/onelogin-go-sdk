/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the Privilege type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Privilege{}

// Privilege struct for Privilege
type Privilege struct {
	Id *string `json:"id,omitempty"`
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	Privilege PrivilegePrivilege `json:"privilege"`
}

// NewPrivilege instantiates a new Privilege object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivilege(name string, privilege PrivilegePrivilege) *Privilege {
	this := Privilege{}
	this.Name = name
	this.Privilege = privilege
	return &this
}

// NewPrivilegeWithDefaults instantiates a new Privilege object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivilegeWithDefaults() *Privilege {
	this := Privilege{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Privilege) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Privilege) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Privilege) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Privilege) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Privilege) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Privilege) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Privilege) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Privilege) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Privilege) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Privilege) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Privilege) SetDescription(v string) {
	o.Description = &v
}

// GetPrivilege returns the Privilege field value
func (o *Privilege) GetPrivilege() PrivilegePrivilege {
	if o == nil {
		var ret PrivilegePrivilege
		return ret
	}

	return o.Privilege
}

// GetPrivilegeOk returns a tuple with the Privilege field value
// and a boolean to check if the value has been set.
func (o *Privilege) GetPrivilegeOk() (*PrivilegePrivilege, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Privilege, true
}

// SetPrivilege sets field value
func (o *Privilege) SetPrivilege(v PrivilegePrivilege) {
	o.Privilege = v
}

func (o Privilege) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Privilege) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["privilege"] = o.Privilege
	return toSerialize, nil
}

type NullablePrivilege struct {
	value *Privilege
	isSet bool
}

func (v NullablePrivilege) Get() *Privilege {
	return v.value
}

func (v *NullablePrivilege) Set(val *Privilege) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilege) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilege) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilege(val *Privilege) *NullablePrivilege {
	return &NullablePrivilege{value: val, isSet: true}
}

func (v NullablePrivilege) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilege) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


