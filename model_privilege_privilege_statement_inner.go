/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the PrivilegePrivilegeStatementInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivilegePrivilegeStatementInner{}

// PrivilegePrivilegeStatementInner struct for PrivilegePrivilegeStatementInner
type PrivilegePrivilegeStatementInner struct {
	// Set to “Allow.” By default, all actions are denied, this Statement allows the listed actions to be executed.
	Effect string `json:"Effect"`
	// An array of strings that represent actions within OneLogin. Actions are prefixed with the class of object they are related to and followed by a specific action for the given class. e.g. users:List, where the class is users and the specific action is List. Don’t mix classes within an Action array. To create a privilege that includes multiple different classes, create multiple statements. A wildcard * that includes all actions is supported. Use wildcards to create a Super User privilege.
	Action []string `json:"Action"`
	// Target the privileged action against specific resources with the scope. The scope pattern is the class of object used by the Action, followed by an ID that represents a resource in OneLogin. e.g. apps/1234, where apps is the class and 1234 is the ID of an app. The wildcard * is supported and indicates that all resources of the class type declared, in the Action, are in scope. The Action and Scope classes must match. However, there is an exception, a scope of roles/{role_id} can be combined with Actions on the user or app class. The exception allows you to target groups of users or apps with specific actions.
	Scope []string `json:"Scope"`
}

// NewPrivilegePrivilegeStatementInner instantiates a new PrivilegePrivilegeStatementInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivilegePrivilegeStatementInner(effect string, action []string, scope []string) *PrivilegePrivilegeStatementInner {
	this := PrivilegePrivilegeStatementInner{}
	this.Effect = effect
	this.Action = action
	this.Scope = scope
	return &this
}

// NewPrivilegePrivilegeStatementInnerWithDefaults instantiates a new PrivilegePrivilegeStatementInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivilegePrivilegeStatementInnerWithDefaults() *PrivilegePrivilegeStatementInner {
	this := PrivilegePrivilegeStatementInner{}
	return &this
}

// GetEffect returns the Effect field value
func (o *PrivilegePrivilegeStatementInner) GetEffect() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Effect
}

// GetEffectOk returns a tuple with the Effect field value
// and a boolean to check if the value has been set.
func (o *PrivilegePrivilegeStatementInner) GetEffectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Effect, true
}

// SetEffect sets field value
func (o *PrivilegePrivilegeStatementInner) SetEffect(v string) {
	o.Effect = v
}

// GetAction returns the Action field value
func (o *PrivilegePrivilegeStatementInner) GetAction() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *PrivilegePrivilegeStatementInner) GetActionOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Action, true
}

// SetAction sets field value
func (o *PrivilegePrivilegeStatementInner) SetAction(v []string) {
	o.Action = v
}

// GetScope returns the Scope field value
func (o *PrivilegePrivilegeStatementInner) GetScope() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *PrivilegePrivilegeStatementInner) GetScopeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scope, true
}

// SetScope sets field value
func (o *PrivilegePrivilegeStatementInner) SetScope(v []string) {
	o.Scope = v
}

func (o PrivilegePrivilegeStatementInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivilegePrivilegeStatementInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Effect"] = o.Effect
	toSerialize["Action"] = o.Action
	toSerialize["Scope"] = o.Scope
	return toSerialize, nil
}

type NullablePrivilegePrivilegeStatementInner struct {
	value *PrivilegePrivilegeStatementInner
	isSet bool
}

func (v NullablePrivilegePrivilegeStatementInner) Get() *PrivilegePrivilegeStatementInner {
	return v.value
}

func (v *NullablePrivilegePrivilegeStatementInner) Set(val *PrivilegePrivilegeStatementInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegePrivilegeStatementInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegePrivilegeStatementInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegePrivilegeStatementInner(val *PrivilegePrivilegeStatementInner) *NullablePrivilegePrivilegeStatementInner {
	return &NullablePrivilegePrivilegeStatementInner{value: val, isSet: true}
}

func (v NullablePrivilegePrivilegeStatementInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegePrivilegeStatementInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


