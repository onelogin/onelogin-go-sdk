/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the RateLimit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateLimit{}

// RateLimit struct for RateLimit
type RateLimit struct {
	// Rate Limit Limit
	XRateLimitLimit *int32 `json:"X-RateLimit-Limit,omitempty"`
	// Rate Limit Remaining
	XRateLimitRemaining *int32 `json:"X-RateLimit-Remaining,omitempty"`
	// Rate Limit Reset
	XRateLimitReset *int32 `json:"X-RateLimit-Reset,omitempty"`
}

// NewRateLimit instantiates a new RateLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateLimit() *RateLimit {
	this := RateLimit{}
	return &this
}

// NewRateLimitWithDefaults instantiates a new RateLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateLimitWithDefaults() *RateLimit {
	this := RateLimit{}
	return &this
}

// GetXRateLimitLimit returns the XRateLimitLimit field value if set, zero value otherwise.
func (o *RateLimit) GetXRateLimitLimit() int32 {
	if o == nil || isNil(o.XRateLimitLimit) {
		var ret int32
		return ret
	}
	return *o.XRateLimitLimit
}

// GetXRateLimitLimitOk returns a tuple with the XRateLimitLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimit) GetXRateLimitLimitOk() (*int32, bool) {
	if o == nil || isNil(o.XRateLimitLimit) {
		return nil, false
	}
	return o.XRateLimitLimit, true
}

// HasXRateLimitLimit returns a boolean if a field has been set.
func (o *RateLimit) HasXRateLimitLimit() bool {
	if o != nil && !isNil(o.XRateLimitLimit) {
		return true
	}

	return false
}

// SetXRateLimitLimit gets a reference to the given int32 and assigns it to the XRateLimitLimit field.
func (o *RateLimit) SetXRateLimitLimit(v int32) {
	o.XRateLimitLimit = &v
}

// GetXRateLimitRemaining returns the XRateLimitRemaining field value if set, zero value otherwise.
func (o *RateLimit) GetXRateLimitRemaining() int32 {
	if o == nil || isNil(o.XRateLimitRemaining) {
		var ret int32
		return ret
	}
	return *o.XRateLimitRemaining
}

// GetXRateLimitRemainingOk returns a tuple with the XRateLimitRemaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimit) GetXRateLimitRemainingOk() (*int32, bool) {
	if o == nil || isNil(o.XRateLimitRemaining) {
		return nil, false
	}
	return o.XRateLimitRemaining, true
}

// HasXRateLimitRemaining returns a boolean if a field has been set.
func (o *RateLimit) HasXRateLimitRemaining() bool {
	if o != nil && !isNil(o.XRateLimitRemaining) {
		return true
	}

	return false
}

// SetXRateLimitRemaining gets a reference to the given int32 and assigns it to the XRateLimitRemaining field.
func (o *RateLimit) SetXRateLimitRemaining(v int32) {
	o.XRateLimitRemaining = &v
}

// GetXRateLimitReset returns the XRateLimitReset field value if set, zero value otherwise.
func (o *RateLimit) GetXRateLimitReset() int32 {
	if o == nil || isNil(o.XRateLimitReset) {
		var ret int32
		return ret
	}
	return *o.XRateLimitReset
}

// GetXRateLimitResetOk returns a tuple with the XRateLimitReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimit) GetXRateLimitResetOk() (*int32, bool) {
	if o == nil || isNil(o.XRateLimitReset) {
		return nil, false
	}
	return o.XRateLimitReset, true
}

// HasXRateLimitReset returns a boolean if a field has been set.
func (o *RateLimit) HasXRateLimitReset() bool {
	if o != nil && !isNil(o.XRateLimitReset) {
		return true
	}

	return false
}

// SetXRateLimitReset gets a reference to the given int32 and assigns it to the XRateLimitReset field.
func (o *RateLimit) SetXRateLimitReset(v int32) {
	o.XRateLimitReset = &v
}

func (o RateLimit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateLimit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.XRateLimitLimit) {
		toSerialize["X-RateLimit-Limit"] = o.XRateLimitLimit
	}
	if !isNil(o.XRateLimitRemaining) {
		toSerialize["X-RateLimit-Remaining"] = o.XRateLimitRemaining
	}
	if !isNil(o.XRateLimitReset) {
		toSerialize["X-RateLimit-Reset"] = o.XRateLimitReset
	}
	return toSerialize, nil
}

type NullableRateLimit struct {
	value *RateLimit
	isSet bool
}

func (v NullableRateLimit) Get() *RateLimit {
	return v.value
}

func (v *NullableRateLimit) Set(val *RateLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableRateLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableRateLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateLimit(val *RateLimit) *NullableRateLimit {
	return &NullableRateLimit{value: val, isSet: true}
}

func (v NullableRateLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


