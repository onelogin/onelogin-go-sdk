/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the SamlAssert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SamlAssert{}

// SamlAssert struct for SamlAssert
type SamlAssert struct {
	// Set this to the username or email of the OneLogin user accessing the app for which you want to generate a SAML token.
	UsernameOrEmail string `json:"username_or_email"`
	// Password of the OneLogin user accessing the app for which you want to generate a SAML token.
	Password string `json:"password"`
	// App ID of the app for which you want to generate a SAML token. This is the app ID in OneLogin.
	AppId string `json:"app_id"`
	// Set to the subdomain of the OneLogin user accessing the app for which you want to generate a SAML token.
	Subdomain string `json:"subdomain"`
	// If you are using this API in a scenario in which MFA is required and youâ€™ll need to be able to honor IP address whitelisting defined in MFA policies, provide this parameter and set its value to the whitelisted IP address that needs to be bypassed.
	IpAddress *string `json:"ip_address,omitempty"`
}

// NewSamlAssert instantiates a new SamlAssert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSamlAssert(usernameOrEmail string, password string, appId string, subdomain string) *SamlAssert {
	this := SamlAssert{}
	this.UsernameOrEmail = usernameOrEmail
	this.Password = password
	this.AppId = appId
	this.Subdomain = subdomain
	return &this
}

// NewSamlAssertWithDefaults instantiates a new SamlAssert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSamlAssertWithDefaults() *SamlAssert {
	this := SamlAssert{}
	return &this
}

// GetUsernameOrEmail returns the UsernameOrEmail field value
func (o *SamlAssert) GetUsernameOrEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UsernameOrEmail
}

// GetUsernameOrEmailOk returns a tuple with the UsernameOrEmail field value
// and a boolean to check if the value has been set.
func (o *SamlAssert) GetUsernameOrEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsernameOrEmail, true
}

// SetUsernameOrEmail sets field value
func (o *SamlAssert) SetUsernameOrEmail(v string) {
	o.UsernameOrEmail = v
}

// GetPassword returns the Password field value
func (o *SamlAssert) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *SamlAssert) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *SamlAssert) SetPassword(v string) {
	o.Password = v
}

// GetAppId returns the AppId field value
func (o *SamlAssert) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *SamlAssert) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *SamlAssert) SetAppId(v string) {
	o.AppId = v
}

// GetSubdomain returns the Subdomain field value
func (o *SamlAssert) GetSubdomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value
// and a boolean to check if the value has been set.
func (o *SamlAssert) GetSubdomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subdomain, true
}

// SetSubdomain sets field value
func (o *SamlAssert) SetSubdomain(v string) {
	o.Subdomain = v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *SamlAssert) GetIpAddress() string {
	if o == nil || isNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlAssert) GetIpAddressOk() (*string, bool) {
	if o == nil || isNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *SamlAssert) HasIpAddress() bool {
	if o != nil && !isNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *SamlAssert) SetIpAddress(v string) {
	o.IpAddress = &v
}

func (o SamlAssert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SamlAssert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username_or_email"] = o.UsernameOrEmail
	toSerialize["password"] = o.Password
	toSerialize["app_id"] = o.AppId
	toSerialize["subdomain"] = o.Subdomain
	if !isNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	return toSerialize, nil
}

type NullableSamlAssert struct {
	value *SamlAssert
	isSet bool
}

func (v NullableSamlAssert) Get() *SamlAssert {
	return v.value
}

func (v *NullableSamlAssert) Set(val *SamlAssert) {
	v.value = val
	v.isSet = true
}

func (v NullableSamlAssert) IsSet() bool {
	return v.isSet
}

func (v *NullableSamlAssert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSamlAssert(val *SamlAssert) *NullableSamlAssert {
	return &NullableSamlAssert{value: val, isSet: true}
}

func (v NullableSamlAssert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSamlAssert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


