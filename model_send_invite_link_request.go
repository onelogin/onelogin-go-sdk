/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the SendInviteLinkRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendInviteLinkRequest{}

// SendInviteLinkRequest struct for SendInviteLinkRequest
type SendInviteLinkRequest struct {
	// Set to the user email address to generate an invite link. The value is case sensitive.
	Email *string `json:"email,omitempty"`
	// To send an invite email to a different address than the one provided in email, provide it here. The invite link is sent to this address instead.
	PersonalEmail *string `json:"personal_email,omitempty"`
}

// NewSendInviteLinkRequest instantiates a new SendInviteLinkRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendInviteLinkRequest() *SendInviteLinkRequest {
	this := SendInviteLinkRequest{}
	return &this
}

// NewSendInviteLinkRequestWithDefaults instantiates a new SendInviteLinkRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendInviteLinkRequestWithDefaults() *SendInviteLinkRequest {
	this := SendInviteLinkRequest{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SendInviteLinkRequest) GetEmail() string {
	if o == nil || isNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendInviteLinkRequest) GetEmailOk() (*string, bool) {
	if o == nil || isNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SendInviteLinkRequest) HasEmail() bool {
	if o != nil && !isNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SendInviteLinkRequest) SetEmail(v string) {
	o.Email = &v
}

// GetPersonalEmail returns the PersonalEmail field value if set, zero value otherwise.
func (o *SendInviteLinkRequest) GetPersonalEmail() string {
	if o == nil || isNil(o.PersonalEmail) {
		var ret string
		return ret
	}
	return *o.PersonalEmail
}

// GetPersonalEmailOk returns a tuple with the PersonalEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendInviteLinkRequest) GetPersonalEmailOk() (*string, bool) {
	if o == nil || isNil(o.PersonalEmail) {
		return nil, false
	}
	return o.PersonalEmail, true
}

// HasPersonalEmail returns a boolean if a field has been set.
func (o *SendInviteLinkRequest) HasPersonalEmail() bool {
	if o != nil && !isNil(o.PersonalEmail) {
		return true
	}

	return false
}

// SetPersonalEmail gets a reference to the given string and assigns it to the PersonalEmail field.
func (o *SendInviteLinkRequest) SetPersonalEmail(v string) {
	o.PersonalEmail = &v
}

func (o SendInviteLinkRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendInviteLinkRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !isNil(o.PersonalEmail) {
		toSerialize["personal_email"] = o.PersonalEmail
	}
	return toSerialize, nil
}

type NullableSendInviteLinkRequest struct {
	value *SendInviteLinkRequest
	isSet bool
}

func (v NullableSendInviteLinkRequest) Get() *SendInviteLinkRequest {
	return v.value
}

func (v *NullableSendInviteLinkRequest) Set(val *SendInviteLinkRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSendInviteLinkRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSendInviteLinkRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendInviteLinkRequest(val *SendInviteLinkRequest) *NullableSendInviteLinkRequest {
	return &NullableSendInviteLinkRequest{value: val, isSet: true}
}

func (v NullableSendInviteLinkRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendInviteLinkRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


