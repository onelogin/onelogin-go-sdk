/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
)

// checks if the SsoSaml type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SsoSaml{}

// SsoSaml struct for SsoSaml
type SsoSaml struct {
	MetadataUrl *string `json:"metadata_url,omitempty"`
	AcsUrl *string `json:"acs_url,omitempty"`
	SlsUrl *string `json:"sls_url,omitempty"`
	Issuer *string `json:"issuer,omitempty"`
	Certificate *SsoSamlCertificate `json:"certificate,omitempty"`
}

// NewSsoSaml instantiates a new SsoSaml object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSsoSaml() *SsoSaml {
	this := SsoSaml{}
	return &this
}

// NewSsoSamlWithDefaults instantiates a new SsoSaml object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSsoSamlWithDefaults() *SsoSaml {
	this := SsoSaml{}
	return &this
}

// GetMetadataUrl returns the MetadataUrl field value if set, zero value otherwise.
func (o *SsoSaml) GetMetadataUrl() string {
	if o == nil || isNil(o.MetadataUrl) {
		var ret string
		return ret
	}
	return *o.MetadataUrl
}

// GetMetadataUrlOk returns a tuple with the MetadataUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoSaml) GetMetadataUrlOk() (*string, bool) {
	if o == nil || isNil(o.MetadataUrl) {
		return nil, false
	}
	return o.MetadataUrl, true
}

// HasMetadataUrl returns a boolean if a field has been set.
func (o *SsoSaml) HasMetadataUrl() bool {
	if o != nil && !isNil(o.MetadataUrl) {
		return true
	}

	return false
}

// SetMetadataUrl gets a reference to the given string and assigns it to the MetadataUrl field.
func (o *SsoSaml) SetMetadataUrl(v string) {
	o.MetadataUrl = &v
}

// GetAcsUrl returns the AcsUrl field value if set, zero value otherwise.
func (o *SsoSaml) GetAcsUrl() string {
	if o == nil || isNil(o.AcsUrl) {
		var ret string
		return ret
	}
	return *o.AcsUrl
}

// GetAcsUrlOk returns a tuple with the AcsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoSaml) GetAcsUrlOk() (*string, bool) {
	if o == nil || isNil(o.AcsUrl) {
		return nil, false
	}
	return o.AcsUrl, true
}

// HasAcsUrl returns a boolean if a field has been set.
func (o *SsoSaml) HasAcsUrl() bool {
	if o != nil && !isNil(o.AcsUrl) {
		return true
	}

	return false
}

// SetAcsUrl gets a reference to the given string and assigns it to the AcsUrl field.
func (o *SsoSaml) SetAcsUrl(v string) {
	o.AcsUrl = &v
}

// GetSlsUrl returns the SlsUrl field value if set, zero value otherwise.
func (o *SsoSaml) GetSlsUrl() string {
	if o == nil || isNil(o.SlsUrl) {
		var ret string
		return ret
	}
	return *o.SlsUrl
}

// GetSlsUrlOk returns a tuple with the SlsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoSaml) GetSlsUrlOk() (*string, bool) {
	if o == nil || isNil(o.SlsUrl) {
		return nil, false
	}
	return o.SlsUrl, true
}

// HasSlsUrl returns a boolean if a field has been set.
func (o *SsoSaml) HasSlsUrl() bool {
	if o != nil && !isNil(o.SlsUrl) {
		return true
	}

	return false
}

// SetSlsUrl gets a reference to the given string and assigns it to the SlsUrl field.
func (o *SsoSaml) SetSlsUrl(v string) {
	o.SlsUrl = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *SsoSaml) GetIssuer() string {
	if o == nil || isNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoSaml) GetIssuerOk() (*string, bool) {
	if o == nil || isNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *SsoSaml) HasIssuer() bool {
	if o != nil && !isNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *SsoSaml) SetIssuer(v string) {
	o.Issuer = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *SsoSaml) GetCertificate() SsoSamlCertificate {
	if o == nil || isNil(o.Certificate) {
		var ret SsoSamlCertificate
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoSaml) GetCertificateOk() (*SsoSamlCertificate, bool) {
	if o == nil || isNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *SsoSaml) HasCertificate() bool {
	if o != nil && !isNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given SsoSamlCertificate and assigns it to the Certificate field.
func (o *SsoSaml) SetCertificate(v SsoSamlCertificate) {
	o.Certificate = &v
}

func (o SsoSaml) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SsoSaml) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.MetadataUrl) {
		toSerialize["metadata_url"] = o.MetadataUrl
	}
	if !isNil(o.AcsUrl) {
		toSerialize["acs_url"] = o.AcsUrl
	}
	if !isNil(o.SlsUrl) {
		toSerialize["sls_url"] = o.SlsUrl
	}
	if !isNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !isNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	return toSerialize, nil
}

type NullableSsoSaml struct {
	value *SsoSaml
	isSet bool
}

func (v NullableSsoSaml) Get() *SsoSaml {
	return v.value
}

func (v *NullableSsoSaml) Set(val *SsoSaml) {
	v.value = val
	v.isSet = true
}

func (v NullableSsoSaml) IsSet() bool {
	return v.isSet
}

func (v *NullableSsoSaml) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSsoSaml(val *SsoSaml) *NullableSsoSaml {
	return &NullableSsoSaml{value: val, isSet: true}
}

func (v NullableSsoSaml) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSsoSaml) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


