/*
OneLogin API

OpenAPI Specification for OneLogin

API version: 3.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onelogin

import (
	"encoding/json"
	"fmt"
)

// Verb Verbs are used to distinguish between different types of events. Where possible use one of the following verbs to describe the event. Alternately you can create custom verbs to describe other types of actions within your application.
type Verb string

// List of verb
const (
	LOG_IN Verb = "log-in"
	LOG_OUT Verb = "log-out"
	LOG_IN_DENIED Verb = "log-in-denied"
	AUTHENTICATION_CHALLENGE Verb = "authentication-challenge"
	AUTHENTICATION_CHALLENGE_PASS Verb = "authentication-challenge-pass"
	AUTHENTICATION_CHALLENGE_FAIL Verb = "authentication-challenge-fail"
)

// All allowed values of Verb enum
var AllowedVerbEnumValues = []Verb{
	"log-in",
	"log-out",
	"log-in-denied",
	"authentication-challenge",
	"authentication-challenge-pass",
	"authentication-challenge-fail",
}

func (v *Verb) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Verb(value)
	for _, existing := range AllowedVerbEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Verb", value)
}

// NewVerbFromValue returns a pointer to a valid Verb
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVerbFromValue(v string) (*Verb, error) {
	ev := Verb(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Verb: valid values are %v", v, AllowedVerbEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Verb) IsValid() bool {
	for _, existing := range AllowedVerbEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to verb value
func (v Verb) Ptr() *Verb {
	return &v
}

type NullableVerb struct {
	value *Verb
	isSet bool
}

func (v NullableVerb) Get() *Verb {
	return v.value
}

func (v *NullableVerb) Set(val *Verb) {
	v.value = val
	v.isSet = true
}

func (v NullableVerb) IsSet() bool {
	return v.isSet
}

func (v *NullableVerb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerb(val *Verb) *NullableVerb {
	return &NullableVerb{value: val, isSet: true}
}

func (v NullableVerb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

