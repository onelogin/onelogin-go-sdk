/*
OneLogin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Action struct for Action
type Action struct {
	// The action to apply
	Action *string `json:"action,omitempty"`
	// Only applicable to provisioned and set_* actions. Items in the array will be a plain text string or valid value for the selected action.
	Value []string `json:"value,omitempty"`
	// A regular expression to extract a value. Applies to provisionable, multi-selects, and string actions.
	Expression *string `json:"expression,omitempty"`
	// A hash containing scriptlet code that returns a value.
	Scriplet *string `json:"scriplet,omitempty"`
	// A template to construct a value. Applies to default, string, and list actions.
	Macro *string `json:"macro,omitempty"`
}

// NewAction instantiates a new Action object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAction() *Action {
	this := Action{}
	return &this
}

// NewActionWithDefaults instantiates a new Action object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionWithDefaults() *Action {
	this := Action{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *Action) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *Action) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *Action) SetAction(v string) {
	o.Action = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Action) GetValue() []string {
	if o == nil || o.Value == nil {
		var ret []string
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetValueOk() ([]string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Action) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given []string and assigns it to the Value field.
func (o *Action) SetValue(v []string) {
	o.Value = v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *Action) GetExpression() string {
	if o == nil || o.Expression == nil {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetExpressionOk() (*string, bool) {
	if o == nil || o.Expression == nil {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *Action) HasExpression() bool {
	if o != nil && o.Expression != nil {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *Action) SetExpression(v string) {
	o.Expression = &v
}

// GetScriplet returns the Scriplet field value if set, zero value otherwise.
func (o *Action) GetScriplet() string {
	if o == nil || o.Scriplet == nil {
		var ret string
		return ret
	}
	return *o.Scriplet
}

// GetScripletOk returns a tuple with the Scriplet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetScripletOk() (*string, bool) {
	if o == nil || o.Scriplet == nil {
		return nil, false
	}
	return o.Scriplet, true
}

// HasScriplet returns a boolean if a field has been set.
func (o *Action) HasScriplet() bool {
	if o != nil && o.Scriplet != nil {
		return true
	}

	return false
}

// SetScriplet gets a reference to the given string and assigns it to the Scriplet field.
func (o *Action) SetScriplet(v string) {
	o.Scriplet = &v
}

// GetMacro returns the Macro field value if set, zero value otherwise.
func (o *Action) GetMacro() string {
	if o == nil || o.Macro == nil {
		var ret string
		return ret
	}
	return *o.Macro
}

// GetMacroOk returns a tuple with the Macro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetMacroOk() (*string, bool) {
	if o == nil || o.Macro == nil {
		return nil, false
	}
	return o.Macro, true
}

// HasMacro returns a boolean if a field has been set.
func (o *Action) HasMacro() bool {
	if o != nil && o.Macro != nil {
		return true
	}

	return false
}

// SetMacro gets a reference to the given string and assigns it to the Macro field.
func (o *Action) SetMacro(v string) {
	o.Macro = &v
}

func (o Action) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Expression != nil {
		toSerialize["expression"] = o.Expression
	}
	if o.Scriplet != nil {
		toSerialize["scriplet"] = o.Scriplet
	}
	if o.Macro != nil {
		toSerialize["macro"] = o.Macro
	}
	return json.Marshal(toSerialize)
}

type NullableAction struct {
	value *Action
	isSet bool
}

func (v NullableAction) Get() *Action {
	return v.value
}

func (v *NullableAction) Set(val *Action) {
	v.value = val
	v.isSet = true
}

func (v NullableAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAction(val *Action) *NullableAction {
	return &NullableAction{value: val, isSet: true}
}

func (v NullableAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


