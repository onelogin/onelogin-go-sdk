/*
OneLogin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Device struct for Device
type Device struct {
	DeviceId *string `json:"device_id,omitempty"`
	UserDisplayName *string `json:"user_display_name,omitempty"`
	TypeDisplayName *string `json:"type_display_name,omitempty"`
	AuthFactorName *string `json:"auth_factor_name,omitempty"`
	Default *bool `json:"default,omitempty"`
}

// NewDevice instantiates a new Device object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevice() *Device {
	this := Device{}
	return &this
}

// NewDeviceWithDefaults instantiates a new Device object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceWithDefaults() *Device {
	this := Device{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *Device) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetDeviceIdOk() (*string, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *Device) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *Device) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetUserDisplayName returns the UserDisplayName field value if set, zero value otherwise.
func (o *Device) GetUserDisplayName() string {
	if o == nil || o.UserDisplayName == nil {
		var ret string
		return ret
	}
	return *o.UserDisplayName
}

// GetUserDisplayNameOk returns a tuple with the UserDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetUserDisplayNameOk() (*string, bool) {
	if o == nil || o.UserDisplayName == nil {
		return nil, false
	}
	return o.UserDisplayName, true
}

// HasUserDisplayName returns a boolean if a field has been set.
func (o *Device) HasUserDisplayName() bool {
	if o != nil && o.UserDisplayName != nil {
		return true
	}

	return false
}

// SetUserDisplayName gets a reference to the given string and assigns it to the UserDisplayName field.
func (o *Device) SetUserDisplayName(v string) {
	o.UserDisplayName = &v
}

// GetTypeDisplayName returns the TypeDisplayName field value if set, zero value otherwise.
func (o *Device) GetTypeDisplayName() string {
	if o == nil || o.TypeDisplayName == nil {
		var ret string
		return ret
	}
	return *o.TypeDisplayName
}

// GetTypeDisplayNameOk returns a tuple with the TypeDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetTypeDisplayNameOk() (*string, bool) {
	if o == nil || o.TypeDisplayName == nil {
		return nil, false
	}
	return o.TypeDisplayName, true
}

// HasTypeDisplayName returns a boolean if a field has been set.
func (o *Device) HasTypeDisplayName() bool {
	if o != nil && o.TypeDisplayName != nil {
		return true
	}

	return false
}

// SetTypeDisplayName gets a reference to the given string and assigns it to the TypeDisplayName field.
func (o *Device) SetTypeDisplayName(v string) {
	o.TypeDisplayName = &v
}

// GetAuthFactorName returns the AuthFactorName field value if set, zero value otherwise.
func (o *Device) GetAuthFactorName() string {
	if o == nil || o.AuthFactorName == nil {
		var ret string
		return ret
	}
	return *o.AuthFactorName
}

// GetAuthFactorNameOk returns a tuple with the AuthFactorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetAuthFactorNameOk() (*string, bool) {
	if o == nil || o.AuthFactorName == nil {
		return nil, false
	}
	return o.AuthFactorName, true
}

// HasAuthFactorName returns a boolean if a field has been set.
func (o *Device) HasAuthFactorName() bool {
	if o != nil && o.AuthFactorName != nil {
		return true
	}

	return false
}

// SetAuthFactorName gets a reference to the given string and assigns it to the AuthFactorName field.
func (o *Device) SetAuthFactorName(v string) {
	o.AuthFactorName = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *Device) GetDefault() bool {
	if o == nil || o.Default == nil {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetDefaultOk() (*bool, bool) {
	if o == nil || o.Default == nil {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *Device) HasDefault() bool {
	if o != nil && o.Default != nil {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *Device) SetDefault(v bool) {
	o.Default = &v
}

func (o Device) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceId != nil {
		toSerialize["device_id"] = o.DeviceId
	}
	if o.UserDisplayName != nil {
		toSerialize["user_display_name"] = o.UserDisplayName
	}
	if o.TypeDisplayName != nil {
		toSerialize["type_display_name"] = o.TypeDisplayName
	}
	if o.AuthFactorName != nil {
		toSerialize["auth_factor_name"] = o.AuthFactorName
	}
	if o.Default != nil {
		toSerialize["default"] = o.Default
	}
	return json.Marshal(toSerialize)
}

type NullableDevice struct {
	value *Device
	isSet bool
}

func (v NullableDevice) Get() *Device {
	return v.value
}

func (v *NullableDevice) Set(val *Device) {
	v.value = val
	v.isSet = true
}

func (v NullableDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevice(val *Device) *NullableDevice {
	return &NullableDevice{value: val, isSet: true}
}

func (v NullableDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


