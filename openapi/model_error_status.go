/*
OneLogin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ErrorStatus struct for ErrorStatus
type ErrorStatus struct {
	Code *int32 `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Errors []ErrorStatusErrorsInner `json:"errors,omitempty"`
}

// NewErrorStatus instantiates a new ErrorStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorStatus() *ErrorStatus {
	this := ErrorStatus{}
	return &this
}

// NewErrorStatusWithDefaults instantiates a new ErrorStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorStatusWithDefaults() *ErrorStatus {
	this := ErrorStatus{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ErrorStatus) GetCode() int32 {
	if o == nil || o.Code == nil {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorStatus) GetCodeOk() (*int32, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ErrorStatus) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *ErrorStatus) SetCode(v int32) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorStatus) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorStatus) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorStatus) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorStatus) SetMessage(v string) {
	o.Message = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ErrorStatus) GetErrors() []ErrorStatusErrorsInner {
	if o == nil || o.Errors == nil {
		var ret []ErrorStatusErrorsInner
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorStatus) GetErrorsOk() ([]ErrorStatusErrorsInner, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ErrorStatus) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ErrorStatusErrorsInner and assigns it to the Errors field.
func (o *ErrorStatus) SetErrors(v []ErrorStatusErrorsInner) {
	o.Errors = v
}

func (o ErrorStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableErrorStatus struct {
	value *ErrorStatus
	isSet bool
}

func (v NullableErrorStatus) Get() *ErrorStatus {
	return v.value
}

func (v *NullableErrorStatus) Set(val *ErrorStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorStatus(val *ErrorStatus) *NullableErrorStatus {
	return &NullableErrorStatus{value: val, isSet: true}
}

func (v NullableErrorStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


