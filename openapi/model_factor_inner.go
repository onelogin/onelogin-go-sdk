/*
OneLogin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FactorInner struct for FactorInner
type FactorInner struct {
	// MFA device identifier.
	Id *string `json:"id,omitempty"`
	// accepted : factor has been verified. pending: registered but has not been verified.
	Status *string `json:"status,omitempty"`
	// True = is user's default MFA device for OneLogin.
	Default *bool `json:"default,omitempty"`
	// \"Official\" authentication factor name, as it appears to administrators in OneLogin.
	AuthFactorName *string `json:"auth_factor_name,omitempty"`
	// Authentication factor display name as it appears to users upon initial registration, as defined by admins at Settings > Authentication Factors.
	TypeDisplayName *string `json:"type_display_name,omitempty"`
	// Authentication factor display name assigned by users when they enroll the device.
	UserDisplayName *string `json:"user_display_name,omitempty"`
	// A short lived token that is required to Verify the Factor. This token expires based on the expires_in parameter passed in.
	ExpiresAt *string `json:"expires_at,omitempty"`
	FactorData *FactorInnerFactorData `json:"factor_data,omitempty"`
}

// NewFactorInner instantiates a new FactorInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFactorInner() *FactorInner {
	this := FactorInner{}
	return &this
}

// NewFactorInnerWithDefaults instantiates a new FactorInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFactorInnerWithDefaults() *FactorInner {
	this := FactorInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FactorInner) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FactorInner) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FactorInner) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FactorInner) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FactorInner) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FactorInner) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FactorInner) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *FactorInner) SetStatus(v string) {
	o.Status = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *FactorInner) GetDefault() bool {
	if o == nil || o.Default == nil {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FactorInner) GetDefaultOk() (*bool, bool) {
	if o == nil || o.Default == nil {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *FactorInner) HasDefault() bool {
	if o != nil && o.Default != nil {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *FactorInner) SetDefault(v bool) {
	o.Default = &v
}

// GetAuthFactorName returns the AuthFactorName field value if set, zero value otherwise.
func (o *FactorInner) GetAuthFactorName() string {
	if o == nil || o.AuthFactorName == nil {
		var ret string
		return ret
	}
	return *o.AuthFactorName
}

// GetAuthFactorNameOk returns a tuple with the AuthFactorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FactorInner) GetAuthFactorNameOk() (*string, bool) {
	if o == nil || o.AuthFactorName == nil {
		return nil, false
	}
	return o.AuthFactorName, true
}

// HasAuthFactorName returns a boolean if a field has been set.
func (o *FactorInner) HasAuthFactorName() bool {
	if o != nil && o.AuthFactorName != nil {
		return true
	}

	return false
}

// SetAuthFactorName gets a reference to the given string and assigns it to the AuthFactorName field.
func (o *FactorInner) SetAuthFactorName(v string) {
	o.AuthFactorName = &v
}

// GetTypeDisplayName returns the TypeDisplayName field value if set, zero value otherwise.
func (o *FactorInner) GetTypeDisplayName() string {
	if o == nil || o.TypeDisplayName == nil {
		var ret string
		return ret
	}
	return *o.TypeDisplayName
}

// GetTypeDisplayNameOk returns a tuple with the TypeDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FactorInner) GetTypeDisplayNameOk() (*string, bool) {
	if o == nil || o.TypeDisplayName == nil {
		return nil, false
	}
	return o.TypeDisplayName, true
}

// HasTypeDisplayName returns a boolean if a field has been set.
func (o *FactorInner) HasTypeDisplayName() bool {
	if o != nil && o.TypeDisplayName != nil {
		return true
	}

	return false
}

// SetTypeDisplayName gets a reference to the given string and assigns it to the TypeDisplayName field.
func (o *FactorInner) SetTypeDisplayName(v string) {
	o.TypeDisplayName = &v
}

// GetUserDisplayName returns the UserDisplayName field value if set, zero value otherwise.
func (o *FactorInner) GetUserDisplayName() string {
	if o == nil || o.UserDisplayName == nil {
		var ret string
		return ret
	}
	return *o.UserDisplayName
}

// GetUserDisplayNameOk returns a tuple with the UserDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FactorInner) GetUserDisplayNameOk() (*string, bool) {
	if o == nil || o.UserDisplayName == nil {
		return nil, false
	}
	return o.UserDisplayName, true
}

// HasUserDisplayName returns a boolean if a field has been set.
func (o *FactorInner) HasUserDisplayName() bool {
	if o != nil && o.UserDisplayName != nil {
		return true
	}

	return false
}

// SetUserDisplayName gets a reference to the given string and assigns it to the UserDisplayName field.
func (o *FactorInner) SetUserDisplayName(v string) {
	o.UserDisplayName = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *FactorInner) GetExpiresAt() string {
	if o == nil || o.ExpiresAt == nil {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FactorInner) GetExpiresAtOk() (*string, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *FactorInner) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *FactorInner) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetFactorData returns the FactorData field value if set, zero value otherwise.
func (o *FactorInner) GetFactorData() FactorInnerFactorData {
	if o == nil || o.FactorData == nil {
		var ret FactorInnerFactorData
		return ret
	}
	return *o.FactorData
}

// GetFactorDataOk returns a tuple with the FactorData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FactorInner) GetFactorDataOk() (*FactorInnerFactorData, bool) {
	if o == nil || o.FactorData == nil {
		return nil, false
	}
	return o.FactorData, true
}

// HasFactorData returns a boolean if a field has been set.
func (o *FactorInner) HasFactorData() bool {
	if o != nil && o.FactorData != nil {
		return true
	}

	return false
}

// SetFactorData gets a reference to the given FactorInnerFactorData and assigns it to the FactorData field.
func (o *FactorInner) SetFactorData(v FactorInnerFactorData) {
	o.FactorData = &v
}

func (o FactorInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Default != nil {
		toSerialize["default"] = o.Default
	}
	if o.AuthFactorName != nil {
		toSerialize["auth_factor_name"] = o.AuthFactorName
	}
	if o.TypeDisplayName != nil {
		toSerialize["type_display_name"] = o.TypeDisplayName
	}
	if o.UserDisplayName != nil {
		toSerialize["user_display_name"] = o.UserDisplayName
	}
	if o.ExpiresAt != nil {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if o.FactorData != nil {
		toSerialize["factor_data"] = o.FactorData
	}
	return json.Marshal(toSerialize)
}

type NullableFactorInner struct {
	value *FactorInner
	isSet bool
}

func (v NullableFactorInner) Get() *FactorInner {
	return v.value
}

func (v *NullableFactorInner) Set(val *FactorInner) {
	v.value = val
	v.isSet = true
}

func (v NullableFactorInner) IsSet() bool {
	return v.isSet
}

func (v *NullableFactorInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFactorInner(val *FactorInner) *NullableFactorInner {
	return &NullableFactorInner{value: val, isSet: true}
}

func (v NullableFactorInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFactorInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


