/*
OneLogin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GenerateMfaTokenRequest struct for GenerateMfaTokenRequest
type GenerateMfaTokenRequest struct {
	// Set the duration of the token in seconds.
	ExpiresIn *string `json:"expires_in,omitempty"`
	// Defines if the token is reusable multiple times within the expiry window.
	Reusable *bool `json:"reusable,omitempty"`
}

// NewGenerateMfaTokenRequest instantiates a new GenerateMfaTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateMfaTokenRequest() *GenerateMfaTokenRequest {
	this := GenerateMfaTokenRequest{}
	return &this
}

// NewGenerateMfaTokenRequestWithDefaults instantiates a new GenerateMfaTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateMfaTokenRequestWithDefaults() *GenerateMfaTokenRequest {
	this := GenerateMfaTokenRequest{}
	return &this
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *GenerateMfaTokenRequest) GetExpiresIn() string {
	if o == nil || o.ExpiresIn == nil {
		var ret string
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateMfaTokenRequest) GetExpiresInOk() (*string, bool) {
	if o == nil || o.ExpiresIn == nil {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *GenerateMfaTokenRequest) HasExpiresIn() bool {
	if o != nil && o.ExpiresIn != nil {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given string and assigns it to the ExpiresIn field.
func (o *GenerateMfaTokenRequest) SetExpiresIn(v string) {
	o.ExpiresIn = &v
}

// GetReusable returns the Reusable field value if set, zero value otherwise.
func (o *GenerateMfaTokenRequest) GetReusable() bool {
	if o == nil || o.Reusable == nil {
		var ret bool
		return ret
	}
	return *o.Reusable
}

// GetReusableOk returns a tuple with the Reusable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateMfaTokenRequest) GetReusableOk() (*bool, bool) {
	if o == nil || o.Reusable == nil {
		return nil, false
	}
	return o.Reusable, true
}

// HasReusable returns a boolean if a field has been set.
func (o *GenerateMfaTokenRequest) HasReusable() bool {
	if o != nil && o.Reusable != nil {
		return true
	}

	return false
}

// SetReusable gets a reference to the given bool and assigns it to the Reusable field.
func (o *GenerateMfaTokenRequest) SetReusable(v bool) {
	o.Reusable = &v
}

func (o GenerateMfaTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpiresIn != nil {
		toSerialize["expires_in"] = o.ExpiresIn
	}
	if o.Reusable != nil {
		toSerialize["reusable"] = o.Reusable
	}
	return json.Marshal(toSerialize)
}

type NullableGenerateMfaTokenRequest struct {
	value *GenerateMfaTokenRequest
	isSet bool
}

func (v NullableGenerateMfaTokenRequest) Get() *GenerateMfaTokenRequest {
	return v.value
}

func (v *NullableGenerateMfaTokenRequest) Set(val *GenerateMfaTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateMfaTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateMfaTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateMfaTokenRequest(val *GenerateMfaTokenRequest) *NullableGenerateMfaTokenRequest {
	return &NullableGenerateMfaTokenRequest{value: val, isSet: true}
}

func (v NullableGenerateMfaTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateMfaTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


