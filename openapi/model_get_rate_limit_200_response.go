/*
OneLogin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetRateLimit200Response struct for GetRateLimit200Response
type GetRateLimit200Response struct {
	Status *Status `json:"status,omitempty"`
	Data *GetRateLimit200ResponseData `json:"data,omitempty"`
}

// NewGetRateLimit200Response instantiates a new GetRateLimit200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRateLimit200Response() *GetRateLimit200Response {
	this := GetRateLimit200Response{}
	return &this
}

// NewGetRateLimit200ResponseWithDefaults instantiates a new GetRateLimit200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRateLimit200ResponseWithDefaults() *GetRateLimit200Response {
	this := GetRateLimit200Response{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GetRateLimit200Response) GetStatus() Status {
	if o == nil || o.Status == nil {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRateLimit200Response) GetStatusOk() (*Status, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GetRateLimit200Response) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *GetRateLimit200Response) SetStatus(v Status) {
	o.Status = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetRateLimit200Response) GetData() GetRateLimit200ResponseData {
	if o == nil || o.Data == nil {
		var ret GetRateLimit200ResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRateLimit200Response) GetDataOk() (*GetRateLimit200ResponseData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetRateLimit200Response) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given GetRateLimit200ResponseData and assigns it to the Data field.
func (o *GetRateLimit200Response) SetData(v GetRateLimit200ResponseData) {
	o.Data = &v
}

func (o GetRateLimit200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableGetRateLimit200Response struct {
	value *GetRateLimit200Response
	isSet bool
}

func (v NullableGetRateLimit200Response) Get() *GetRateLimit200Response {
	return v.value
}

func (v *NullableGetRateLimit200Response) Set(val *GetRateLimit200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRateLimit200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRateLimit200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRateLimit200Response(val *GetRateLimit200Response) *NullableGetRateLimit200Response {
	return &NullableGetRateLimit200Response{value: val, isSet: true}
}

func (v NullableGetRateLimit200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRateLimit200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


