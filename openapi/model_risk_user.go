/*
OneLogin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RiskUser An Object containing User details.
type RiskUser struct {
	// A unique identifier for the user.
	Id string `json:"id"`
	// A name for the user.
	Name *string `json:"name,omitempty"`
	// Indicates if the metadata supplied in this event should be considered as trusted for the user.
	Authenticated *bool `json:"authenticated,omitempty"`
}

// NewRiskUser instantiates a new RiskUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskUser(id string) *RiskUser {
	this := RiskUser{}
	this.Id = id
	var authenticated bool = false
	this.Authenticated = &authenticated
	return &this
}

// NewRiskUserWithDefaults instantiates a new RiskUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskUserWithDefaults() *RiskUser {
	this := RiskUser{}
	var authenticated bool = false
	this.Authenticated = &authenticated
	return &this
}

// GetId returns the Id field value
func (o *RiskUser) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RiskUser) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RiskUser) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RiskUser) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskUser) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RiskUser) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RiskUser) SetName(v string) {
	o.Name = &v
}

// GetAuthenticated returns the Authenticated field value if set, zero value otherwise.
func (o *RiskUser) GetAuthenticated() bool {
	if o == nil || o.Authenticated == nil {
		var ret bool
		return ret
	}
	return *o.Authenticated
}

// GetAuthenticatedOk returns a tuple with the Authenticated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskUser) GetAuthenticatedOk() (*bool, bool) {
	if o == nil || o.Authenticated == nil {
		return nil, false
	}
	return o.Authenticated, true
}

// HasAuthenticated returns a boolean if a field has been set.
func (o *RiskUser) HasAuthenticated() bool {
	if o != nil && o.Authenticated != nil {
		return true
	}

	return false
}

// SetAuthenticated gets a reference to the given bool and assigns it to the Authenticated field.
func (o *RiskUser) SetAuthenticated(v bool) {
	o.Authenticated = &v
}

func (o RiskUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Authenticated != nil {
		toSerialize["authenticated"] = o.Authenticated
	}
	return json.Marshal(toSerialize)
}

type NullableRiskUser struct {
	value *RiskUser
	isSet bool
}

func (v NullableRiskUser) Get() *RiskUser {
	return v.value
}

func (v *NullableRiskUser) Set(val *RiskUser) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskUser) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskUser(val *RiskUser) *NullableRiskUser {
	return &NullableRiskUser{value: val, isSet: true}
}

func (v NullableRiskUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


