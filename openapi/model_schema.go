/*
OneLogin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Schema struct for Schema
type Schema struct {
	// Apps unique ID in OneLogin.
	Id *int32 `json:"id,omitempty"`
	// ID of the apps underlying connector.
	ConnectorId *int32 `json:"connector_id,omitempty"`
	// App name.
	Name *string `json:"name,omitempty"`
	// Freeform description of the app.
	Description *string `json:"description,omitempty"`
	// Freeform notes about the app.
	Notes *string `json:"notes,omitempty"`
	// The security policy assigned to the app.
	PolicyId *int32 `json:"policy_id,omitempty"`
	// The custom login page branding to use for this app. Applies to app initiated logins via OIDC or SAML.
	BrandId *int32 `json:"brand_id,omitempty"`
	// A link to the apps icon url.
	IconUrl *string `json:"icon_url,omitempty"`
	// Indicates if the app is visible in the OneLogin portal.
	Visible *bool `json:"visible,omitempty"`
	// An ID indicating the type of app.
	AuthMethod *int32 `json:"auth_method,omitempty"`
	// ID of the OneLogin portal tab that the app is assigned to.
	TabId *int32 `json:"tab_id,omitempty"`
	// The date the app was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// The date the app was last updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// List of Role IDs that are assigned to the app. On App Create or Update the entire array is replaced with the values provided.
	RoleIds []int32 `json:"role_ids,omitempty"`
	// Indicates whether or not administrators can access the app as a user that they have assumed control over.
	AllowAssumedSignin *bool `json:"allow_assumed_signin,omitempty"`
	Provisioning *SchemaProvisioning `json:"provisioning,omitempty"`
	Sso map[string]interface{} `json:"sso,omitempty"`
	Configuration map[string]interface{} `json:"configuration,omitempty"`
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	EnforcementPoint map[string]interface{} `json:"enforcement_point,omitempty"`
}

// NewSchema instantiates a new Schema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchema() *Schema {
	this := Schema{}
	return &this
}

// NewSchemaWithDefaults instantiates a new Schema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaWithDefaults() *Schema {
	this := Schema{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Schema) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Schema) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Schema) SetId(v int32) {
	o.Id = &v
}

// GetConnectorId returns the ConnectorId field value if set, zero value otherwise.
func (o *Schema) GetConnectorId() int32 {
	if o == nil || o.ConnectorId == nil {
		var ret int32
		return ret
	}
	return *o.ConnectorId
}

// GetConnectorIdOk returns a tuple with the ConnectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetConnectorIdOk() (*int32, bool) {
	if o == nil || o.ConnectorId == nil {
		return nil, false
	}
	return o.ConnectorId, true
}

// HasConnectorId returns a boolean if a field has been set.
func (o *Schema) HasConnectorId() bool {
	if o != nil && o.ConnectorId != nil {
		return true
	}

	return false
}

// SetConnectorId gets a reference to the given int32 and assigns it to the ConnectorId field.
func (o *Schema) SetConnectorId(v int32) {
	o.ConnectorId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Schema) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Schema) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Schema) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Schema) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Schema) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Schema) SetDescription(v string) {
	o.Description = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Schema) GetNotes() string {
	if o == nil || o.Notes == nil {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNotesOk() (*string, bool) {
	if o == nil || o.Notes == nil {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Schema) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Schema) SetNotes(v string) {
	o.Notes = &v
}

// GetPolicyId returns the PolicyId field value if set, zero value otherwise.
func (o *Schema) GetPolicyId() int32 {
	if o == nil || o.PolicyId == nil {
		var ret int32
		return ret
	}
	return *o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetPolicyIdOk() (*int32, bool) {
	if o == nil || o.PolicyId == nil {
		return nil, false
	}
	return o.PolicyId, true
}

// HasPolicyId returns a boolean if a field has been set.
func (o *Schema) HasPolicyId() bool {
	if o != nil && o.PolicyId != nil {
		return true
	}

	return false
}

// SetPolicyId gets a reference to the given int32 and assigns it to the PolicyId field.
func (o *Schema) SetPolicyId(v int32) {
	o.PolicyId = &v
}

// GetBrandId returns the BrandId field value if set, zero value otherwise.
func (o *Schema) GetBrandId() int32 {
	if o == nil || o.BrandId == nil {
		var ret int32
		return ret
	}
	return *o.BrandId
}

// GetBrandIdOk returns a tuple with the BrandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetBrandIdOk() (*int32, bool) {
	if o == nil || o.BrandId == nil {
		return nil, false
	}
	return o.BrandId, true
}

// HasBrandId returns a boolean if a field has been set.
func (o *Schema) HasBrandId() bool {
	if o != nil && o.BrandId != nil {
		return true
	}

	return false
}

// SetBrandId gets a reference to the given int32 and assigns it to the BrandId field.
func (o *Schema) SetBrandId(v int32) {
	o.BrandId = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *Schema) GetIconUrl() string {
	if o == nil || o.IconUrl == nil {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetIconUrlOk() (*string, bool) {
	if o == nil || o.IconUrl == nil {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *Schema) HasIconUrl() bool {
	if o != nil && o.IconUrl != nil {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *Schema) SetIconUrl(v string) {
	o.IconUrl = &v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *Schema) GetVisible() bool {
	if o == nil || o.Visible == nil {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetVisibleOk() (*bool, bool) {
	if o == nil || o.Visible == nil {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *Schema) HasVisible() bool {
	if o != nil && o.Visible != nil {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *Schema) SetVisible(v bool) {
	o.Visible = &v
}

// GetAuthMethod returns the AuthMethod field value if set, zero value otherwise.
func (o *Schema) GetAuthMethod() int32 {
	if o == nil || o.AuthMethod == nil {
		var ret int32
		return ret
	}
	return *o.AuthMethod
}

// GetAuthMethodOk returns a tuple with the AuthMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetAuthMethodOk() (*int32, bool) {
	if o == nil || o.AuthMethod == nil {
		return nil, false
	}
	return o.AuthMethod, true
}

// HasAuthMethod returns a boolean if a field has been set.
func (o *Schema) HasAuthMethod() bool {
	if o != nil && o.AuthMethod != nil {
		return true
	}

	return false
}

// SetAuthMethod gets a reference to the given int32 and assigns it to the AuthMethod field.
func (o *Schema) SetAuthMethod(v int32) {
	o.AuthMethod = &v
}

// GetTabId returns the TabId field value if set, zero value otherwise.
func (o *Schema) GetTabId() int32 {
	if o == nil || o.TabId == nil {
		var ret int32
		return ret
	}
	return *o.TabId
}

// GetTabIdOk returns a tuple with the TabId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetTabIdOk() (*int32, bool) {
	if o == nil || o.TabId == nil {
		return nil, false
	}
	return o.TabId, true
}

// HasTabId returns a boolean if a field has been set.
func (o *Schema) HasTabId() bool {
	if o != nil && o.TabId != nil {
		return true
	}

	return false
}

// SetTabId gets a reference to the given int32 and assigns it to the TabId field.
func (o *Schema) SetTabId(v int32) {
	o.TabId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Schema) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Schema) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Schema) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Schema) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Schema) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *Schema) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetRoleIds returns the RoleIds field value if set, zero value otherwise.
func (o *Schema) GetRoleIds() []int32 {
	if o == nil || o.RoleIds == nil {
		var ret []int32
		return ret
	}
	return o.RoleIds
}

// GetRoleIdsOk returns a tuple with the RoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetRoleIdsOk() ([]int32, bool) {
	if o == nil || o.RoleIds == nil {
		return nil, false
	}
	return o.RoleIds, true
}

// HasRoleIds returns a boolean if a field has been set.
func (o *Schema) HasRoleIds() bool {
	if o != nil && o.RoleIds != nil {
		return true
	}

	return false
}

// SetRoleIds gets a reference to the given []int32 and assigns it to the RoleIds field.
func (o *Schema) SetRoleIds(v []int32) {
	o.RoleIds = v
}

// GetAllowAssumedSignin returns the AllowAssumedSignin field value if set, zero value otherwise.
func (o *Schema) GetAllowAssumedSignin() bool {
	if o == nil || o.AllowAssumedSignin == nil {
		var ret bool
		return ret
	}
	return *o.AllowAssumedSignin
}

// GetAllowAssumedSigninOk returns a tuple with the AllowAssumedSignin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetAllowAssumedSigninOk() (*bool, bool) {
	if o == nil || o.AllowAssumedSignin == nil {
		return nil, false
	}
	return o.AllowAssumedSignin, true
}

// HasAllowAssumedSignin returns a boolean if a field has been set.
func (o *Schema) HasAllowAssumedSignin() bool {
	if o != nil && o.AllowAssumedSignin != nil {
		return true
	}

	return false
}

// SetAllowAssumedSignin gets a reference to the given bool and assigns it to the AllowAssumedSignin field.
func (o *Schema) SetAllowAssumedSignin(v bool) {
	o.AllowAssumedSignin = &v
}

// GetProvisioning returns the Provisioning field value if set, zero value otherwise.
func (o *Schema) GetProvisioning() SchemaProvisioning {
	if o == nil || o.Provisioning == nil {
		var ret SchemaProvisioning
		return ret
	}
	return *o.Provisioning
}

// GetProvisioningOk returns a tuple with the Provisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetProvisioningOk() (*SchemaProvisioning, bool) {
	if o == nil || o.Provisioning == nil {
		return nil, false
	}
	return o.Provisioning, true
}

// HasProvisioning returns a boolean if a field has been set.
func (o *Schema) HasProvisioning() bool {
	if o != nil && o.Provisioning != nil {
		return true
	}

	return false
}

// SetProvisioning gets a reference to the given SchemaProvisioning and assigns it to the Provisioning field.
func (o *Schema) SetProvisioning(v SchemaProvisioning) {
	o.Provisioning = &v
}

// GetSso returns the Sso field value if set, zero value otherwise.
func (o *Schema) GetSso() map[string]interface{} {
	if o == nil || o.Sso == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Sso
}

// GetSsoOk returns a tuple with the Sso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetSsoOk() (map[string]interface{}, bool) {
	if o == nil || o.Sso == nil {
		return nil, false
	}
	return o.Sso, true
}

// HasSso returns a boolean if a field has been set.
func (o *Schema) HasSso() bool {
	if o != nil && o.Sso != nil {
		return true
	}

	return false
}

// SetSso gets a reference to the given map[string]interface{} and assigns it to the Sso field.
func (o *Schema) SetSso(v map[string]interface{}) {
	o.Sso = v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *Schema) GetConfiguration() map[string]interface{} {
	if o == nil || o.Configuration == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || o.Configuration == nil {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *Schema) HasConfiguration() bool {
	if o != nil && o.Configuration != nil {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]interface{} and assigns it to the Configuration field.
func (o *Schema) SetConfiguration(v map[string]interface{}) {
	o.Configuration = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *Schema) GetParameters() map[string]interface{} {
	if o == nil || o.Parameters == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *Schema) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *Schema) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetEnforcementPoint returns the EnforcementPoint field value if set, zero value otherwise.
func (o *Schema) GetEnforcementPoint() map[string]interface{} {
	if o == nil || o.EnforcementPoint == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.EnforcementPoint
}

// GetEnforcementPointOk returns a tuple with the EnforcementPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetEnforcementPointOk() (map[string]interface{}, bool) {
	if o == nil || o.EnforcementPoint == nil {
		return nil, false
	}
	return o.EnforcementPoint, true
}

// HasEnforcementPoint returns a boolean if a field has been set.
func (o *Schema) HasEnforcementPoint() bool {
	if o != nil && o.EnforcementPoint != nil {
		return true
	}

	return false
}

// SetEnforcementPoint gets a reference to the given map[string]interface{} and assigns it to the EnforcementPoint field.
func (o *Schema) SetEnforcementPoint(v map[string]interface{}) {
	o.EnforcementPoint = v
}

func (o Schema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ConnectorId != nil {
		toSerialize["connector_id"] = o.ConnectorId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Notes != nil {
		toSerialize["notes"] = o.Notes
	}
	if o.PolicyId != nil {
		toSerialize["policy_id"] = o.PolicyId
	}
	if o.BrandId != nil {
		toSerialize["brand_id"] = o.BrandId
	}
	if o.IconUrl != nil {
		toSerialize["icon_url"] = o.IconUrl
	}
	if o.Visible != nil {
		toSerialize["visible"] = o.Visible
	}
	if o.AuthMethod != nil {
		toSerialize["auth_method"] = o.AuthMethod
	}
	if o.TabId != nil {
		toSerialize["tab_id"] = o.TabId
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.RoleIds != nil {
		toSerialize["role_ids"] = o.RoleIds
	}
	if o.AllowAssumedSignin != nil {
		toSerialize["allow_assumed_signin"] = o.AllowAssumedSignin
	}
	if o.Provisioning != nil {
		toSerialize["provisioning"] = o.Provisioning
	}
	if o.Sso != nil {
		toSerialize["sso"] = o.Sso
	}
	if o.Configuration != nil {
		toSerialize["configuration"] = o.Configuration
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.EnforcementPoint != nil {
		toSerialize["enforcement_point"] = o.EnforcementPoint
	}
	return json.Marshal(toSerialize)
}

type NullableSchema struct {
	value *Schema
	isSet bool
}

func (v NullableSchema) Get() *Schema {
	return v.value
}

func (v *NullableSchema) Set(val *Schema) {
	v.value = val
	v.isSet = true
}

func (v NullableSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchema(val *Schema) *NullableSchema {
	return &NullableSchema{value: val, isSet: true}
}

func (v NullableSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


