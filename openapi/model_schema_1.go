/*
OneLogin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Schema1 struct for Schema1
type Schema1 struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Username *string `json:"username,omitempty"`
	AddedBy *Schema1AddedBy `json:"added_by,omitempty"`
	AddedAt *string `json:"added_at,omitempty"`
	// Indicates if assigned to role or not. Defaults to true.
	Assigned *bool `json:"assigned,omitempty"`
}

// NewSchema1 instantiates a new Schema1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchema1() *Schema1 {
	this := Schema1{}
	return &this
}

// NewSchema1WithDefaults instantiates a new Schema1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchema1WithDefaults() *Schema1 {
	this := Schema1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Schema1) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema1) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Schema1) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Schema1) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Schema1) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema1) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Schema1) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Schema1) SetName(v string) {
	o.Name = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Schema1) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema1) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Schema1) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Schema1) SetUsername(v string) {
	o.Username = &v
}

// GetAddedBy returns the AddedBy field value if set, zero value otherwise.
func (o *Schema1) GetAddedBy() Schema1AddedBy {
	if o == nil || o.AddedBy == nil {
		var ret Schema1AddedBy
		return ret
	}
	return *o.AddedBy
}

// GetAddedByOk returns a tuple with the AddedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema1) GetAddedByOk() (*Schema1AddedBy, bool) {
	if o == nil || o.AddedBy == nil {
		return nil, false
	}
	return o.AddedBy, true
}

// HasAddedBy returns a boolean if a field has been set.
func (o *Schema1) HasAddedBy() bool {
	if o != nil && o.AddedBy != nil {
		return true
	}

	return false
}

// SetAddedBy gets a reference to the given Schema1AddedBy and assigns it to the AddedBy field.
func (o *Schema1) SetAddedBy(v Schema1AddedBy) {
	o.AddedBy = &v
}

// GetAddedAt returns the AddedAt field value if set, zero value otherwise.
func (o *Schema1) GetAddedAt() string {
	if o == nil || o.AddedAt == nil {
		var ret string
		return ret
	}
	return *o.AddedAt
}

// GetAddedAtOk returns a tuple with the AddedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema1) GetAddedAtOk() (*string, bool) {
	if o == nil || o.AddedAt == nil {
		return nil, false
	}
	return o.AddedAt, true
}

// HasAddedAt returns a boolean if a field has been set.
func (o *Schema1) HasAddedAt() bool {
	if o != nil && o.AddedAt != nil {
		return true
	}

	return false
}

// SetAddedAt gets a reference to the given string and assigns it to the AddedAt field.
func (o *Schema1) SetAddedAt(v string) {
	o.AddedAt = &v
}

// GetAssigned returns the Assigned field value if set, zero value otherwise.
func (o *Schema1) GetAssigned() bool {
	if o == nil || o.Assigned == nil {
		var ret bool
		return ret
	}
	return *o.Assigned
}

// GetAssignedOk returns a tuple with the Assigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema1) GetAssignedOk() (*bool, bool) {
	if o == nil || o.Assigned == nil {
		return nil, false
	}
	return o.Assigned, true
}

// HasAssigned returns a boolean if a field has been set.
func (o *Schema1) HasAssigned() bool {
	if o != nil && o.Assigned != nil {
		return true
	}

	return false
}

// SetAssigned gets a reference to the given bool and assigns it to the Assigned field.
func (o *Schema1) SetAssigned(v bool) {
	o.Assigned = &v
}

func (o Schema1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.AddedBy != nil {
		toSerialize["added_by"] = o.AddedBy
	}
	if o.AddedAt != nil {
		toSerialize["added_at"] = o.AddedAt
	}
	if o.Assigned != nil {
		toSerialize["assigned"] = o.Assigned
	}
	return json.Marshal(toSerialize)
}

type NullableSchema1 struct {
	value *Schema1
	isSet bool
}

func (v NullableSchema1) Get() *Schema1 {
	return v.value
}

func (v *NullableSchema1) Set(val *Schema1) {
	v.value = val
	v.isSet = true
}

func (v NullableSchema1) IsSet() bool {
	return v.isSet
}

func (v *NullableSchema1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchema1(val *Schema1) *NullableSchema1 {
	return &NullableSchema1{value: val, isSet: true}
}

func (v NullableSchema1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchema1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


