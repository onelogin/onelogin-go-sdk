/*
OneLogin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateRole200Response struct for UpdateRole200Response
type UpdateRole200Response struct {
	Id *int32 `json:"id,omitempty"`
}

// NewUpdateRole200Response instantiates a new UpdateRole200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRole200Response() *UpdateRole200Response {
	this := UpdateRole200Response{}
	return &this
}

// NewUpdateRole200ResponseWithDefaults instantiates a new UpdateRole200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRole200ResponseWithDefaults() *UpdateRole200Response {
	this := UpdateRole200Response{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateRole200Response) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRole200Response) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateRole200Response) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UpdateRole200Response) SetId(v int32) {
	o.Id = &v
}

func (o UpdateRole200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateRole200Response struct {
	value *UpdateRole200Response
	isSet bool
}

func (v NullableUpdateRole200Response) Get() *UpdateRole200Response {
	return v.value
}

func (v *NullableUpdateRole200Response) Set(val *UpdateRole200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRole200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRole200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRole200Response(val *UpdateRole200Response) *NullableUpdateRole200Response {
	return &NullableUpdateRole200Response{value: val, isSet: true}
}

func (v NullableUpdateRole200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRole200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


