/*
OneLogin API

Testing BrandingServiceTemplatesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onelogin

import (
	"context"
	"testing"

	openapiclient "github.com/onelogin/onelogin-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_onelogin_BrandingServiceTemplatesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BrandingServiceTemplatesApiService CreateMessageTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var brandId int32

		resp, httpRes, err := apiClient.BrandingServiceTemplatesApi.CreateMessageTemplate(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandingServiceTemplatesApiService DeleteMessageTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var brandId int32
		var templateId int32

		httpRes, err := apiClient.BrandingServiceTemplatesApi.DeleteMessageTemplate(context.Background(), brandId, templateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandingServiceTemplatesApiService GetMasterByType", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateType string

		resp, httpRes, err := apiClient.BrandingServiceTemplatesApi.GetMasterByType(context.Background(), templateType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandingServiceTemplatesApiService GetMessageTemplateById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var brandId int32
		var templateId int32

		resp, httpRes, err := apiClient.BrandingServiceTemplatesApi.GetMessageTemplateById(context.Background(), brandId, templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandingServiceTemplatesApiService GetTemplateByLocale", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var brandId int32
		var templateType string
		var locale string

		resp, httpRes, err := apiClient.BrandingServiceTemplatesApi.GetTemplateByLocale(context.Background(), brandId, templateType, locale).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandingServiceTemplatesApiService ListMessageTemplates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var brandId int32

		resp, httpRes, err := apiClient.BrandingServiceTemplatesApi.ListMessageTemplates(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandingServiceTemplatesApiService UpdateMessageTemplateById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var brandId int32
		var templateId int32

		resp, httpRes, err := apiClient.BrandingServiceTemplatesApi.UpdateMessageTemplateById(context.Background(), brandId, templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandingServiceTemplatesApiService UpdateTemplateByLocale", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var brandId int32
		var templateType string
		var locale string

		resp, httpRes, err := apiClient.BrandingServiceTemplatesApi.UpdateTemplateByLocale(context.Background(), brandId, templateType, locale).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
