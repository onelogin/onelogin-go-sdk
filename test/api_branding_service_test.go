/*
OneLogin API

Testing BrandingServiceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onelogin

import (
	"context"
	"testing"

	openapiclient "github.com/onelogin/onelogin-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_onelogin_BrandingServiceApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BrandingServiceApiService CreateBrand", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BrandingServiceApi.CreateBrand(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandingServiceApiService DeleteBrand", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var brandId int32

		httpRes, err := apiClient.BrandingServiceApi.DeleteBrand(context.Background(), brandId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandingServiceApiService GetBrand", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var brandId int32

		resp, httpRes, err := apiClient.BrandingServiceApi.GetBrand(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandingServiceApiService GetBrandApps", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var brandId int32

		resp, httpRes, err := apiClient.BrandingServiceApi.GetBrandApps(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandingServiceApiService ListBrands", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BrandingServiceApi.ListBrands(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandingServiceApiService UpdateBrand", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var brandId int32

		resp, httpRes, err := apiClient.BrandingServiceApi.UpdateBrand(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
