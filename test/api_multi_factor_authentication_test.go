/*
OneLogin API

Testing MultiFactorAuthenticationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onelogin

import (
	"context"
	"testing"

	openapiclient "github.com/onelogin/onelogin-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_onelogin_MultiFactorAuthenticationApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MultiFactorAuthenticationApiService CreateDeviceVerification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32

		resp, httpRes, err := apiClient.MultiFactorAuthenticationApi.CreateDeviceVerification(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiFactorAuthenticationApiService CreateFactorRegistration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32

		resp, httpRes, err := apiClient.MultiFactorAuthenticationApi.CreateFactorRegistration(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiFactorAuthenticationApiService DeleteEnrolledFactor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32
		var deviceId string

		httpRes, err := apiClient.MultiFactorAuthenticationApi.DeleteEnrolledFactor(context.Background(), userId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiFactorAuthenticationApiService GenerateOTP", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32

		resp, httpRes, err := apiClient.MultiFactorAuthenticationApi.GenerateOTP(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiFactorAuthenticationApiService GetAuthFactors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32

		resp, httpRes, err := apiClient.MultiFactorAuthenticationApi.GetAuthFactors(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiFactorAuthenticationApiService GetAuthenticationDevices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32

		resp, httpRes, err := apiClient.MultiFactorAuthenticationApi.GetAuthenticationDevices(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiFactorAuthenticationApiService GetUserRegistration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32
		var registrationId string

		resp, httpRes, err := apiClient.MultiFactorAuthenticationApi.GetUserRegistration(context.Background(), userId, registrationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiFactorAuthenticationApiService GetUserVerification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32
		var verificationId string

		resp, httpRes, err := apiClient.MultiFactorAuthenticationApi.GetUserVerification(context.Background(), userId, verificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiFactorAuthenticationApiService VerifyUserRegistration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32
		var registrationId string

		resp, httpRes, err := apiClient.MultiFactorAuthenticationApi.VerifyUserRegistration(context.Background(), userId, registrationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiFactorAuthenticationApiService VerifyUserVerification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32
		var verificationId string

		resp, httpRes, err := apiClient.MultiFactorAuthenticationApi.VerifyUserVerification(context.Background(), userId, verificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
