/*
OneLogin API

Testing MultiFactorAuthenticationV1ApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onelogin

import (
	"context"
	"testing"

	openapiclient "github.com/onelogin/onelogin-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_onelogin_MultiFactorAuthenticationV1ApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MultiFactorAuthenticationV1ApiService ActivateMfaFactors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32
		var deviceId string

		resp, httpRes, err := apiClient.MultiFactorAuthenticationV1Api.ActivateMfaFactors(context.Background(), userId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiFactorAuthenticationV1ApiService EnrollMfaFactor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32

		resp, httpRes, err := apiClient.MultiFactorAuthenticationV1Api.EnrollMfaFactor(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiFactorAuthenticationV1ApiService GenerateMFAtoken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32

		resp, httpRes, err := apiClient.MultiFactorAuthenticationV1Api.GenerateMFAtoken(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiFactorAuthenticationV1ApiService GetEnrolledFactors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32

		resp, httpRes, err := apiClient.MultiFactorAuthenticationV1Api.GetEnrolledFactors(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiFactorAuthenticationV1ApiService GetMFAFactors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32

		resp, httpRes, err := apiClient.MultiFactorAuthenticationV1Api.GetMFAFactors(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiFactorAuthenticationV1ApiService RemoveMfaFactors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32
		var deviceId string

		httpRes, err := apiClient.MultiFactorAuthenticationV1Api.RemoveMfaFactors(context.Background(), userId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiFactorAuthenticationV1ApiService VerifyMfaFactor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int32
		var deviceId string

		resp, httpRes, err := apiClient.MultiFactorAuthenticationV1Api.VerifyMfaFactor(context.Background(), userId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
