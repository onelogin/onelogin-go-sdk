/*
OneLogin API

Testing PrivilegesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onelogin

import (
	"context"
	"testing"

	openapiclient "github.com/onelogin/onelogin-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_onelogin_PrivilegesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PrivilegesApiService AddPrivilegeToRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var privilegeId string

		resp, httpRes, err := apiClient.PrivilegesApi.AddPrivilegeToRole(context.Background(), privilegeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrivilegesApiService AssignUsersToPrivilege", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var privilegeId string

		resp, httpRes, err := apiClient.PrivilegesApi.AssignUsersToPrivilege(context.Background(), privilegeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrivilegesApiService CreatePrivilege", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PrivilegesApi.CreatePrivilege(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrivilegesApiService DeletePrivilege", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var privilegeId string

		httpRes, err := apiClient.PrivilegesApi.DeletePrivilege(context.Background(), privilegeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrivilegesApiService DeleteRoleFromPrivilege", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var privilegeId string
		var roleId string

		httpRes, err := apiClient.PrivilegesApi.DeleteRoleFromPrivilege(context.Background(), privilegeId, roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrivilegesApiService GetAssignedUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var privilegeId string

		resp, httpRes, err := apiClient.PrivilegesApi.GetAssignedUser(context.Background(), privilegeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrivilegesApiService GetPrivilege", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var privilegeId string

		resp, httpRes, err := apiClient.PrivilegesApi.GetPrivilege(context.Background(), privilegeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrivilegesApiService ListPrivelegeRoles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var privilegeId string

		resp, httpRes, err := apiClient.PrivilegesApi.ListPrivelegeRoles(context.Background(), privilegeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrivilegesApiService ListPriveleges", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PrivilegesApi.ListPriveleges(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrivilegesApiService RemoveUserFromPrivilege", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var privilegeId string
		var userId int32

		httpRes, err := apiClient.PrivilegesApi.RemoveUserFromPrivilege(context.Background(), privilegeId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrivilegesApiService UpdatePrivilege", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var privilegeId string

		resp, httpRes, err := apiClient.PrivilegesApi.UpdatePrivilege(context.Background(), privilegeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
