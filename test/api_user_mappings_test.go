/*
OneLogin API

Testing UserMappingsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onelogin

import (
	"context"
	"testing"

	openapiclient "github.com/onelogin/onelogin-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_onelogin_UserMappingsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UserMappingsApiService CreateMapping", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserMappingsApi.CreateMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMappingsApiService DeleteMapping", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mappingId int32

		httpRes, err := apiClient.UserMappingsApi.DeleteMapping(context.Background(), mappingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMappingsApiService GetMapping", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mappingId int32

		resp, httpRes, err := apiClient.UserMappingsApi.GetMapping(context.Background(), mappingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMappingsApiService ListMappingActionValues", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mappingActionValue string

		resp, httpRes, err := apiClient.UserMappingsApi.ListMappingActionValues(context.Background(), mappingActionValue).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMappingsApiService ListMappingConditions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserMappingsApi.ListMappingConditions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMappingsApiService ListMappingConditionsOperators", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mappingConditionValue string

		resp, httpRes, err := apiClient.UserMappingsApi.ListMappingConditionsOperators(context.Background(), mappingConditionValue).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMappingsApiService ListMappingContionValues", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mappingConditionValue string

		resp, httpRes, err := apiClient.UserMappingsApi.ListMappingContionValues(context.Background(), mappingConditionValue).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMappingsApiService ListMappings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserMappingsApi.ListMappings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMappingsApiService ListMappingsActions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserMappingsApi.ListMappingsActions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMappingsApiService SortMappings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserMappingsApi.SortMappings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMappingsApiService UpdateMapping", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mappingId int32

		resp, httpRes, err := apiClient.UserMappingsApi.UpdateMapping(context.Background(), mappingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
