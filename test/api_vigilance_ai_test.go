/*
OneLogin API

Testing VigilanceAIApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onelogin

import (
	"context"
	"testing"

	openapiclient "github.com/onelogin/onelogin-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_onelogin_VigilanceAIApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VigilanceAIApiService CreateRiskRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VigilanceAIApi.CreateRiskRule(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VigilanceAIApiService DeleteRiskRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ruleId string

		httpRes, err := apiClient.VigilanceAIApi.DeleteRiskRule(context.Background(), ruleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VigilanceAIApiService GetRiskRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ruleId string

		resp, httpRes, err := apiClient.VigilanceAIApi.GetRiskRule(context.Background(), ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VigilanceAIApiService GetRiskScore", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VigilanceAIApi.GetRiskScore(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VigilanceAIApiService GetRiskScores", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VigilanceAIApi.GetRiskScores(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VigilanceAIApiService ListRiskRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VigilanceAIApi.ListRiskRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VigilanceAIApiService TrackRiskEvent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.VigilanceAIApi.TrackRiskEvent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VigilanceAIApiService UpdateRiskRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ruleId string

		resp, httpRes, err := apiClient.VigilanceAIApi.UpdateRiskRule(context.Background(), ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
